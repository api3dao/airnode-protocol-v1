{
  "address": "0x938d7f40CFB519ecD421762d6431FC7B767AD858",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "AnnouncedSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "AnnouncedTemplate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimedBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "FailedRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "FailedRequestRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "FulfilledRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "FulfilledRequestRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnodeOrRelayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsorWallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FulfilledWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterRequestCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "MadeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requesterRequestCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "MadeRequestRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnodeOrRelayer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        }
      ],
      "name": "RequestedWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetPspSponsorshipStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetRrpSponsorshipStatus",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_PARAMETER_LENGTH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "announceSubscription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "announceTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "failRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "failRequestRelayed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillRequest",
      "outputs": [
        {
          "internalType": "bool",
          "name": "callSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillRequestRelayed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "callSuccess",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnodeOrRelayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillWithdrawal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "makeRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "makeRequestRelayed",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "requestIsAwaitingFulfillment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnodeOrRelayer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "protocolId",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requesterToRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setPspSponsorshipStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRrpSponsorshipStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sponsorToBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sponsorToRequesterToRrpSponsorshipStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "sponsorToSubscriptionIdToPspSponsorshipStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sponsorToWithdrawalRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "name": "storeSubscription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "name": "storeTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointOrTemplateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bytes4",
          "name": "fulfillFunctionId",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "templates",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalRequestId",
          "type": "bytes32"
        }
      ],
      "name": "withdrawalRequestIsAwaitingFulfillment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0e03d49d7a05f47d545a790471d74818e714f72038f2ce2b7f71b60d661ffc15",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "3180976",
    "logsBloom": "0x
    "blockHash": "0xa27ee41a8e4da55f51d2d5d5c10056c08328f587c9aa649b38bbd22f288f5054",
    "transactionHash": "0x0e03d49d7a05f47d545a790471d74818e714f72038f2ce2b7f71b60d661ffc15",
    "logs": [],
    "blockNumber": 26427931,
    "cumulativeGasUsed": "3598835",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6157b97e11daa900527785f71f13deac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"AnnouncedSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"AnnouncedTemplate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimedBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"FailedRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"FailedRequestRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FulfilledRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FulfilledRequestRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnodeOrRelayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsorWallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FulfilledWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterRequestCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"MadeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requesterRequestCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"MadeRequestRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnodeOrRelayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"RequestedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetPspSponsorshipStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetRrpSponsorshipStatus\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_PARAMETER_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"announceSubscription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"announceTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"failRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"failRequestRelayed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillRequest\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"callSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillRequestRelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"callSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnodeOrRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillWithdrawal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"makeRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"makeRequestRelayed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"requestIsAwaitingFulfillment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnodeOrRelayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolId\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requesterToRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setPspSponsorshipStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRrpSponsorshipStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToRequesterToRrpSponsorshipStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sponsorToSubscriptionIdToPspSponsorshipStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToWithdrawalRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"name\":\"storeSubscription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"name\":\"storeTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointOrTemplateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bytes4\",\"name\":\"fulfillFunctionId\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"templates\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalRequestId\",\"type\":\"bytes32\"}],\"name\":\"withdrawalRequestIsAwaitingFulfillment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"StorageUtils, SponsorshipUtils and WithdrawalUtils also implement some auxiliary functionality for PSP\",\"kind\":\"dev\",\"methods\":{\"announceSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)\":{\"details\":\"`airnode` should make the query specified by `templateId` and `parameters`. If the returned data satisfies `conditions`, it should call `requester`'s `fulfillFunctionId` on `chainId` with the returned data, using the wallet dedicated to `sponsor`. If `relayer` is not `airnode`, the relayer is responsible with checking `condition` and using the wallet dedicated to `sponsor` to deliver the data. In most cases, `conditions` will specify a static call to a function on `chainId` with the data. The extent of its flexibility depends on the node implementation and is outside the scope of the on-chain protocol. Similarly, `conditions` can specify with what frequency it should be verified, and the details of this is outside the scope. `templateId` being zero is similar to the endpoint ID being zero for templates, means the endpoint query can be skipped. In this case, `parameters` will be treated as the data that is returned by the endpoint while verifying `conditions`.\",\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"conditions\":\"Conditions under which the subscription is requested to be fulfilled, encoded in Airnode ABI\",\"endpointOrTemplateId\":\"Endpoint or template ID (allowed to be `bytes32(0)`)\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"parameters\":\"Parameters provided by the subscription in addition to the parameters in the template (if applicable), encoded in Airnode ABI\",\"relayer\":\"Relayer address\",\"requester\":\"Requester address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"subscriptionId\":\"Subscription ID\"}},\"announceTemplate(bytes32,bytes)\":{\"details\":\"Templates fully or partially define requests. By referencing a template, requesters can omit specifying the \\\"boilerplate\\\" sections of requests. In a subscription context, a zero endpoint ID means the Airnode does not need to use one of its endpoints, and can move directly on to fulfillment. This is particularly useful for defining traditional keeper jobs that do not require off-chain data.\",\"params\":{\"endpointId\":\"Endpoint ID (allowed to be `bytes32(0)`)\",\"parameters\":\"Template parameters, encoded in Airnode ABI\"},\"returns\":{\"templateId\":\"Template ID\"}},\"claimBalance()\":{\"details\":\"The sponsor must be able to receive funds. For example, if the sponsor is a contract without a default `payable` function, this will revert.\"},\"failRequest(bytes32,address,address,bytes4,uint256,string,bytes)\":{\"details\":\"The Airnode should fall back to this if a request cannot be fulfilled because of an error, including the static call to `fulfill()` returning `false` for `callSuccess`\",\"params\":{\"airnode\":\"Airnode address\",\"errorMessage\":\"A message that explains why the request has failed\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"signature\":\"Request ID, a timestamp and the sponsor wallet address signed by the Airnode address\",\"timestamp\":\"Timestamp used in the signature\"}},\"failRequestRelayed(bytes32,address,address,address,bytes4,uint256,string,bytes)\":{\"details\":\"Since failure may also include problems at the Airnode-end (such as it being unavailable), we are content with a signature from the relayer to validate failures. This is acceptable because explicit failures are mainly for easy debugging of issues, and the requester should always consider denial of service from a relayer or an Airnode to be a possibility.\",\"params\":{\"airnode\":\"Airnode address\",\"errorMessage\":\"A message that explains why the request has failed\",\"relayer\":\"Relayer address\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"signature\":\"Request ID, a timestamp and the sponsor wallet address signed by the relayer address\",\"timestamp\":\"Timestamp used in the signature\"}},\"fulfillRequest(bytes32,address,address,bytes4,uint256,bytes,bytes)\":{\"details\":\"Airnodes attest to controlling their respective sponsor wallets by signing a message with the address of the sponsor wallet. A timestamp is added to this signature for it to act as an expiring token if the requester contract checks for freshness. This will not revert depending on the external call. However, it will return `false` if the external call reverts or if there is no function with a matching signature at `fulfillAddress`. On the other hand, it will return `true` if the external call returns successfully or if there is no contract deployed at `fulfillAddress`. If `callSuccess` is `false`, `callData` can be decoded to retrieve the revert string.\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data, encoded in contract ABI\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"signature\":\"Request ID, a timestamp and the sponsor wallet address signed by the Airnode wallet\",\"timestamp\":\"Timestamp used in the signature\"},\"returns\":{\"callData\":\"Data returned by the fulfillment call (if there is any)\",\"callSuccess\":\"If the fulfillment call succeeded\"}},\"fulfillRequestRelayed(bytes32,address,address,address,bytes4,uint256,bytes,bytes)\":{\"details\":\"The Airnode must verify the integrity of the request details, template details, sponsor address\\u2013sponsor wallet address consistency before signing the response\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"relayer\":\"Relayer address\",\"requestId\":\"Request ID\",\"requester\":\"Requester address\",\"signature\":\"Request ID, a timestamp, the sponsor wallet address and the fulfillment data signed by the Airnode address\",\"timestamp\":\"Timestamp used in the signature\"},\"returns\":{\"callData\":\"Data returned by the fulfillment call (if there is any)\",\"callSuccess\":\"If the fulfillment call succeeded\"}},\"fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)\":{\"params\":{\"airnodeOrRelayer\":\"Airnode/relayer address\",\"protocolId\":\"Protocol ID\",\"sponsor\":\"Sponsor address\",\"withdrawalRequestId\":\"Withdrawal request ID\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"makeRequest(address,bytes32,bytes,address,bytes4)\":{\"details\":\"It is the responsibility of the respective Airnode to resolve if `endpointOrTemplateId` is an endpoint ID or a template ID\",\"params\":{\"endpointOrTemplateId\":\"Endpoint or template ID\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"parameters\":\"Parameters\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"requestId\":\"Request ID\"}},\"makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)\":{\"details\":\"The relayer address is indexed in the relayed protocol logs because it will be the relayer that will be listening to these logs\",\"params\":{\"endpointOrTemplateId\":\"Endpoint or template ID\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"parameters\":\"Parameters\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"requestId\":\"Request ID\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"requestIsAwaitingFulfillment(bytes32)\":{\"details\":\"If a requester has made a request, received a request ID but did not hear back, it can call this method to check if the Airnode/relayer called back `failRequest()`/`failRequestRelayed()` instead.\",\"params\":{\"requestId\":\"Request ID\"},\"returns\":{\"_0\":\"If the request is awaiting fulfillment\"}},\"requestWithdrawal(address,uint256)\":{\"params\":{\"airnodeOrRelayer\":\"Airnode/relayer address\",\"protocolId\":\"Protocol ID\"}},\"setPspSponsorshipStatus(bytes32,bool)\":{\"params\":{\"status\":\"Sponsorship status\",\"subscriptionId\":\"Subscription ID\"}},\"setRrpSponsorshipStatus(address,bool)\":{\"details\":\"This applies to both regular and relayed RRP requests\",\"params\":{\"requester\":\"RRP requester address\",\"status\":\"Sponsorship status\"}},\"storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"conditions\":\"Conditions under which the subscription is requested to be fulfilled, encoded in Airnode ABI\",\"endpointOrTemplateId\":\"Endpoint or template ID (allowed to be `bytes32(0)`)\",\"fulfillFunctionId\":\"Selector of the function to be called for fulfillment\",\"parameters\":\"Parameters provided by the subscription in addition to the parameters in the template (if applicable), encoded in Airnode ABI\",\"relayer\":\"Relayer address\",\"requester\":\"Requester address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"subscriptionId\":\"Subscription ID\"}},\"storeTemplate(bytes32,bytes)\":{\"params\":{\"endpointId\":\"Endpoint ID (allowed to be `bytes32(0)`)\",\"parameters\":\"Template parameters, encoded in Airnode ABI\"},\"returns\":{\"templateId\":\"Template ID\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}},\"withdrawalRequestIsAwaitingFulfillment(bytes32)\":{\"params\":{\"withdrawalRequestId\":\"Withdrawal request ID\"},\"returns\":{\"_0\":\"isAwaitingFulfillment If the withdrawal request is awaiting fulfillment\"}}},\"title\":\"Airnode request\\u2013response protocol (RRP) and its relayed version\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_PARAMETER_LENGTH()\":{\"notice\":\"Maximum parameter length for byte strings that Airnodes will need to read from storage or logs\"},\"announceSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)\":{\"notice\":\"Announces subscription details\"},\"announceTemplate(bytes32,bytes)\":{\"notice\":\"Announces template details with an event\"},\"claimBalance()\":{\"notice\":\"Called by the sponsor to claim the withdrawn funds\"},\"failRequest(bytes32,address,address,bytes4,uint256,string,bytes)\":{\"notice\":\"Called by the Airnode using the sponsor wallet if the request cannot be fulfilled\"},\"failRequestRelayed(bytes32,address,address,address,bytes4,uint256,string,bytes)\":{\"notice\":\"Called by the relayer using the sponsor wallet if the request cannot be fulfilled\"},\"fulfillRequest(bytes32,address,address,bytes4,uint256,bytes,bytes)\":{\"notice\":\"Called by the Airnode using the sponsor wallet to fulfill the request\"},\"fulfillRequestRelayed(bytes32,address,address,address,bytes4,uint256,bytes,bytes)\":{\"notice\":\"Called by the relayer using the sponsor wallet to fulfill the request with the Airnode-signed response\"},\"fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet to fulfill the withdrawal request made by the sponsor\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"makeRequest(address,bytes32,bytes,address,bytes4)\":{\"notice\":\"Called by the requester to make a request\"},\"makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)\":{\"notice\":\"Called by the requester to make a request to be fulfilled by a relayer\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts if at least one of the batched calls reverts\"},\"requestIsAwaitingFulfillment(bytes32)\":{\"notice\":\"Returns if the request with the ID is made but not fulfilled/failed yet\"},\"requestWithdrawal(address,uint256)\":{\"notice\":\"Called by a sponsor to request a withdrawal\"},\"requesterToRequestCount(address)\":{\"notice\":\"Number of requests the requester has made\"},\"setPspSponsorshipStatus(bytes32,bool)\":{\"notice\":\"Called by the sponsor to set the sponsorship status of a PSP subscription\"},\"setRrpSponsorshipStatus(address,bool)\":{\"notice\":\"Called by the sponsor to set the sponsorship status of an RRP requester\"},\"sponsorToBalance(address)\":{\"notice\":\"Sponsor balance that is withdrawn but not claimed\"},\"sponsorToRequesterToRrpSponsorshipStatus(address,address)\":{\"notice\":\"Sponsorship status for a sponsor\\u2013RRP requester pair\"},\"sponsorToSubscriptionIdToPspSponsorshipStatus(address,bytes32)\":{\"notice\":\"Sponsorship status for a sponsor\\u2013PSP subscription pair\"},\"sponsorToWithdrawalRequestCount(address)\":{\"notice\":\"Number of withdrawal requests the sponsor made\"},\"storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)\":{\"notice\":\"Stores subscription details\"},\"storeTemplate(bytes32,bytes)\":{\"notice\":\"Stores template details\"},\"subscriptions(bytes32)\":{\"notice\":\"Subscription details with the ID\"},\"templates(bytes32)\":{\"notice\":\"Template details with the ID\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"},\"withdrawalRequestIsAwaitingFulfillment(bytes32)\":{\"notice\":\"Returns if the withdrawal request with the ID is made but not fulfilled yet\"}},\"notice\":\"Similar to HTTP, RRP allows the requester to specify a one-off request that the Airnode is expected to respond to as soon as possible. The relayed version allows the requester to specify an Airnode that will sign the fulfillment data and a relayer that will report the signed fulfillment.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocol/AirnodeProtocol.sol\":\"AirnodeProtocol\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/protocol/AirnodeProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../utils/ExtendedSelfMulticall.sol\\\";\\nimport \\\"./StorageUtils.sol\\\";\\nimport \\\"./SponsorshipUtils.sol\\\";\\nimport \\\"./WithdrawalUtils.sol\\\";\\nimport \\\"./interfaces/IAirnodeProtocol.sol\\\";\\n\\n/// @title Airnode request\\u2013response protocol (RRP) and its relayed version\\n/// @notice Similar to HTTP, RRP allows the requester to specify a one-off\\n/// request that the Airnode is expected to respond to as soon as possible.\\n/// The relayed version allows the requester to specify an Airnode that will\\n/// sign the fulfillment data and a relayer that will report the signed\\n/// fulfillment.\\n/// @dev StorageUtils, SponsorshipUtils and WithdrawalUtils also implement some\\n/// auxiliary functionality for PSP\\ncontract AirnodeProtocol is\\n    ExtendedSelfMulticall,\\n    StorageUtils,\\n    SponsorshipUtils,\\n    WithdrawalUtils,\\n    IAirnodeProtocol\\n{\\n    using ECDSA for bytes32;\\n\\n    /// @notice Number of requests the requester has made\\n    mapping(address => uint256) public override requesterToRequestCount;\\n\\n    mapping(bytes32 => bytes32) private requestIdToFulfillmentParameters;\\n\\n    /// @notice Called by the requester to make a request\\n    /// @dev It is the responsibility of the respective Airnode to resolve if\\n    /// `endpointOrTemplateId` is an endpoint ID or a template ID\\n    /// @param endpointOrTemplateId Endpoint or template ID\\n    /// @param parameters Parameters\\n    /// @param sponsor Sponsor address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @return requestId Request ID\\n    function makeRequest(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external override returns (bytes32 requestId) {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(\\n            endpointOrTemplateId != bytes32(0),\\n            \\\"Endpoint or template ID zero\\\"\\n        );\\n        require(\\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\\n            \\\"Parameters too long\\\"\\n        );\\n        require(sponsor != address(0), \\\"Sponsor address zero\\\");\\n        require(fulfillFunctionId != bytes4(0), \\\"Fulfill function ID zero\\\");\\n        uint256 requesterRequestCount = ++requesterToRequestCount[msg.sender];\\n        requestId = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                address(this),\\n                msg.sender,\\n                requesterRequestCount,\\n                airnode,\\n                endpointOrTemplateId,\\n                parameters,\\n                sponsor,\\n                fulfillFunctionId\\n            )\\n        );\\n        requestIdToFulfillmentParameters[requestId] = keccak256(\\n            abi.encodePacked(airnode, msg.sender, fulfillFunctionId)\\n        );\\n        emit MadeRequest(\\n            airnode,\\n            requestId,\\n            msg.sender,\\n            requesterRequestCount,\\n            endpointOrTemplateId,\\n            parameters,\\n            sponsor,\\n            fulfillFunctionId\\n        );\\n    }\\n\\n    /// @notice Called by the Airnode using the sponsor wallet to fulfill the\\n    /// request\\n    /// @dev Airnodes attest to controlling their respective sponsor wallets by\\n    /// signing a message with the address of the sponsor wallet. A timestamp\\n    /// is added to this signature for it to act as an expiring token if the\\n    /// requester contract checks for freshness.\\n    /// This will not revert depending on the external call. However, it will\\n    /// return `false` if the external call reverts or if there is no function\\n    /// with a matching signature at `fulfillAddress`. On the other hand, it\\n    /// will return `true` if the external call returns successfully or if\\n    /// there is no contract deployed at `fulfillAddress`.\\n    /// If `callSuccess` is `false`, `callData` can be decoded to retrieve the\\n    /// revert string.\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param requester Requester address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data, encoded in contract ABI\\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\\n    /// signed by the Airnode wallet\\n    /// @return callSuccess If the fulfillment call succeeded\\n    /// @return callData Data returned by the fulfillment call (if there is\\n    /// any)\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override returns (bool callSuccess, bytes memory callData) {\\n        require(\\n            keccak256(\\n                abi.encodePacked(airnode, requester, fulfillFunctionId)\\n            ) == requestIdToFulfillmentParameters[requestId],\\n            \\\"Invalid request fulfillment\\\"\\n        );\\n        require(\\n            (\\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\\n                    .toEthSignedMessageHash()\\n            ).recover(signature) == airnode,\\n            \\\"Signature mismatch\\\"\\n        );\\n        delete requestIdToFulfillmentParameters[requestId];\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (callSuccess, callData) = requester.call(\\n            abi.encodeWithSelector(\\n                fulfillFunctionId,\\n                requestId,\\n                timestamp,\\n                data\\n            )\\n        );\\n        if (callSuccess) {\\n            emit FulfilledRequest(airnode, requestId, timestamp, data);\\n        } else {\\n            // We do not bubble up the revert string from `callData`\\n            emit FailedRequest(\\n                airnode,\\n                requestId,\\n                timestamp,\\n                \\\"Fulfillment failed unexpectedly\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Called by the Airnode using the sponsor wallet if the request\\n    /// cannot be fulfilled\\n    /// @dev The Airnode should fall back to this if a request cannot be\\n    /// fulfilled because of an error, including the static call to `fulfill()`\\n    /// returning `false` for `callSuccess`\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param requester Requester address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param errorMessage A message that explains why the request has failed\\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\\n    /// signed by the Airnode address\\n    function failRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external override {\\n        require(\\n            keccak256(\\n                abi.encodePacked(airnode, requester, fulfillFunctionId)\\n            ) == requestIdToFulfillmentParameters[requestId],\\n            \\\"Invalid request fulfillment\\\"\\n        );\\n        require(\\n            (\\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\\n                    .toEthSignedMessageHash()\\n            ).recover(signature) == airnode,\\n            \\\"Signature mismatch\\\"\\n        );\\n        delete requestIdToFulfillmentParameters[requestId];\\n        emit FailedRequest(airnode, requestId, timestamp, errorMessage);\\n    }\\n\\n    /// @notice Called by the requester to make a request to be fulfilled by a\\n    /// relayer\\n    /// @dev The relayer address is indexed in the relayed protocol logs\\n    /// because it will be the relayer that will be listening to these logs\\n    /// @param endpointOrTemplateId Endpoint or template ID\\n    /// @param parameters Parameters\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @return requestId Request ID\\n    function makeRequestRelayed(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external override returns (bytes32 requestId) {\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(\\n            endpointOrTemplateId != bytes32(0),\\n            \\\"Endpoint or template ID zero\\\"\\n        );\\n        require(\\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\\n            \\\"Parameters too long\\\"\\n        );\\n        require(relayer != address(0), \\\"Relayer address zero\\\");\\n        require(sponsor != address(0), \\\"Sponsor address zero\\\");\\n        require(fulfillFunctionId != bytes4(0), \\\"Fulfill function ID zero\\\");\\n        uint256 requesterRequestCount = ++requesterToRequestCount[msg.sender];\\n        requestId = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                address(this),\\n                msg.sender,\\n                requesterRequestCount,\\n                airnode,\\n                endpointOrTemplateId,\\n                parameters,\\n                relayer,\\n                sponsor,\\n                fulfillFunctionId\\n            )\\n        );\\n        requestIdToFulfillmentParameters[requestId] = keccak256(\\n            abi.encodePacked(airnode, msg.sender, relayer, fulfillFunctionId)\\n        );\\n        emit MadeRequestRelayed(\\n            relayer,\\n            requestId,\\n            airnode,\\n            msg.sender,\\n            requesterRequestCount,\\n            endpointOrTemplateId,\\n            parameters,\\n            sponsor,\\n            fulfillFunctionId\\n        );\\n    }\\n\\n    /// @notice Called by the relayer using the sponsor wallet to fulfill the\\n    /// request with the Airnode-signed response\\n    /// @dev The Airnode must verify the integrity of the request details,\\n    /// template details, sponsor address\\u2013sponsor wallet address consistency\\n    /// before signing the response\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param requester Requester address\\n    /// @param relayer Relayer address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data\\n    /// @param signature Request ID, a timestamp, the sponsor wallet address\\n    /// and the fulfillment data signed by the Airnode address\\n    /// @return callSuccess If the fulfillment call succeeded\\n    /// @return callData Data returned by the fulfillment call (if there is\\n    /// any)\\n    function fulfillRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override returns (bool callSuccess, bytes memory callData) {\\n        require(\\n            keccak256(\\n                abi.encodePacked(airnode, requester, relayer, fulfillFunctionId)\\n            ) == requestIdToFulfillmentParameters[requestId],\\n            \\\"Invalid request fulfillment\\\"\\n        );\\n        require(\\n            (\\n                keccak256(\\n                    abi.encodePacked(requestId, timestamp, msg.sender, data)\\n                ).toEthSignedMessageHash()\\n            ).recover(signature) == airnode,\\n            \\\"Signature mismatch\\\"\\n        );\\n        delete requestIdToFulfillmentParameters[requestId];\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (callSuccess, callData) = requester.call(\\n            abi.encodeWithSelector(\\n                fulfillFunctionId,\\n                requestId,\\n                timestamp,\\n                data\\n            )\\n        );\\n        if (callSuccess) {\\n            emit FulfilledRequestRelayed(\\n                relayer,\\n                requestId,\\n                airnode,\\n                timestamp,\\n                data\\n            );\\n        } else {\\n            // We do not bubble up the revert string from `callData`\\n            emit FailedRequestRelayed(\\n                relayer,\\n                requestId,\\n                airnode,\\n                timestamp,\\n                \\\"Fulfillment failed unexpectedly\\\"\\n            );\\n        }\\n    }\\n\\n    /// @notice Called by the relayer using the sponsor wallet if the request\\n    /// cannot be fulfilled\\n    /// @dev Since failure may also include problems at the Airnode-end (such\\n    /// as it being unavailable), we are content with a signature from the\\n    /// relayer to validate failures. This is acceptable because explicit\\n    /// failures are mainly for easy debugging of issues, and the requester\\n    /// should always consider denial of service from a relayer or an Airnode\\n    /// to be a possibility.\\n    /// @param requestId Request ID\\n    /// @param airnode Airnode address\\n    /// @param requester Requester address\\n    /// @param relayer Relayer address\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param errorMessage A message that explains why the request has failed\\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\\n    /// signed by the relayer address\\n    function failRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external override {\\n        require(\\n            keccak256(\\n                abi.encodePacked(airnode, requester, relayer, fulfillFunctionId)\\n            ) == requestIdToFulfillmentParameters[requestId],\\n            \\\"Invalid request fulfillment\\\"\\n        );\\n        require(\\n            (\\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\\n                    .toEthSignedMessageHash()\\n            ).recover(signature) == relayer,\\n            \\\"Signature mismatch\\\"\\n        );\\n        delete requestIdToFulfillmentParameters[requestId];\\n        emit FailedRequestRelayed(\\n            relayer,\\n            requestId,\\n            airnode,\\n            timestamp,\\n            errorMessage\\n        );\\n    }\\n\\n    /// @notice Returns if the request with the ID is made but not\\n    /// fulfilled/failed yet\\n    /// @dev If a requester has made a request, received a request ID but did\\n    /// not hear back, it can call this method to check if the Airnode/relayer\\n    /// called back `failRequest()`/`failRequestRelayed()` instead.\\n    /// @param requestId Request ID\\n    /// @return If the request is awaiting fulfillment\\n    function requestIsAwaitingFulfillment(\\n        bytes32 requestId\\n    ) external view override returns (bool) {\\n        return requestIdToFulfillmentParameters[requestId] != bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0x5d41ece26f72382da136c362a21ca17e01baa1992923cb72b8e98297367244be\",\"license\":\"MIT\"},\"contracts/protocol/SponsorshipUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/ISponsorshipUtils.sol\\\";\\n\\n/// @title Contract that sponsors can use to announce their willingness to\\n/// sponsor a particular RRP requester or PSP subscription\\n/// @notice The sponsorship status is not checked during requests or\\n/// fulfillments, which means the respective Airnode is trusted to make this\\n/// check through a static call to this contract. The Airnode may skip this\\n/// check if it has received an off-chain assurance.\\n/// @dev An Airnode (or relayer) has a \\\"sponsor wallet\\\" dedicated for each\\n/// account through an HD wallet. When a requester makes a request specifying a\\n/// sponsor, the Airnode verifies the sponsorship my making a static call to\\n/// this contract, and uses the respective sponsor wallet to fulfill the\\n/// request. This allows the sponsor to cover the gas costs of the\\n/// fulfillments, as they know that funds they have deposited in the respective\\n/// sponsor wallet will only be used for use-cases they have sponsored.\\ncontract SponsorshipUtils is ISponsorshipUtils {\\n    /// @notice Sponsorship status for a sponsor\\u2013RRP requester pair\\n    mapping(address => mapping(address => bool))\\n        public\\n        override sponsorToRequesterToRrpSponsorshipStatus;\\n\\n    /// @notice Sponsorship status for a sponsor\\u2013PSP subscription pair\\n    mapping(address => mapping(bytes32 => bool))\\n        public\\n        override sponsorToSubscriptionIdToPspSponsorshipStatus;\\n\\n    /// @notice Called by the sponsor to set the sponsorship status of an RRP\\n    /// requester\\n    /// @dev This applies to both regular and relayed RRP requests\\n    /// @param requester RRP requester address\\n    /// @param status Sponsorship status\\n    function setRrpSponsorshipStatus(\\n        address requester,\\n        bool status\\n    ) external override {\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        sponsorToRequesterToRrpSponsorshipStatus[msg.sender][\\n            requester\\n        ] = status;\\n        emit SetRrpSponsorshipStatus(msg.sender, requester, status);\\n    }\\n\\n    /// @notice Called by the sponsor to set the sponsorship status of a PSP\\n    /// subscription\\n    /// @param subscriptionId Subscription ID\\n    /// @param status Sponsorship status\\n    function setPspSponsorshipStatus(\\n        bytes32 subscriptionId,\\n        bool status\\n    ) external override {\\n        require(subscriptionId != bytes32(0), \\\"Subscription ID zero\\\");\\n        sponsorToSubscriptionIdToPspSponsorshipStatus[msg.sender][\\n            subscriptionId\\n        ] = status;\\n        emit SetPspSponsorshipStatus(msg.sender, subscriptionId, status);\\n    }\\n}\\n\",\"keccak256\":\"0xbbbf638ee39670e569c733aa8101ad7b25eab1ae50d7c8a5a243922ae7fec87f\",\"license\":\"MIT\"},\"contracts/protocol/StorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IStorageUtils.sol\\\";\\n\\n/// @title Contract that can be used to announce template and subscription\\n/// details through events and/or store them on-chain\\n/// @notice The Airnode protocol does not depend on the template or\\n/// subscription details being announced or stored on-chain. Airnode can be\\n/// informed about these in other ways, e.g., the details are hardcoded in the\\n/// Airnode configuration file.\\n/// @dev Storing the details is preferable to merely announcing them to ensure\\n/// persistence. However, bare announcements are provided as an alternative\\n/// when storage is prohibitively expensive and using off-chain channels is not\\n/// an option.\\ncontract StorageUtils is IStorageUtils {\\n    struct Template {\\n        bytes32 endpointId;\\n        bytes parameters;\\n    }\\n\\n    struct Subscription {\\n        uint256 chainId;\\n        address airnode;\\n        bytes32 endpointOrTemplateId;\\n        bytes parameters;\\n        bytes conditions;\\n        address relayer;\\n        address sponsor;\\n        address requester;\\n        bytes4 fulfillFunctionId;\\n    }\\n\\n    /// @notice Maximum parameter length for byte strings that Airnodes will\\n    /// need to read from storage or logs\\n    /// @dev A very generous limit is applied, under the assumption that\\n    /// anything larger than this is a grief attempt. If the user needs to use\\n    /// longer parameters, they will need to use off-chain channels to pass\\n    /// the respective template/subscription details to the Airnode operator\\n    /// for them to be specified in the configuration file.\\n    uint256 public constant override MAXIMUM_PARAMETER_LENGTH = 4096;\\n\\n    /// @notice Template details with the ID\\n    mapping(bytes32 => Template) public override templates;\\n\\n    /// @notice Subscription details with the ID\\n    mapping(bytes32 => Subscription) public override subscriptions;\\n\\n    /// @notice Announces template details with an event\\n    /// @dev Templates fully or partially define requests. By referencing a\\n    /// template, requesters can omit specifying the \\\"boilerplate\\\" sections of\\n    /// requests.\\n    /// In a subscription context, a zero endpoint ID means the Airnode does\\n    /// not need to use one of its endpoints, and can move directly on to\\n    /// fulfillment. This is particularly useful for defining traditional\\n    /// keeper jobs that do not require off-chain data.\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param parameters Template parameters, encoded in Airnode ABI\\n    /// @return templateId Template ID\\n    function announceTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) public override returns (bytes32 templateId) {\\n        require(\\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\\n            \\\"Parameters too long\\\"\\n        );\\n        templateId = keccak256(abi.encodePacked(endpointId, parameters));\\n        emit AnnouncedTemplate(templateId, endpointId, parameters);\\n    }\\n\\n    /// @notice Stores template details\\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\\n    /// @param parameters Template parameters, encoded in Airnode ABI\\n    /// @return templateId Template ID\\n    function storeTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) external override returns (bytes32 templateId) {\\n        templateId = announceTemplate(endpointId, parameters);\\n        templates[templateId] = Template({\\n            endpointId: endpointId,\\n            parameters: parameters\\n        });\\n    }\\n\\n    /// @notice Announces subscription details\\n    /// @dev `airnode` should make the query specified by `templateId` and\\n    /// `parameters`. If the returned data satisfies `conditions`, it should\\n    /// call `requester`'s `fulfillFunctionId` on `chainId` with the returned\\n    /// data, using the wallet dedicated to `sponsor`.\\n    /// If `relayer` is not `airnode`, the relayer is responsible with checking\\n    /// `condition` and using the wallet dedicated to `sponsor` to deliver the\\n    /// data.\\n    /// In most cases, `conditions` will specify a static call to a function on\\n    /// `chainId` with the data. The extent of its flexibility depends on the\\n    /// node implementation and is outside the scope of the on-chain protocol.\\n    /// Similarly, `conditions` can specify with what frequency it should be\\n    /// verified, and the details of this is outside the scope.\\n    /// `templateId` being zero is similar to the endpoint ID being zero for\\n    /// templates, means the endpoint query can be skipped. In this case,\\n    /// `parameters` will be treated as the data that is returned by the\\n    /// endpoint while verifying `conditions`.\\n    /// @param chainId Chain ID\\n    /// @param airnode Airnode address\\n    /// @param endpointOrTemplateId Endpoint or template ID (allowed to be\\n    /// `bytes32(0)`)\\n    /// @param parameters Parameters provided by the subscription in addition\\n    /// to the parameters in the template (if applicable), encoded in Airnode\\n    /// ABI\\n    /// @param conditions Conditions under which the subscription is requested\\n    /// to be fulfilled, encoded in Airnode ABI\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param requester Requester address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @return subscriptionId Subscription ID\\n    function announceSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) public override returns (bytes32 subscriptionId) {\\n        require(chainId != 0, \\\"Chain ID zero\\\");\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(\\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\\n            \\\"Parameters too long\\\"\\n        );\\n        require(\\n            conditions.length <= MAXIMUM_PARAMETER_LENGTH,\\n            \\\"Conditions too long\\\"\\n        );\\n        require(relayer != address(0), \\\"Relayer address zero\\\");\\n        require(sponsor != address(0), \\\"Sponsor address zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        require(fulfillFunctionId != bytes4(0), \\\"Fulfill function ID zero\\\");\\n        subscriptionId = keccak256(\\n            abi.encode(\\n                chainId,\\n                airnode,\\n                endpointOrTemplateId,\\n                parameters,\\n                conditions,\\n                relayer,\\n                sponsor,\\n                requester,\\n                fulfillFunctionId\\n            )\\n        );\\n        emit AnnouncedSubscription(\\n            subscriptionId,\\n            chainId,\\n            airnode,\\n            endpointOrTemplateId,\\n            parameters,\\n            conditions,\\n            relayer,\\n            sponsor,\\n            requester,\\n            fulfillFunctionId\\n        );\\n    }\\n\\n    /// @notice Stores subscription details\\n    /// @param chainId Chain ID\\n    /// @param airnode Airnode address\\n    /// @param endpointOrTemplateId Endpoint or template ID (allowed to be\\n    /// `bytes32(0)`)\\n    /// @param parameters Parameters provided by the subscription in addition\\n    /// to the parameters in the template (if applicable), encoded in Airnode\\n    /// ABI\\n    /// @param conditions Conditions under which the subscription is requested\\n    /// to be fulfilled, encoded in Airnode ABI\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param requester Requester address\\n    /// @param fulfillFunctionId Selector of the function to be called for\\n    /// fulfillment\\n    /// @return subscriptionId Subscription ID\\n    function storeSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external override returns (bytes32 subscriptionId) {\\n        subscriptionId = announceSubscription(\\n            chainId,\\n            airnode,\\n            endpointOrTemplateId,\\n            parameters,\\n            conditions,\\n            relayer,\\n            sponsor,\\n            requester,\\n            fulfillFunctionId\\n        );\\n        subscriptions[subscriptionId] = Subscription({\\n            chainId: chainId,\\n            airnode: airnode,\\n            endpointOrTemplateId: endpointOrTemplateId,\\n            parameters: parameters,\\n            conditions: conditions,\\n            relayer: relayer,\\n            sponsor: sponsor,\\n            requester: requester,\\n            fulfillFunctionId: fulfillFunctionId\\n        });\\n    }\\n}\\n\",\"keccak256\":\"0xd10726d105f29c2f86b0a63232ba094d7cbf6e858437d86603d00770b3e86d3a\",\"license\":\"MIT\"},\"contracts/protocol/WithdrawalUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/IWithdrawalUtils.sol\\\";\\n\\n/// @title Contract that can be used by sponsors to request withdrawals from\\n/// sponsor wallets and Airnodes/relayers to fulfill these\\n/// @notice The respective Airnode/relayer may not support withdrawals for the\\n/// specified protocol, or at all. Similarly, an Airnode/relayer may deposit\\n/// funds directly to the sponsor address without being prompted, e.g., because\\n/// they are ceasing operations. In general, no guarantee is provided for the\\n/// funds deposited to sponsor wallets at the protocol level. Therefore, the\\n/// sponsors should limit their deposits to the minimum amount required for\\n/// their operations, and assume they will not receive these funds back.\\n/// @dev Withdrawals are implemented in the form of pull payments. The sponsor\\n/// requests a withdrawal from a sponsor wallet, and the Airnode/relayer uses\\n/// the specified sponsor wallet to deposit the entire balance at this\\n/// contract. Then, the sponsor claims/pulls the payment from this contract.\\n/// Different protocols (RRP, PSP, etc.) use different sponsor wallets for a\\n/// particular Airnode/relayer\\u2013sponsor pair, which is why sponsor wallet\\n/// derivation includes a protocol ID. Refer to the node documentation for what\\n/// these protocol IDs are.\\ncontract WithdrawalUtils is IWithdrawalUtils {\\n    using ECDSA for bytes32;\\n\\n    /// @notice Sponsor balance that is withdrawn but not claimed\\n    mapping(address => uint256) public override sponsorToBalance;\\n\\n    /// @notice Number of withdrawal requests the sponsor made\\n    mapping(address => uint256) public override sponsorToWithdrawalRequestCount;\\n\\n    mapping(bytes32 => bytes32) private withdrawalRequestIdToParameters;\\n\\n    /// @notice Called by a sponsor to request a withdrawal\\n    /// @param airnodeOrRelayer Airnode/relayer address\\n    /// @param protocolId Protocol ID\\n    function requestWithdrawal(\\n        address airnodeOrRelayer,\\n        uint256 protocolId\\n    ) external override {\\n        require(airnodeOrRelayer != address(0), \\\"Airnode/relayer address zero\\\");\\n        require(protocolId != 0, \\\"Protocol ID zero\\\");\\n        bytes32 withdrawalRequestId = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                address(this),\\n                msg.sender,\\n                ++sponsorToWithdrawalRequestCount[msg.sender]\\n            )\\n        );\\n        withdrawalRequestIdToParameters[withdrawalRequestId] = keccak256(\\n            abi.encodePacked(airnodeOrRelayer, protocolId, msg.sender)\\n        );\\n        emit RequestedWithdrawal(\\n            airnodeOrRelayer,\\n            msg.sender,\\n            withdrawalRequestId,\\n            protocolId\\n        );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\\n    /// fulfill the withdrawal request made by the sponsor\\n    /// @param withdrawalRequestId Withdrawal request ID\\n    /// @param airnodeOrRelayer Airnode/relayer address\\n    /// @param protocolId Protocol ID\\n    /// @param sponsor Sponsor address\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        address airnodeOrRelayer,\\n        uint256 protocolId,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata signature\\n    ) external payable override {\\n        require(\\n            withdrawalRequestIdToParameters[withdrawalRequestId] ==\\n                keccak256(\\n                    abi.encodePacked(airnodeOrRelayer, protocolId, sponsor)\\n                ),\\n            \\\"Invalid withdrawal fulfillment\\\"\\n        );\\n        unchecked {\\n            require(\\n                timestamp + 1 hours > block.timestamp &&\\n                    timestamp < block.timestamp + 15 minutes,\\n                \\\"Timestamp not valid\\\"\\n            );\\n        }\\n        require(\\n            (\\n                keccak256(\\n                    abi.encodePacked(withdrawalRequestId, timestamp, msg.sender)\\n                ).toEthSignedMessageHash()\\n            ).recover(signature) == airnodeOrRelayer,\\n            \\\"Signature mismatch\\\"\\n        );\\n        delete withdrawalRequestIdToParameters[withdrawalRequestId];\\n        sponsorToBalance[sponsor] += msg.value;\\n        emit FulfilledWithdrawal(\\n            airnodeOrRelayer,\\n            sponsor,\\n            withdrawalRequestId,\\n            protocolId,\\n            msg.sender,\\n            msg.value\\n        );\\n    }\\n\\n    /// @notice Called by the sponsor to claim the withdrawn funds\\n    /// @dev The sponsor must be able to receive funds. For example, if the\\n    /// sponsor is a contract without a default `payable` function, this will\\n    /// revert.\\n    function claimBalance() external override {\\n        uint256 sponsorBalance = sponsorToBalance[msg.sender];\\n        require(sponsorBalance != 0, \\\"Sender balance zero\\\");\\n        sponsorToBalance[msg.sender] = 0;\\n        emit ClaimedBalance(msg.sender, sponsorBalance);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = msg.sender.call{value: sponsorBalance}(\\\"\\\");\\n        require(success, \\\"Transfer failed\\\");\\n    }\\n\\n    /// @notice Returns if the withdrawal request with the ID is made but not\\n    /// fulfilled yet\\n    /// @param withdrawalRequestId Withdrawal request ID\\n    /// @return isAwaitingFulfillment If the withdrawal request is awaiting\\n    /// fulfillment\\n    function withdrawalRequestIsAwaitingFulfillment(\\n        bytes32 withdrawalRequestId\\n    ) external view override returns (bool) {\\n        return\\n            withdrawalRequestIdToParameters[withdrawalRequestId] != bytes32(0);\\n    }\\n}\\n\",\"keccak256\":\"0xf05fe0b950df9be82d3e0e182eb0353beea712b3cdc94c33312a36921fd45e5c\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAirnodeProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\nimport \\\"./IStorageUtils.sol\\\";\\nimport \\\"./ISponsorshipUtils.sol\\\";\\nimport \\\"./IWithdrawalUtils.sol\\\";\\n\\ninterface IAirnodeProtocol is\\n    IExtendedSelfMulticall,\\n    IStorageUtils,\\n    ISponsorshipUtils,\\n    IWithdrawalUtils\\n{\\n    event MadeRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    event MadeRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    function makeRequest(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function makeRequestRelayed(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function requestIsAwaitingFulfillment(\\n        bytes32 requestId\\n    ) external view returns (bool);\\n\\n    function requesterToRequestCount(\\n        address requester\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5484a3f9246b2d9f42986cd7f98713b4689466b8470c8538f905ae105e95f74\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ISponsorshipUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISponsorshipUtils {\\n    event SetRrpSponsorshipStatus(\\n        address indexed sponsor,\\n        address indexed requester,\\n        bool status\\n    );\\n\\n    event SetPspSponsorshipStatus(\\n        address indexed sponsor,\\n        bytes32 indexed subscriptionId,\\n        bool status\\n    );\\n\\n    function setRrpSponsorshipStatus(address requester, bool status) external;\\n\\n    function setPspSponsorshipStatus(\\n        bytes32 subscriptionId,\\n        bool status\\n    ) external;\\n\\n    function sponsorToRequesterToRrpSponsorshipStatus(\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool status);\\n\\n    function sponsorToSubscriptionIdToPspSponsorshipStatus(\\n        address sponsor,\\n        bytes32 subscriptionId\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xcaac32775e5d2534e159d174e3a77f6058420daa18e1167f048df60d45a927ad\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IStorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStorageUtils {\\n    event AnnouncedTemplate(\\n        bytes32 indexed templateId,\\n        bytes32 endpointId,\\n        bytes parameters\\n    );\\n\\n    event AnnouncedSubscription(\\n        bytes32 indexed subscriptionId,\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    function announceTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) external returns (bytes32 templateId);\\n\\n    function storeTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) external returns (bytes32 templateId);\\n\\n    function announceSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function storeSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 subscriptionId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MAXIMUM_PARAMETER_LENGTH() external view returns (uint256);\\n\\n    function templates(\\n        bytes32 templateId\\n    ) external view returns (bytes32 endpointId, bytes memory parameters);\\n\\n    function subscriptions(\\n        bytes32 subscriptionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address airnode,\\n            bytes32 endpointOrTemplateId,\\n            bytes memory parameters,\\n            bytes memory conditions,\\n            address relayer,\\n            address sponsor,\\n            address requester,\\n            bytes4 fulfillFunctionId\\n        );\\n}\\n\",\"keccak256\":\"0x711a0e9b00587a493e2503c65b2a65bb1cf23d9d7aa3bf42357c46d9f477687d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IWithdrawalUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWithdrawalUtils {\\n    event RequestedWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId\\n    );\\n\\n    event FulfilledWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId,\\n        address sponsorWallet,\\n        uint256 amount\\n    );\\n\\n    event ClaimedBalance(address indexed sponsor, uint256 amount);\\n\\n    function requestWithdrawal(\\n        address airnodeOrRelayer,\\n        uint256 protocolId\\n    ) external;\\n\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        address airnodeOrRelayer,\\n        uint256 protocolId,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    function claimBalance() external;\\n\\n    function withdrawalRequestIsAwaitingFulfillment(\\n        bytes32 withdrawalRequestId\\n    ) external view returns (bool);\\n\\n    function sponsorToBalance(address sponsor) external view returns (uint256);\\n\\n    function sponsorToWithdrawalRequestCount(\\n        address sponsor\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2356197ca1e0ccdbe53f56364438f56aa40a468d5dfc34c56c29c1d34b62b01\",\"license\":\"MIT\"},\"contracts/utils/ExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExtendedSelfMulticall.sol\\\";\\n\\n/// @title Contract that extends SelfMulticall to fetch some of the global\\n/// variables\\n/// @notice Available global variables are limited to the ones that Airnode\\n/// tends to need\\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view override returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(\\n        address account\\n    ) external view override returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view override returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view override returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0x27d9535d1a1a0f87a164f44a407a203b81242e4993b2caaf6b1e65ea8cac0563\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be\\n/// batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev Refer to OpenZeppelin's Multicall.sol for a similar implementation\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts if at\\n    /// least one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed4f03a82a22975c0922a7839be114bd5ccecb56aff3f6df8f3d2e4f7cbf808b\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4b205cf4fa62bd79b6035bacfe082a2939f91b234a99297f0d875e23ff09d521\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613887806100206000396000f3fe6080604052600436106101e35760003560e01c8063796b89b911610102578063affed85711610095578063eacd06e511610064578063eacd06e5146105f1578063eebecf6914610611578063f8b2cb4f14610631578063f8fa73a11461065957600080fd5b8063affed8571461057e578063c5a9550f1461059e578063da95ebf7146105be578063dfdeaef4146105de57600080fd5b80639d6a6bf1116100d15780639d6a6bf1146104f1578063a7e0c85e14610511578063abb67ca514610531578063ac9650d81461055157600080fd5b8063796b89b91461044e57806389ebd555146104615780638ae59e0e1461048157806394259c6c146104bc57600080fd5b806345ac480d1161017a5780634dcc19fe116101495780634dcc19fe146103bf57806350743bb9146103d25780636014a2b2146104015780636d6d2ca01461042e57600080fd5b806345ac480d1461033c57806346cf5beb146103525780634b1c1a47146103725780634b8985d91461039f57600080fd5b80633408e470116101b65780633408e470146102a357806336f0cd75146102c057806342cbb15c146102fb578063437b91161461030e57600080fd5b80630a631576146101e85780630c8eeead1461021f5780632bdf46e71461024d57806330509bca1461028c575b600080fd5b3480156101f457600080fd5b50610208610203366004612ba9565b610686565b604051610216929190612c12565b60405180910390f35b34801561022b57600080fd5b5061023f61023a366004612ca9565b61072b565b604051610216929190612d60565b34801561025957600080fd5b5061027c610268366004612ba9565b600090815260066020526040902054151590565b6040519015158152602001610216565b34801561029857600080fd5b506102a1610abc565b005b3480156102af57600080fd5b50465b604051908152602001610216565b3480156102cc57600080fd5b5061027c6102db366004612d7b565b600260209081526000928352604080842090915290825290205460ff1681565b34801561030757600080fd5b50436102b2565b34801561031a57600080fd5b5061032e610329366004612dae565b610c04565b604051610216929190612e75565b34801561034857600080fd5b506102b261100081565b34801561035e57600080fd5b506102b261036d366004612ece565b610d6a565b34801561037e57600080fd5b506102b261038d366004612fa8565b60046020526000908152604090205481565b3480156103ab57600080fd5b506102b26103ba366004612fca565b61109d565b3480156103cb57600080fd5b50486102b2565b3480156103de57600080fd5b5061027c6103ed366004612ba9565b600090815260086020526040902054151590565b34801561040d57600080fd5b506102b261041c366004612fa8565b60076020526000908152604090205481565b34801561043a57600080fd5b506102b2610449366004612ece565b611127565b34801561045a57600080fd5b50426102b2565b34801561046d57600080fd5b506102a161047c366004612ca9565b61132b565b34801561048d57600080fd5b5061027c61049c366004613016565b600360209081526000928352604080842090915290825290205460ff1681565b3480156104c857600080fd5b506104dc6104d7366004612ba9565b611506565b60405161021699989796959493929190613040565b3480156104fd57600080fd5b5061023f61050c3660046130bb565b61167e565b34801561051d57600080fd5b506102b261052c366004613184565b6119a8565b34801561053d57600080fd5b506102a161054c366004613224565b611cbb565b34801561055d57600080fd5b5061057161056c366004612dae565b611d7e565b604051610216919061324e565b34801561058a57600080fd5b506102b2610599366004612fca565b611eff565b3480156105aa57600080fd5b506102a16105b93660046130bb565b611fb9565b3480156105ca57600080fd5b506102a16105d9366004613016565b6121a4565b6102a16105ec366004613261565b612360565b3480156105fd57600080fd5b506102a161060c3660046132e3565b6125ba565b34801561061d57600080fd5b506102b261062c366004613306565b612661565b34801561063d57600080fd5b506102b261064c366004612fa8565b6001600160a01b03163190565b34801561066557600080fd5b506102b2610674366004612fa8565b60056020526000908152604090205481565b600060208190529081526040902080546001820180549192916106a890613384565b80601f01602080910402602001604051908101604052809291908181526020018280546106d490613384565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050905082565b60008981526008602090815260408083205490516001600160601b031960608d811b8216948301949094528b841b1660348201526001600160e01b03198a166048820152604c0160405160208183030381529060405280519060200120146107da5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064015b60405180910390fd5b896001600160a01b03166108c885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108c28e8b3360405160200161086293929190928352602083019190915260601b6001600160601b031916604082015260540190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90612912565b6001600160a01b0316146109135760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008b81526008602052604080822091909155516001600160a01b038a16908990610948908e908b908b908b906024016133e7565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161099b9190613407565b6000604051808303816000865af19150503d80600081146109d8576040519150601f19603f3d011682016040523d82523d6000602084013e6109dd565b606091505b5090925090508115610a34578a8a6001600160a01b03167fd1cc11d12363af4b6022e66d14b18ba1779ecd85a5b41891349d530fb6eee066898989604051610a2793929190613423565b60405180910390a3610aae565b8a8a6001600160a01b03167faee73eafb4f543f82048dfc7d8c9a4ee62506ffa76e0051b749d102c4ac7924c89604051610aa5918152604060208201819052601f908201527f46756c66696c6c6d656e74206661696c656420756e65787065637465646c7900606082015260800190565b60405180910390a35b995099975050505050505050565b3360009081526004602052604081205490819003610b1c5760405162461bcd60e51b815260206004820152601360248201527f53656e6465722062616c616e6365207a65726f0000000000000000000000000060448201526064016107d1565b3360008181526004602052604080822091909155517ffa58005128630bfb12e51c379d9bed40a8c3d7e8fdaec50028f79074fa41c7c390610b609084815260200190565b60405180910390a2604051600090339083908381818185875af1925050503d8060008114610baa576040519150601f19603f3d011682016040523d82523d6000602084013e610baf565b606091505b5050905080610c005760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d1565b5050565b606080828067ffffffffffffffff811115610c2157610c21613446565b604051908082528060200260200182016040528015610c4a578160200160208202803683370190505b5092508067ffffffffffffffff811115610c6657610c66613446565b604051908082528060200260200182016040528015610c9957816020015b6060815260200190600190039081610c845790505b50915060005b81811015610d615730868683818110610cba57610cba61345c565b9050602002810190610ccc9190613472565b604051610cda9291906134b9565b600060405180830381855af49150503d8060008114610d15576040519150601f19603f3d011682016040523d82523d6000602084013e610d1a565b606091505b50858381518110610d2d57610d2d61345c565b60200260200101858481518110610d4657610d4661345c565b60209081029190910101919091529015159052600101610c9f565b50509250929050565b60008b600003610dbc5760405162461bcd60e51b815260206004820152600d60248201527f436861696e204944207a65726f0000000000000000000000000000000000000060448201526064016107d1565b6001600160a01b038b16610e125760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b611000881115610e5a5760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b611000861115610eac5760405162461bcd60e51b815260206004820152601360248201527f436f6e646974696f6e7320746f6f206c6f6e670000000000000000000000000060448201526064016107d1565b6001600160a01b038516610f025760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038416610f585760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038316610fae5760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f0000000000000000000060448201526064016107d1565b6001600160e01b031982166110055760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b8b8b8b8b8b8b8b8b8b8b8b60405160200161102a9b9a999897969594939291906134c9565b604051602081830303815290604052805190602001209050807f8e5ca6452e6a69678a5522fd74839378557a772e3944eb6fe1acb6b44e7a998a8d8d8d8d8d8d8d8d8d8d8d6040516110869b9a999897969594939291906134c9565b60405180910390a29b9a5050505050505050505050565b60006110aa848484611eff565b9050604051806040016040528085815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050838152602081815260409091208351815590830151909150600182019061111c9082613597565b509050509392505050565b600061113c8c8c8c8c8c8c8c8c8c8c8c610d6a565b90506040518061012001604052808d81526020018c6001600160a01b031681526020018b81526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a908190840183828082843760009201829052509385525050506001600160a01b038881166020808501919091528882166040808601919091528883166060808701919091526001600160e01b031989166080909601959095528684526001808352938190208651815591860151938201805473ffffffffffffffffffffffffffffffffffffffff1916949093169390931790915590830151600282015590820151600382019061126f9082613597565b50608082015160048201906112849082613597565b5060a08201516005820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff199182161790915560c08401516006840180549184169190921617905560e080840151600790930180546101009095015190911c600160a01b027fffffffffffffffff00000000000000000000000000000000000000000000000090941692909116919091179190911790559b9a5050505050505050505050565b6000898152600860209081526040918290205491516001600160601b031960608c811b821693830193909352918a901b90911660348201526001600160e01b031988166048820152604c0160405160208183030381529060405280519060200120146113d95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b876001600160a01b031661145383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508e908b903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b03161461149e5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b600860008a81526020019081526020016000206000905588886001600160a01b03167faee73eafb4f543f82048dfc7d8c9a4ee62506ffa76e0051b749d102c4ac7924c8787876040516114f393929190613423565b60405180910390a3505050505050505050565b600160208190526000918252604090912080549181015460028201546003830180546001600160a01b0390931693919261153f90613384565b80601f016020809104026020016040519081016040528092919081815260200182805461156b90613384565b80156115b85780601f1061158d576101008083540402835291602001916115b8565b820191906000526020600020905b81548152906001019060200180831161159b57829003601f168201915b5050505050908060040180546115cd90613384565b80601f01602080910402602001604051908101604052809291908181526020018280546115f990613384565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050506005840154600685015460079095015493946001600160a01b039182169490821693509081169150600160a01b900460e01b89565b60008a81526008602090815260408083205490516001600160601b031960608e811b8216948301949094528c841b811660348301528b841b1660488201526001600160e01b03198a16605c820152820160405160208183030381529060405280519060200120146117315760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b8a6001600160a01b031661179f85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108c28f8b338c8c604051602001610862959493929190613657565b6001600160a01b0316146117ea5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008c81526008602052604080822091909155516001600160a01b038b1690899061181f908f908b908b908b906024016133e7565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199094169390931790925290516118729190613407565b6000604051808303816000865af19150503d80600081146118af576040519150601f19603f3d011682016040523d82523d6000602084013e6118b4565b606091505b5090925090508115611915578a6001600160a01b03168c8a6001600160a01b03167fbc2b56fbde291a214ed04ac9fd94c2e53c29b63d1cbdacedfe922d7523cf69eb8a8a8a60405161190893929190613423565b60405180910390a4611999565b8a6001600160a01b03168c8a6001600160a01b03167f5bfd527f98a7329226e18789dcd6caead784424ffb409bae4584f8e88ee398498a604051611990918152604060208201819052601f908201527f46756c66696c6c6d656e74206661696c656420756e65787065637465646c7900606082015260800190565b60405180910390a45b9a509a98505050505050505050565b60006001600160a01b038816611a005760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b86611a4d5760405162461bcd60e51b815260206004820152601c60248201527f456e64706f696e74206f722074656d706c617465204944207a65726f0000000060448201526064016107d1565b611000851115611a955760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b6001600160a01b038416611aeb5760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038316611b415760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160e01b03198216611b985760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b33600090815260076020526040812080548290611bb4906136a7565b9190508190559050463033838c8c8c8c8c8c8c604051602001611be19b9a999897969594939291906136c0565b60408051601f198184030181529082905280516020918201206001600160601b031960608d811b82169385019390935233831b8116603485015288831b1660488401526001600160e01b03198616605c84015293500160408051601f19818403018152828252805160209182012060008681526008909252919020556001600160a01b03808b169184918816907fb1fea87872f337aefbe87f34814e8769f6f84c265bf74098ac9122c4b6268cbc90611ca790339087908f908f908f908e908e90613742565b60405180910390a450979650505050505050565b6001600160a01b038216611d115760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f0000000000000000000060448201526064016107d1565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917ff2b2684e2948004382be1d231e64abcee2a088028b4a47e7a800ba9aa9dc966291015b60405180910390a35050565b6060818067ffffffffffffffff811115611d9a57611d9a613446565b604051908082528060200260200182016040528015611dcd57816020015b6060815260200190600190039081611db85790505b50915060005b81811015611ef757600030868684818110611df057611df061345c565b9050602002810190611e029190613472565b604051611e109291906134b9565b600060405180830381855af49150503d8060008114611e4b576040519150601f19603f3d011682016040523d82523d6000602084013e611e50565b606091505b50858481518110611e6357611e6361345c565b6020908102919091010152905080611eee576000848381518110611e8957611e8961345c565b60200260200101519050600081511115611ea65780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e67000000000060448201526064016107d1565b50600101611dd3565b505092915050565b6000611000821115611f495760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b838383604051602001611f5e93929190613796565b604051602081830303815290604052805190602001209050807f10955072107a0a9a4641354d06de81bbea8f311d4bc7dde1695f69bf9de27eb9858585604051611faa93929190613423565b60405180910390a29392505050565b60008a8152600860209081526040918290205491516001600160601b031960608d811b8216938301939093528b831b811660348301528a831b1660488201526001600160e01b03198916605c82015201604051602081830303815290604052805190602001201461206c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b866001600160a01b03166120e683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508f908b903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b0316146121315760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b600860008b815260200190815260200160002060009055886001600160a01b03168a886001600160a01b03167f5bfd527f98a7329226e18789dcd6caead784424ffb409bae4584f8e88ee3984988888860405161219093929190613423565b60405180910390a450505050505050505050565b6001600160a01b0382166121fa5760405162461bcd60e51b815260206004820152601c60248201527f4169726e6f64652f72656c617965722061646472657373207a65726f0000000060448201526064016107d1565b8060000361224a5760405162461bcd60e51b815260206004820152601060248201527f50726f746f636f6c204944207a65726f0000000000000000000000000000000060448201526064016107d1565b336000818152600560205260408120805491924692309290859061226d906136a7565b91829055506040805160208101959095526001600160601b0319606094851b8116918601919091529190921b166054830152606882015260880160408051601f198184030181529082905280516020918201206001600160601b0319606087811b821693850193909352603484018690523390921b9091166054830152915060680160408051601f1981840301815282825280516020918201206000858152600690925291902055819033906001600160a01b038616907fe97817ee3466ddc9745f4712aa283248845d739fae3db92899a018300c03119d906123539087815260200190565b60405180910390a4505050565b6040516001600160601b0319606088811b821660208401526034830188905286901b16605482015260680160408051601f19818403018152918152815160209283012060008a81526006909352912054146123fd5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207769746864726177616c2066756c66696c6c6d656e74000060448201526064016107d1565b4283610e10011180156124135750426103840183105b61245f5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c69640000000000000000000000000060448201526064016107d1565b856001600160a01b03166124d983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508c9089903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b0316146125245760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008781526006602090815260408083208390556001600160a01b038716835260049091528120805434929061255b9084906137b0565b9091555050604080518681523360208201523481830152905188916001600160a01b0387811692908a16917f9d4a5358c05c3610156fa7112e5ab33a373ee3d8aab7d6d0477d60eaf8c129f2919081900360600190a450505050505050565b816126075760405162461bcd60e51b815260206004820152601460248201527f537562736372697074696f6e204944207a65726f00000000000000000000000060448201526064016107d1565b336000818152600360209081526040808320868452825291829020805460ff191685151590811790915591519182528492917f8307a3c18068fc6f3ad98bcadc19671fb7855dbd3e44d42501c4cced3e732a7f9101611d72565b60006001600160a01b0387166126b95760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b856127065760405162461bcd60e51b815260206004820152601c60248201527f456e64706f696e74206f722074656d706c617465204944207a65726f0000000060448201526064016107d1565b61100084111561274e5760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b6001600160a01b0383166127a45760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160e01b031982166127fb5760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b33600090815260076020526040812080548290612817906136a7565b9190508190559050463033838b8b8b8b8b8b6040516020016128429a999897969594939291906137c3565b60408051601f198184030181529082905280516020918201206001600160601b031960608c811b8216938501939093523390921b90911660348301526001600160e01b0319851660488301529250604c0160408051601f198184030181528282528051602091820120600086815260089092529190205582906001600160a01b038a16907f6537a04eb75e255385ee16033b5cb61105ea1b3ab614f6455fcad6ee88a60173906128ff90339086908d908d908d908d908d90613742565b60405180910390a3509695505050505050565b60008060006129218585612938565b9150915061292e8161297d565b5090505b92915050565b600080825160410361296e5760208301516040840151606085015160001a61296287828585612ae5565b94509450505050612976565b506000905060025b9250929050565b60008160048111156129915761299161383b565b036129995750565b60018160048111156129ad576129ad61383b565b036129fa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d1565b6002816004811115612a0e57612a0e61383b565b03612a5b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d1565b6003816004811115612a6f57612a6f61383b565b03612ae25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016107d1565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b1c5750600090506003612ba0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b9957600060019250925050612ba0565b9150600090505b94509492505050565b600060208284031215612bbb57600080fd5b5035919050565b60005b83811015612bdd578181015183820152602001612bc5565b50506000910152565b60008151808452612bfe816020860160208601612bc2565b601f01601f19169290920160200192915050565b828152604060208201526000612c2b6040830184612be6565b949350505050565b80356001600160a01b0381168114612c4a57600080fd5b919050565b80356001600160e01b031981168114612c4a57600080fd5b60008083601f840112612c7957600080fd5b50813567ffffffffffffffff811115612c9157600080fd5b60208301915083602082850101111561297657600080fd5b600080600080600080600080600060e08a8c031215612cc757600080fd5b89359850612cd760208b01612c33565b9750612ce560408b01612c33565b9650612cf360608b01612c4f565b955060808a0135945060a08a013567ffffffffffffffff80821115612d1757600080fd5b612d238d838e01612c67565b909650945060c08c0135915080821115612d3c57600080fd5b50612d498c828d01612c67565b915080935050809150509295985092959850929598565b8215158152604060208201526000612c2b6040830184612be6565b60008060408385031215612d8e57600080fd5b612d9783612c33565b9150612da560208401612c33565b90509250929050565b60008060208385031215612dc157600080fd5b823567ffffffffffffffff80821115612dd957600080fd5b818501915085601f830112612ded57600080fd5b813581811115612dfc57600080fd5b8660208260051b8501011115612e1157600080fd5b60209290920196919550909350505050565b6000815180845260208085019450848260051b860182860160005b85811015612e68578383038952612e56838351612be6565b98850198925090840190600101612e3e565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612eb0578151151584529284019290840190600101612e92565b50505083810382850152612ec48186612e23565b9695505050505050565b60008060008060008060008060008060006101208c8e031215612ef057600080fd5b8b359a50612f0060208d01612c33565b995060408c0135985067ffffffffffffffff8060608e01351115612f2357600080fd5b612f338e60608f01358f01612c67565b909950975060808d0135811015612f4957600080fd5b50612f5a8d60808e01358e01612c67565b9096509450612f6b60a08d01612c33565b9350612f7960c08d01612c33565b9250612f8760e08d01612c33565b9150612f966101008d01612c4f565b90509295989b509295989b9093969950565b600060208284031215612fba57600080fd5b612fc382612c33565b9392505050565b600080600060408486031215612fdf57600080fd5b83359250602084013567ffffffffffffffff811115612ffd57600080fd5b61300986828701612c67565b9497909650939450505050565b6000806040838503121561302957600080fd5b61303283612c33565b946020939093013593505050565b60006101208b83526001600160a01b03808c1660208501528a60408501528160608501526130708285018b612be6565b91508382036080850152613084828a612be6565b97811660a085015295861660c084015250509190921660e08201526001600160e01b03199091166101009091015295945050505050565b6000806000806000806000806000806101008b8d0312156130db57600080fd5b8a3599506130eb60208c01612c33565b98506130f960408c01612c33565b975061310760608c01612c33565b965061311560808c01612c4f565b955060a08b0135945060c08b013567ffffffffffffffff8082111561313957600080fd5b6131458e838f01612c67565b909650945060e08d013591508082111561315e57600080fd5b5061316b8d828e01612c67565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060c0888a03121561319f57600080fd5b6131a888612c33565b965060208801359550604088013567ffffffffffffffff8111156131cb57600080fd5b6131d78a828b01612c67565b90965094506131ea905060608901612c33565b92506131f860808901612c33565b915061320660a08901612c4f565b905092959891949750929550565b80358015158114612c4a57600080fd5b6000806040838503121561323757600080fd5b61324083612c33565b9150612da560208401613214565b602081526000612fc36020830184612e23565b600080600080600080600060c0888a03121561327c57600080fd5b8735965061328c60208901612c33565b9550604088013594506132a160608901612c33565b93506080880135925060a088013567ffffffffffffffff8111156132c457600080fd5b6132d08a828b01612c67565b989b979a50959850939692959293505050565b600080604083850312156132f657600080fd5b82359150612da560208401613214565b60008060008060008060a0878903121561331f57600080fd5b61332887612c33565b955060208701359450604087013567ffffffffffffffff81111561334b57600080fd5b61335789828a01612c67565b909550935061336a905060608801612c33565b915061337860808801612c4f565b90509295509295509295565b600181811c9082168061339857607f821691505b6020821081036133b857634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b848152836020820152606060408201526000612ec46060830184866133be565b60008251613419818460208701612bc2565b9190910192915050565b83815260406020820152600061343d6040830184866133be565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261348957600080fd5b83018035915067ffffffffffffffff8211156134a457600080fd5b60200191503681900382131561297657600080fd5b8183823760009101908152919050565b60006101208d83526001600160a01b03808e1660208501528c60408501528160608501526134fa8285018c8e6133be565b9150838203608085015261350f828a8c6133be565b97811660a085015295861660c084015250509190921660e08201526001600160e01b031990911661010090910152979650505050505050565b601f82111561359257600081815260208120601f850160051c8101602086101561356f5750805b601f850160051c820191505b8181101561358e5782815560010161357b565b5050505b505050565b815167ffffffffffffffff8111156135b1576135b1613446565b6135c5816135bf8454613384565b84613548565b602080601f8311600181146135fa57600084156135e25750858301515b600019600386901b1c1916600185901b17855561358e565b600085815260208120601f198616915b828110156136295788860151825594840194600190910190840161360a565b50858210156136475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016136b9576136b9613691565b5060010190565b8b815260006bffffffffffffffffffffffff19808d60601b166020840152808c60601b1660348401528a6048840152808a60601b16606884015288607c8401528688609c850137606095861b811696909201609c810196909652509190921b1660b08301526001600160e01b03191660c482015260c801979650505050505050565b60006001600160a01b03808a16835288602084015287604084015260c0606084015261377260c0840187896133be565b94166080830152506001600160e01b03199190911660a09091015295945050505050565b838152818360208301376000910160200190815292915050565b8082018082111561293257612932613691565b8a815260006bffffffffffffffffffffffff19808c60601b166020840152808b60601b166034840152896048840152808960601b16606884015287607c8401528587609c85013760609490941b9093169301609c8101939093526001600160e01b03191660b08301525060b401979650505050505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212205f2b12b5e53b9e1c1619c3a39cd597c6041038af8107821f6ebb43a8e43baf2f64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106101e35760003560e01c8063796b89b911610102578063affed85711610095578063eacd06e511610064578063eacd06e5146105f1578063eebecf6914610611578063f8b2cb4f14610631578063f8fa73a11461065957600080fd5b8063affed8571461057e578063c5a9550f1461059e578063da95ebf7146105be578063dfdeaef4146105de57600080fd5b80639d6a6bf1116100d15780639d6a6bf1146104f1578063a7e0c85e14610511578063abb67ca514610531578063ac9650d81461055157600080fd5b8063796b89b91461044e57806389ebd555146104615780638ae59e0e1461048157806394259c6c146104bc57600080fd5b806345ac480d1161017a5780634dcc19fe116101495780634dcc19fe146103bf57806350743bb9146103d25780636014a2b2146104015780636d6d2ca01461042e57600080fd5b806345ac480d1461033c57806346cf5beb146103525780634b1c1a47146103725780634b8985d91461039f57600080fd5b80633408e470116101b65780633408e470146102a357806336f0cd75146102c057806342cbb15c146102fb578063437b91161461030e57600080fd5b80630a631576146101e85780630c8eeead1461021f5780632bdf46e71461024d57806330509bca1461028c575b600080fd5b3480156101f457600080fd5b50610208610203366004612ba9565b610686565b604051610216929190612c12565b60405180910390f35b34801561022b57600080fd5b5061023f61023a366004612ca9565b61072b565b604051610216929190612d60565b34801561025957600080fd5b5061027c610268366004612ba9565b600090815260066020526040902054151590565b6040519015158152602001610216565b34801561029857600080fd5b506102a1610abc565b005b3480156102af57600080fd5b50465b604051908152602001610216565b3480156102cc57600080fd5b5061027c6102db366004612d7b565b600260209081526000928352604080842090915290825290205460ff1681565b34801561030757600080fd5b50436102b2565b34801561031a57600080fd5b5061032e610329366004612dae565b610c04565b604051610216929190612e75565b34801561034857600080fd5b506102b261100081565b34801561035e57600080fd5b506102b261036d366004612ece565b610d6a565b34801561037e57600080fd5b506102b261038d366004612fa8565b60046020526000908152604090205481565b3480156103ab57600080fd5b506102b26103ba366004612fca565b61109d565b3480156103cb57600080fd5b50486102b2565b3480156103de57600080fd5b5061027c6103ed366004612ba9565b600090815260086020526040902054151590565b34801561040d57600080fd5b506102b261041c366004612fa8565b60076020526000908152604090205481565b34801561043a57600080fd5b506102b2610449366004612ece565b611127565b34801561045a57600080fd5b50426102b2565b34801561046d57600080fd5b506102a161047c366004612ca9565b61132b565b34801561048d57600080fd5b5061027c61049c366004613016565b600360209081526000928352604080842090915290825290205460ff1681565b3480156104c857600080fd5b506104dc6104d7366004612ba9565b611506565b60405161021699989796959493929190613040565b3480156104fd57600080fd5b5061023f61050c3660046130bb565b61167e565b34801561051d57600080fd5b506102b261052c366004613184565b6119a8565b34801561053d57600080fd5b506102a161054c366004613224565b611cbb565b34801561055d57600080fd5b5061057161056c366004612dae565b611d7e565b604051610216919061324e565b34801561058a57600080fd5b506102b2610599366004612fca565b611eff565b3480156105aa57600080fd5b506102a16105b93660046130bb565b611fb9565b3480156105ca57600080fd5b506102a16105d9366004613016565b6121a4565b6102a16105ec366004613261565b612360565b3480156105fd57600080fd5b506102a161060c3660046132e3565b6125ba565b34801561061d57600080fd5b506102b261062c366004613306565b612661565b34801561063d57600080fd5b506102b261064c366004612fa8565b6001600160a01b03163190565b34801561066557600080fd5b506102b2610674366004612fa8565b60056020526000908152604090205481565b600060208190529081526040902080546001820180549192916106a890613384565b80601f01602080910402602001604051908101604052809291908181526020018280546106d490613384565b80156107215780601f106106f657610100808354040283529160200191610721565b820191906000526020600020905b81548152906001019060200180831161070457829003601f168201915b5050505050905082565b60008981526008602090815260408083205490516001600160601b031960608d811b8216948301949094528b841b1660348201526001600160e01b03198a166048820152604c0160405160208183030381529060405280519060200120146107da5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064015b60405180910390fd5b896001600160a01b03166108c885858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108c28e8b3360405160200161086293929190928352602083019190915260601b6001600160601b031916604082015260540190565b60408051601f1981840301815282825280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000084830152603c8085019190915282518085039091018152605c909301909152815191012090565b90612912565b6001600160a01b0316146109135760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008b81526008602052604080822091909155516001600160a01b038a16908990610948908e908b908b908b906024016133e7565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161099b9190613407565b6000604051808303816000865af19150503d80600081146109d8576040519150601f19603f3d011682016040523d82523d6000602084013e6109dd565b606091505b5090925090508115610a34578a8a6001600160a01b03167fd1cc11d12363af4b6022e66d14b18ba1779ecd85a5b41891349d530fb6eee066898989604051610a2793929190613423565b60405180910390a3610aae565b8a8a6001600160a01b03167faee73eafb4f543f82048dfc7d8c9a4ee62506ffa76e0051b749d102c4ac7924c89604051610aa5918152604060208201819052601f908201527f46756c66696c6c6d656e74206661696c656420756e65787065637465646c7900606082015260800190565b60405180910390a35b995099975050505050505050565b3360009081526004602052604081205490819003610b1c5760405162461bcd60e51b815260206004820152601360248201527f53656e6465722062616c616e6365207a65726f0000000000000000000000000060448201526064016107d1565b3360008181526004602052604080822091909155517ffa58005128630bfb12e51c379d9bed40a8c3d7e8fdaec50028f79074fa41c7c390610b609084815260200190565b60405180910390a2604051600090339083908381818185875af1925050503d8060008114610baa576040519150601f19603f3d011682016040523d82523d6000602084013e610baf565b606091505b5050905080610c005760405162461bcd60e51b815260206004820152600f60248201527f5472616e73666572206661696c6564000000000000000000000000000000000060448201526064016107d1565b5050565b606080828067ffffffffffffffff811115610c2157610c21613446565b604051908082528060200260200182016040528015610c4a578160200160208202803683370190505b5092508067ffffffffffffffff811115610c6657610c66613446565b604051908082528060200260200182016040528015610c9957816020015b6060815260200190600190039081610c845790505b50915060005b81811015610d615730868683818110610cba57610cba61345c565b9050602002810190610ccc9190613472565b604051610cda9291906134b9565b600060405180830381855af49150503d8060008114610d15576040519150601f19603f3d011682016040523d82523d6000602084013e610d1a565b606091505b50858381518110610d2d57610d2d61345c565b60200260200101858481518110610d4657610d4661345c565b60209081029190910101919091529015159052600101610c9f565b50509250929050565b60008b600003610dbc5760405162461bcd60e51b815260206004820152600d60248201527f436861696e204944207a65726f0000000000000000000000000000000000000060448201526064016107d1565b6001600160a01b038b16610e125760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b611000881115610e5a5760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b611000861115610eac5760405162461bcd60e51b815260206004820152601360248201527f436f6e646974696f6e7320746f6f206c6f6e670000000000000000000000000060448201526064016107d1565b6001600160a01b038516610f025760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038416610f585760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038316610fae5760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f0000000000000000000060448201526064016107d1565b6001600160e01b031982166110055760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b8b8b8b8b8b8b8b8b8b8b8b60405160200161102a9b9a999897969594939291906134c9565b604051602081830303815290604052805190602001209050807f8e5ca6452e6a69678a5522fd74839378557a772e3944eb6fe1acb6b44e7a998a8d8d8d8d8d8d8d8d8d8d8d6040516110869b9a999897969594939291906134c9565b60405180910390a29b9a5050505050505050505050565b60006110aa848484611eff565b9050604051806040016040528085815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525050838152602081815260409091208351815590830151909150600182019061111c9082613597565b509050509392505050565b600061113c8c8c8c8c8c8c8c8c8c8c8c610d6a565b90506040518061012001604052808d81526020018c6001600160a01b031681526020018b81526020018a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f8b0181900481028201810190925289815291810191908a908a908190840183828082843760009201829052509385525050506001600160a01b038881166020808501919091528882166040808601919091528883166060808701919091526001600160e01b031989166080909601959095528684526001808352938190208651815591860151938201805473ffffffffffffffffffffffffffffffffffffffff1916949093169390931790915590830151600282015590820151600382019061126f9082613597565b50608082015160048201906112849082613597565b5060a08201516005820180546001600160a01b0392831673ffffffffffffffffffffffffffffffffffffffff199182161790915560c08401516006840180549184169190921617905560e080840151600790930180546101009095015190911c600160a01b027fffffffffffffffff00000000000000000000000000000000000000000000000090941692909116919091179190911790559b9a5050505050505050505050565b6000898152600860209081526040918290205491516001600160601b031960608c811b821693830193909352918a901b90911660348201526001600160e01b031988166048820152604c0160405160208183030381529060405280519060200120146113d95760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b876001600160a01b031661145383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508e908b903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b03161461149e5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b600860008a81526020019081526020016000206000905588886001600160a01b03167faee73eafb4f543f82048dfc7d8c9a4ee62506ffa76e0051b749d102c4ac7924c8787876040516114f393929190613423565b60405180910390a3505050505050505050565b600160208190526000918252604090912080549181015460028201546003830180546001600160a01b0390931693919261153f90613384565b80601f016020809104026020016040519081016040528092919081815260200182805461156b90613384565b80156115b85780601f1061158d576101008083540402835291602001916115b8565b820191906000526020600020905b81548152906001019060200180831161159b57829003601f168201915b5050505050908060040180546115cd90613384565b80601f01602080910402602001604051908101604052809291908181526020018280546115f990613384565b80156116465780601f1061161b57610100808354040283529160200191611646565b820191906000526020600020905b81548152906001019060200180831161162957829003601f168201915b5050506005840154600685015460079095015493946001600160a01b039182169490821693509081169150600160a01b900460e01b89565b60008a81526008602090815260408083205490516001600160601b031960608e811b8216948301949094528c841b811660348301528b841b1660488201526001600160e01b03198a16605c820152820160405160208183030381529060405280519060200120146117315760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b8a6001600160a01b031661179f85858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506108c28f8b338c8c604051602001610862959493929190613657565b6001600160a01b0316146117ea5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008c81526008602052604080822091909155516001600160a01b038b1690899061181f908f908b908b908b906024016133e7565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b03199094169390931790925290516118729190613407565b6000604051808303816000865af19150503d80600081146118af576040519150601f19603f3d011682016040523d82523d6000602084013e6118b4565b606091505b5090925090508115611915578a6001600160a01b03168c8a6001600160a01b03167fbc2b56fbde291a214ed04ac9fd94c2e53c29b63d1cbdacedfe922d7523cf69eb8a8a8a60405161190893929190613423565b60405180910390a4611999565b8a6001600160a01b03168c8a6001600160a01b03167f5bfd527f98a7329226e18789dcd6caead784424ffb409bae4584f8e88ee398498a604051611990918152604060208201819052601f908201527f46756c66696c6c6d656e74206661696c656420756e65787065637465646c7900606082015260800190565b60405180910390a45b9a509a98505050505050505050565b60006001600160a01b038816611a005760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b86611a4d5760405162461bcd60e51b815260206004820152601c60248201527f456e64706f696e74206f722074656d706c617465204944207a65726f0000000060448201526064016107d1565b611000851115611a955760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b6001600160a01b038416611aeb5760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160a01b038316611b415760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160e01b03198216611b985760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b33600090815260076020526040812080548290611bb4906136a7565b9190508190559050463033838c8c8c8c8c8c8c604051602001611be19b9a999897969594939291906136c0565b60408051601f198184030181529082905280516020918201206001600160601b031960608d811b82169385019390935233831b8116603485015288831b1660488401526001600160e01b03198616605c84015293500160408051601f19818403018152828252805160209182012060008681526008909252919020556001600160a01b03808b169184918816907fb1fea87872f337aefbe87f34814e8769f6f84c265bf74098ac9122c4b6268cbc90611ca790339087908f908f908f908e908e90613742565b60405180910390a450979650505050505050565b6001600160a01b038216611d115760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f0000000000000000000060448201526064016107d1565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917ff2b2684e2948004382be1d231e64abcee2a088028b4a47e7a800ba9aa9dc966291015b60405180910390a35050565b6060818067ffffffffffffffff811115611d9a57611d9a613446565b604051908082528060200260200182016040528015611dcd57816020015b6060815260200190600190039081611db85790505b50915060005b81811015611ef757600030868684818110611df057611df061345c565b9050602002810190611e029190613472565b604051611e109291906134b9565b600060405180830381855af49150503d8060008114611e4b576040519150601f19603f3d011682016040523d82523d6000602084013e611e50565b606091505b50858481518110611e6357611e6361345c565b6020908102919091010152905080611eee576000848381518110611e8957611e8961345c565b60200260200101519050600081511115611ea65780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e67000000000060448201526064016107d1565b50600101611dd3565b505092915050565b6000611000821115611f495760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b838383604051602001611f5e93929190613796565b604051602081830303815290604052805190602001209050807f10955072107a0a9a4641354d06de81bbea8f311d4bc7dde1695f69bf9de27eb9858585604051611faa93929190613423565b60405180910390a29392505050565b60008a8152600860209081526040918290205491516001600160601b031960608d811b8216938301939093528b831b811660348301528a831b1660488201526001600160e01b03198916605c82015201604051602081830303815290604052805190602001201461206c5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420726571756573742066756c66696c6c6d656e74000000000060448201526064016107d1565b866001600160a01b03166120e683838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508f908b903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b0316146121315760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b600860008b815260200190815260200160002060009055886001600160a01b03168a886001600160a01b03167f5bfd527f98a7329226e18789dcd6caead784424ffb409bae4584f8e88ee3984988888860405161219093929190613423565b60405180910390a450505050505050505050565b6001600160a01b0382166121fa5760405162461bcd60e51b815260206004820152601c60248201527f4169726e6f64652f72656c617965722061646472657373207a65726f0000000060448201526064016107d1565b8060000361224a5760405162461bcd60e51b815260206004820152601060248201527f50726f746f636f6c204944207a65726f0000000000000000000000000000000060448201526064016107d1565b336000818152600560205260408120805491924692309290859061226d906136a7565b91829055506040805160208101959095526001600160601b0319606094851b8116918601919091529190921b166054830152606882015260880160408051601f198184030181529082905280516020918201206001600160601b0319606087811b821693850193909352603484018690523390921b9091166054830152915060680160408051601f1981840301815282825280516020918201206000858152600690925291902055819033906001600160a01b038616907fe97817ee3466ddc9745f4712aa283248845d739fae3db92899a018300c03119d906123539087815260200190565b60405180910390a4505050565b6040516001600160601b0319606088811b821660208401526034830188905286901b16605482015260680160408051601f19818403018152918152815160209283012060008a81526006909352912054146123fd5760405162461bcd60e51b815260206004820152601e60248201527f496e76616c6964207769746864726177616c2066756c66696c6c6d656e74000060448201526064016107d1565b4283610e10011180156124135750426103840183105b61245f5760405162461bcd60e51b815260206004820152601360248201527f54696d657374616d70206e6f742076616c69640000000000000000000000000060448201526064016107d1565b856001600160a01b03166124d983838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250506040516108c2925061086291508c9089903390602001928352602083019190915260601b6001600160601b031916604082015260540190565b6001600160a01b0316146125245760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b60448201526064016107d1565b60008781526006602090815260408083208390556001600160a01b038716835260049091528120805434929061255b9084906137b0565b9091555050604080518681523360208201523481830152905188916001600160a01b0387811692908a16917f9d4a5358c05c3610156fa7112e5ab33a373ee3d8aab7d6d0477d60eaf8c129f2919081900360600190a450505050505050565b816126075760405162461bcd60e51b815260206004820152601460248201527f537562736372697074696f6e204944207a65726f00000000000000000000000060448201526064016107d1565b336000818152600360209081526040808320868452825291829020805460ff191685151590811790915591519182528492917f8307a3c18068fc6f3ad98bcadc19671fb7855dbd3e44d42501c4cced3e732a7f9101611d72565b60006001600160a01b0387166126b95760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f00000000000000000000000060448201526064016107d1565b856127065760405162461bcd60e51b815260206004820152601c60248201527f456e64706f696e74206f722074656d706c617465204944207a65726f0000000060448201526064016107d1565b61100084111561274e5760405162461bcd60e51b8152602060048201526013602482015272506172616d657465727320746f6f206c6f6e6760681b60448201526064016107d1565b6001600160a01b0383166127a45760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f00000000000000000000000060448201526064016107d1565b6001600160e01b031982166127fb5760405162461bcd60e51b815260206004820152601860248201527f46756c66696c6c2066756e6374696f6e204944207a65726f000000000000000060448201526064016107d1565b33600090815260076020526040812080548290612817906136a7565b9190508190559050463033838b8b8b8b8b8b6040516020016128429a999897969594939291906137c3565b60408051601f198184030181529082905280516020918201206001600160601b031960608c811b8216938501939093523390921b90911660348301526001600160e01b0319851660488301529250604c0160408051601f198184030181528282528051602091820120600086815260089092529190205582906001600160a01b038a16907f6537a04eb75e255385ee16033b5cb61105ea1b3ab614f6455fcad6ee88a60173906128ff90339086908d908d908d908d908d90613742565b60405180910390a3509695505050505050565b60008060006129218585612938565b9150915061292e8161297d565b5090505b92915050565b600080825160410361296e5760208301516040840151606085015160001a61296287828585612ae5565b94509450505050612976565b506000905060025b9250929050565b60008160048111156129915761299161383b565b036129995750565b60018160048111156129ad576129ad61383b565b036129fa5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016107d1565b6002816004811115612a0e57612a0e61383b565b03612a5b5760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016107d1565b6003816004811115612a6f57612a6f61383b565b03612ae25760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016107d1565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612b1c5750600090506003612ba0565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b70573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b9957600060019250925050612ba0565b9150600090505b94509492505050565b600060208284031215612bbb57600080fd5b5035919050565b60005b83811015612bdd578181015183820152602001612bc5565b50506000910152565b60008151808452612bfe816020860160208601612bc2565b601f01601f19169290920160200192915050565b828152604060208201526000612c2b6040830184612be6565b949350505050565b80356001600160a01b0381168114612c4a57600080fd5b919050565b80356001600160e01b031981168114612c4a57600080fd5b60008083601f840112612c7957600080fd5b50813567ffffffffffffffff811115612c9157600080fd5b60208301915083602082850101111561297657600080fd5b600080600080600080600080600060e08a8c031215612cc757600080fd5b89359850612cd760208b01612c33565b9750612ce560408b01612c33565b9650612cf360608b01612c4f565b955060808a0135945060a08a013567ffffffffffffffff80821115612d1757600080fd5b612d238d838e01612c67565b909650945060c08c0135915080821115612d3c57600080fd5b50612d498c828d01612c67565b915080935050809150509295985092959850929598565b8215158152604060208201526000612c2b6040830184612be6565b60008060408385031215612d8e57600080fd5b612d9783612c33565b9150612da560208401612c33565b90509250929050565b60008060208385031215612dc157600080fd5b823567ffffffffffffffff80821115612dd957600080fd5b818501915085601f830112612ded57600080fd5b813581811115612dfc57600080fd5b8660208260051b8501011115612e1157600080fd5b60209290920196919550909350505050565b6000815180845260208085019450848260051b860182860160005b85811015612e68578383038952612e56838351612be6565b98850198925090840190600101612e3e565b5090979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612eb0578151151584529284019290840190600101612e92565b50505083810382850152612ec48186612e23565b9695505050505050565b60008060008060008060008060008060006101208c8e031215612ef057600080fd5b8b359a50612f0060208d01612c33565b995060408c0135985067ffffffffffffffff8060608e01351115612f2357600080fd5b612f338e60608f01358f01612c67565b909950975060808d0135811015612f4957600080fd5b50612f5a8d60808e01358e01612c67565b9096509450612f6b60a08d01612c33565b9350612f7960c08d01612c33565b9250612f8760e08d01612c33565b9150612f966101008d01612c4f565b90509295989b509295989b9093969950565b600060208284031215612fba57600080fd5b612fc382612c33565b9392505050565b600080600060408486031215612fdf57600080fd5b83359250602084013567ffffffffffffffff811115612ffd57600080fd5b61300986828701612c67565b9497909650939450505050565b6000806040838503121561302957600080fd5b61303283612c33565b946020939093013593505050565b60006101208b83526001600160a01b03808c1660208501528a60408501528160608501526130708285018b612be6565b91508382036080850152613084828a612be6565b97811660a085015295861660c084015250509190921660e08201526001600160e01b03199091166101009091015295945050505050565b6000806000806000806000806000806101008b8d0312156130db57600080fd5b8a3599506130eb60208c01612c33565b98506130f960408c01612c33565b975061310760608c01612c33565b965061311560808c01612c4f565b955060a08b0135945060c08b013567ffffffffffffffff8082111561313957600080fd5b6131458e838f01612c67565b909650945060e08d013591508082111561315e57600080fd5b5061316b8d828e01612c67565b915080935050809150509295989b9194979a5092959850565b600080600080600080600060c0888a03121561319f57600080fd5b6131a888612c33565b965060208801359550604088013567ffffffffffffffff8111156131cb57600080fd5b6131d78a828b01612c67565b90965094506131ea905060608901612c33565b92506131f860808901612c33565b915061320660a08901612c4f565b905092959891949750929550565b80358015158114612c4a57600080fd5b6000806040838503121561323757600080fd5b61324083612c33565b9150612da560208401613214565b602081526000612fc36020830184612e23565b600080600080600080600060c0888a03121561327c57600080fd5b8735965061328c60208901612c33565b9550604088013594506132a160608901612c33565b93506080880135925060a088013567ffffffffffffffff8111156132c457600080fd5b6132d08a828b01612c67565b989b979a50959850939692959293505050565b600080604083850312156132f657600080fd5b82359150612da560208401613214565b60008060008060008060a0878903121561331f57600080fd5b61332887612c33565b955060208701359450604087013567ffffffffffffffff81111561334b57600080fd5b61335789828a01612c67565b909550935061336a905060608801612c33565b915061337860808801612c4f565b90509295509295509295565b600181811c9082168061339857607f821691505b6020821081036133b857634e487b7160e01b600052602260045260246000fd5b50919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b848152836020820152606060408201526000612ec46060830184866133be565b60008251613419818460208701612bc2565b9190910192915050565b83815260406020820152600061343d6040830184866133be565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261348957600080fd5b83018035915067ffffffffffffffff8211156134a457600080fd5b60200191503681900382131561297657600080fd5b8183823760009101908152919050565b60006101208d83526001600160a01b03808e1660208501528c60408501528160608501526134fa8285018c8e6133be565b9150838203608085015261350f828a8c6133be565b97811660a085015295861660c084015250509190921660e08201526001600160e01b031990911661010090910152979650505050505050565b601f82111561359257600081815260208120601f850160051c8101602086101561356f5750805b601f850160051c820191505b8181101561358e5782815560010161357b565b5050505b505050565b815167ffffffffffffffff8111156135b1576135b1613446565b6135c5816135bf8454613384565b84613548565b602080601f8311600181146135fa57600084156135e25750858301515b600019600386901b1c1916600185901b17855561358e565b600085815260208120601f198616915b828110156136295788860151825594840194600190910190840161360a565b50858210156136475787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016136b9576136b9613691565b5060010190565b8b815260006bffffffffffffffffffffffff19808d60601b166020840152808c60601b1660348401528a6048840152808a60601b16606884015288607c8401528688609c850137606095861b811696909201609c810196909652509190921b1660b08301526001600160e01b03191660c482015260c801979650505050505050565b60006001600160a01b03808a16835288602084015287604084015260c0606084015261377260c0840187896133be565b94166080830152506001600160e01b03199190911660a09091015295945050505050565b838152818360208301376000910160200190815292915050565b8082018082111561293257612932613691565b8a815260006bffffffffffffffffffffffff19808c60601b166020840152808b60601b166034840152896048840152808960601b16606884015287607c8401528587609c85013760609490941b9093169301609c8101939093526001600160e01b03191660b08301525060b401979650505050505050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212205f2b12b5e53b9e1c1619c3a39cd597c6041038af8107821f6ebb43a8e43baf2f64736f6c63430008110033",
  "devdoc": {
    "details": "StorageUtils, SponsorshipUtils and WithdrawalUtils also implement some auxiliary functionality for PSP",
    "kind": "dev",
    "methods": {
      "announceSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": {
        "details": "`airnode` should make the query specified by `templateId` and `parameters`. If the returned data satisfies `conditions`, it should call `requester`'s `fulfillFunctionId` on `chainId` with the returned data, using the wallet dedicated to `sponsor`. If `relayer` is not `airnode`, the relayer is responsible with checking `condition` and using the wallet dedicated to `sponsor` to deliver the data. In most cases, `conditions` will specify a static call to a function on `chainId` with the data. The extent of its flexibility depends on the node implementation and is outside the scope of the on-chain protocol. Similarly, `conditions` can specify with what frequency it should be verified, and the details of this is outside the scope. `templateId` being zero is similar to the endpoint ID being zero for templates, means the endpoint query can be skipped. In this case, `parameters` will be treated as the data that is returned by the endpoint while verifying `conditions`.",
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "conditions": "Conditions under which the subscription is requested to be fulfilled, encoded in Airnode ABI",
          "endpointOrTemplateId": "Endpoint or template ID (allowed to be `bytes32(0)`)",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "parameters": "Parameters provided by the subscription in addition to the parameters in the template (if applicable), encoded in Airnode ABI",
          "relayer": "Relayer address",
          "requester": "Requester address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "subscriptionId": "Subscription ID"
        }
      },
      "announceTemplate(bytes32,bytes)": {
        "details": "Templates fully or partially define requests. By referencing a template, requesters can omit specifying the \"boilerplate\" sections of requests. In a subscription context, a zero endpoint ID means the Airnode does not need to use one of its endpoints, and can move directly on to fulfillment. This is particularly useful for defining traditional keeper jobs that do not require off-chain data.",
        "params": {
          "endpointId": "Endpoint ID (allowed to be `bytes32(0)`)",
          "parameters": "Template parameters, encoded in Airnode ABI"
        },
        "returns": {
          "templateId": "Template ID"
        }
      },
      "claimBalance()": {
        "details": "The sponsor must be able to receive funds. For example, if the sponsor is a contract without a default `payable` function, this will revert."
      },
      "failRequest(bytes32,address,address,bytes4,uint256,string,bytes)": {
        "details": "The Airnode should fall back to this if a request cannot be fulfilled because of an error, including the static call to `fulfill()` returning `false` for `callSuccess`",
        "params": {
          "airnode": "Airnode address",
          "errorMessage": "A message that explains why the request has failed",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "requestId": "Request ID",
          "requester": "Requester address",
          "signature": "Request ID, a timestamp and the sponsor wallet address signed by the Airnode address",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "failRequestRelayed(bytes32,address,address,address,bytes4,uint256,string,bytes)": {
        "details": "Since failure may also include problems at the Airnode-end (such as it being unavailable), we are content with a signature from the relayer to validate failures. This is acceptable because explicit failures are mainly for easy debugging of issues, and the requester should always consider denial of service from a relayer or an Airnode to be a possibility.",
        "params": {
          "airnode": "Airnode address",
          "errorMessage": "A message that explains why the request has failed",
          "relayer": "Relayer address",
          "requestId": "Request ID",
          "requester": "Requester address",
          "signature": "Request ID, a timestamp and the sponsor wallet address signed by the relayer address",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "fulfillRequest(bytes32,address,address,bytes4,uint256,bytes,bytes)": {
        "details": "Airnodes attest to controlling their respective sponsor wallets by signing a message with the address of the sponsor wallet. A timestamp is added to this signature for it to act as an expiring token if the requester contract checks for freshness. This will not revert depending on the external call. However, it will return `false` if the external call reverts or if there is no function with a matching signature at `fulfillAddress`. On the other hand, it will return `true` if the external call returns successfully or if there is no contract deployed at `fulfillAddress`. If `callSuccess` is `false`, `callData` can be decoded to retrieve the revert string.",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data, encoded in contract ABI",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "requestId": "Request ID",
          "requester": "Requester address",
          "signature": "Request ID, a timestamp and the sponsor wallet address signed by the Airnode wallet",
          "timestamp": "Timestamp used in the signature"
        },
        "returns": {
          "callData": "Data returned by the fulfillment call (if there is any)",
          "callSuccess": "If the fulfillment call succeeded"
        }
      },
      "fulfillRequestRelayed(bytes32,address,address,address,bytes4,uint256,bytes,bytes)": {
        "details": "The Airnode must verify the integrity of the request details, template details, sponsor address–sponsor wallet address consistency before signing the response",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "relayer": "Relayer address",
          "requestId": "Request ID",
          "requester": "Requester address",
          "signature": "Request ID, a timestamp, the sponsor wallet address and the fulfillment data signed by the Airnode address",
          "timestamp": "Timestamp used in the signature"
        },
        "returns": {
          "callData": "Data returned by the fulfillment call (if there is any)",
          "callSuccess": "If the fulfillment call succeeded"
        }
      },
      "fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)": {
        "params": {
          "airnodeOrRelayer": "Airnode/relayer address",
          "protocolId": "Protocol ID",
          "sponsor": "Sponsor address",
          "withdrawalRequestId": "Withdrawal request ID"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "makeRequest(address,bytes32,bytes,address,bytes4)": {
        "details": "It is the responsibility of the respective Airnode to resolve if `endpointOrTemplateId` is an endpoint ID or a template ID",
        "params": {
          "endpointOrTemplateId": "Endpoint or template ID",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "parameters": "Parameters",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)": {
        "details": "The relayer address is indexed in the relayed protocol logs because it will be the relayer that will be listening to these logs",
        "params": {
          "endpointOrTemplateId": "Endpoint or template ID",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "parameters": "Parameters",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "requestIsAwaitingFulfillment(bytes32)": {
        "details": "If a requester has made a request, received a request ID but did not hear back, it can call this method to check if the Airnode/relayer called back `failRequest()`/`failRequestRelayed()` instead.",
        "params": {
          "requestId": "Request ID"
        },
        "returns": {
          "_0": "If the request is awaiting fulfillment"
        }
      },
      "requestWithdrawal(address,uint256)": {
        "params": {
          "airnodeOrRelayer": "Airnode/relayer address",
          "protocolId": "Protocol ID"
        }
      },
      "setPspSponsorshipStatus(bytes32,bool)": {
        "params": {
          "status": "Sponsorship status",
          "subscriptionId": "Subscription ID"
        }
      },
      "setRrpSponsorshipStatus(address,bool)": {
        "details": "This applies to both regular and relayed RRP requests",
        "params": {
          "requester": "RRP requester address",
          "status": "Sponsorship status"
        }
      },
      "storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "conditions": "Conditions under which the subscription is requested to be fulfilled, encoded in Airnode ABI",
          "endpointOrTemplateId": "Endpoint or template ID (allowed to be `bytes32(0)`)",
          "fulfillFunctionId": "Selector of the function to be called for fulfillment",
          "parameters": "Parameters provided by the subscription in addition to the parameters in the template (if applicable), encoded in Airnode ABI",
          "relayer": "Relayer address",
          "requester": "Requester address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "subscriptionId": "Subscription ID"
        }
      },
      "storeTemplate(bytes32,bytes)": {
        "params": {
          "endpointId": "Endpoint ID (allowed to be `bytes32(0)`)",
          "parameters": "Template parameters, encoded in Airnode ABI"
        },
        "returns": {
          "templateId": "Template ID"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      },
      "withdrawalRequestIsAwaitingFulfillment(bytes32)": {
        "params": {
          "withdrawalRequestId": "Withdrawal request ID"
        },
        "returns": {
          "_0": "isAwaitingFulfillment If the withdrawal request is awaiting fulfillment"
        }
      }
    },
    "title": "Airnode request–response protocol (RRP) and its relayed version",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_PARAMETER_LENGTH()": {
        "notice": "Maximum parameter length for byte strings that Airnodes will need to read from storage or logs"
      },
      "announceSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": {
        "notice": "Announces subscription details"
      },
      "announceTemplate(bytes32,bytes)": {
        "notice": "Announces template details with an event"
      },
      "claimBalance()": {
        "notice": "Called by the sponsor to claim the withdrawn funds"
      },
      "failRequest(bytes32,address,address,bytes4,uint256,string,bytes)": {
        "notice": "Called by the Airnode using the sponsor wallet if the request cannot be fulfilled"
      },
      "failRequestRelayed(bytes32,address,address,address,bytes4,uint256,string,bytes)": {
        "notice": "Called by the relayer using the sponsor wallet if the request cannot be fulfilled"
      },
      "fulfillRequest(bytes32,address,address,bytes4,uint256,bytes,bytes)": {
        "notice": "Called by the Airnode using the sponsor wallet to fulfill the request"
      },
      "fulfillRequestRelayed(bytes32,address,address,address,bytes4,uint256,bytes,bytes)": {
        "notice": "Called by the relayer using the sponsor wallet to fulfill the request with the Airnode-signed response"
      },
      "fulfillWithdrawal(bytes32,address,uint256,address,uint256,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet to fulfill the withdrawal request made by the sponsor"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "makeRequest(address,bytes32,bytes,address,bytes4)": {
        "notice": "Called by the requester to make a request"
      },
      "makeRequestRelayed(address,bytes32,bytes,address,address,bytes4)": {
        "notice": "Called by the requester to make a request to be fulfilled by a relayer"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts if at least one of the batched calls reverts"
      },
      "requestIsAwaitingFulfillment(bytes32)": {
        "notice": "Returns if the request with the ID is made but not fulfilled/failed yet"
      },
      "requestWithdrawal(address,uint256)": {
        "notice": "Called by a sponsor to request a withdrawal"
      },
      "requesterToRequestCount(address)": {
        "notice": "Number of requests the requester has made"
      },
      "setPspSponsorshipStatus(bytes32,bool)": {
        "notice": "Called by the sponsor to set the sponsorship status of a PSP subscription"
      },
      "setRrpSponsorshipStatus(address,bool)": {
        "notice": "Called by the sponsor to set the sponsorship status of an RRP requester"
      },
      "sponsorToBalance(address)": {
        "notice": "Sponsor balance that is withdrawn but not claimed"
      },
      "sponsorToRequesterToRrpSponsorshipStatus(address,address)": {
        "notice": "Sponsorship status for a sponsor–RRP requester pair"
      },
      "sponsorToSubscriptionIdToPspSponsorshipStatus(address,bytes32)": {
        "notice": "Sponsorship status for a sponsor–PSP subscription pair"
      },
      "sponsorToWithdrawalRequestCount(address)": {
        "notice": "Number of withdrawal requests the sponsor made"
      },
      "storeSubscription(uint256,address,bytes32,bytes,bytes,address,address,address,bytes4)": {
        "notice": "Stores subscription details"
      },
      "storeTemplate(bytes32,bytes)": {
        "notice": "Stores template details"
      },
      "subscriptions(bytes32)": {
        "notice": "Subscription details with the ID"
      },
      "templates(bytes32)": {
        "notice": "Template details with the ID"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      },
      "withdrawalRequestIsAwaitingFulfillment(bytes32)": {
        "notice": "Returns if the withdrawal request with the ID is made but not fulfilled yet"
      }
    },
    "notice": "Similar to HTTP, RRP allows the requester to specify a one-off request that the Airnode is expected to respond to as soon as possible. The relayed version allows the requester to specify an Airnode that will sign the fulfillment data and a relayer that will report the signed fulfillment.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10701,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "templates",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Template)10670_storage)"
      },
      {
        "astId": 10708,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "subscriptions",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Subscription)10689_storage)"
      },
      {
        "astId": 10578,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "sponsorToRequesterToRrpSponsorshipStatus",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 10586,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "sponsorToSubscriptionIdToPspSponsorshipStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_bool))"
      },
      {
        "astId": 10974,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "sponsorToBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10980,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "sponsorToWithdrawalRequestCount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10984,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "withdrawalRequestIdToParameters",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 9848,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "requesterToRequestCount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9852,
        "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
        "label": "requestIdToFulfillmentParameters",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Subscription)10689_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct StorageUtils.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)10689_storage"
      },
      "t_mapping(t_bytes32,t_struct(Template)10670_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct StorageUtils.Template)",
        "numberOfBytes": "32",
        "value": "t_struct(Template)10670_storage"
      },
      "t_struct(Subscription)10689_storage": {
        "encoding": "inplace",
        "label": "struct StorageUtils.Subscription",
        "members": [
          {
            "astId": 10672,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "chainId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 10674,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "airnode",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 10676,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "endpointOrTemplateId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 10678,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "parameters",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 10680,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "conditions",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          },
          {
            "astId": 10682,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "relayer",
            "offset": 0,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 10684,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "sponsor",
            "offset": 0,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 10686,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "requester",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 10688,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "fulfillFunctionId",
            "offset": 20,
            "slot": "7",
            "type": "t_bytes4"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(Template)10670_storage": {
        "encoding": "inplace",
        "label": "struct StorageUtils.Template",
        "members": [
          {
            "astId": 10667,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "endpointId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 10669,
            "contract": "contracts/protocol/AirnodeProtocol.sol:AirnodeProtocol",
            "label": "parameters",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
