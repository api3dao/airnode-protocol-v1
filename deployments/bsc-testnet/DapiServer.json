{
  "address": "0xd5A87c43b4b9792ee059161f618f72732AF15dE2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_airnodeProtocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "RegisteredBeaconUpdateSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "RequestedRelayedRrpBeaconUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        }
      ],
      "name": "RequestedRrpBeaconUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetDapiName",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "SetRrpBeaconUpdatePermissionStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithBeacons",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "dapiId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithDomainSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconSetWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithDomainSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithPsp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithRrp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedBeaconWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedOevProxyBeaconSetWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "beaconId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "UpdatedOevProxyBeaconWithSignedData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oevBeneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrew",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAPI_NAME_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "aggregateBeacons",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "airnodeProtocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditionParameters",
          "type": "bytes"
        }
      ],
      "name": "conditionPspBeaconSetUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "conditionParameters",
          "type": "bytes"
        }
      ],
      "name": "conditionPspBeaconUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameHashToDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dapiNameSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        }
      ],
      "name": "dapiNameToDataFeedId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "dataFeeds",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillPspBeaconSetUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "fulfillPspBeaconUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "fulfillRrpBeaconUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockBasefee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oevProxyToBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "oevProxyToIdToDataFeed",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiNameHash",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithDapiNameHash",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiNameHash",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithDapiNameHashAsOevProxy",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithId",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "readDataFeedWithIdAsOevProxy",
      "outputs": [
        {
          "internalType": "int224",
          "name": "value",
          "type": "int224"
        },
        {
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "conditions",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "registerBeaconUpdateSubscription",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "subscriptionId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRelayedRrpBeaconUpdateWithEndpoint",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRelayedRrpBeaconUpdateWithTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "endpointId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "parameters",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRrpBeaconUpdateWithEndpoint",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "templateId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        }
      ],
      "name": "requestRrpBeaconUpdateWithTemplate",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "dapiName",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "dataFeedId",
          "type": "bytes32"
        }
      ],
      "name": "setDapiName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rrpBeaconUpdateRequester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRrpBeaconUpdatePermissionStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "sponsorToRrpBeaconUpdateRequesterToPermissionStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "subscriptionIdToBeaconId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "beaconIds",
          "type": "bytes32[]"
        }
      ],
      "name": "updateBeaconSetWithBeacons",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "beaconSetId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "signedData",
          "type": "bytes[]"
        }
      ],
      "name": "updateDataFeedWithDomainSignedData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "signedData",
          "type": "bytes[]"
        }
      ],
      "name": "updateDataFeedWithSignedData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "updateId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "signatureCount",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signedData",
          "type": "bytes[]"
        }
      ],
      "name": "updateOevProxyDataFeedWithSignedData",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oevProxy",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9da31e0e753b40bdde2cc22bcf138a167b80f789eb8309ab440ffbe07e4a52b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 4,
    "gasUsed": "5065874",
    "logsBloom": "0x
    "blockHash": "0x05a41a8521634b3b7500682b4ffd3f9e0e5bdcf53c5213a163c7838e9e725ec9",
    "transactionHash": "0xc9da31e0e753b40bdde2cc22bcf138a167b80f789eb8309ab440ffbe07e4a52b",
    "logs": [],
    "blockNumber": 26427933,
    "cumulativeGasUsed": "5189133",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4dED41Dbf41037538309Db9e45899Cf6eE129519",
    "DapiServer admin",
    "0x8984152339F9D35742BB878D0eaD9EF9fd6469d3",
    "0x938d7f40CFB519ecD421762d6431FC7B767AD858"
  ],
  "numDeployments": 1,
  "solcInputHash": "6157b97e11daa900527785f71f13deac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_airnodeProtocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"RegisteredBeaconUpdateSubscription\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"RequestedRelayedRrpBeaconUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"}],\"name\":\"RequestedRrpBeaconUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetDapiName\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SetRrpBeaconUpdatePermissionStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithBeacons\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"dapiId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithDomainSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconSetWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithDomainSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithPsp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithRrp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedBeaconWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedOevProxyBeaconSetWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"beaconId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"UpdatedOevProxyBeaconWithSignedData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oevBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrew\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAPI_NAME_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"aggregateBeacons\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"airnodeProtocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditionParameters\",\"type\":\"bytes\"}],\"name\":\"conditionPspBeaconSetUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"conditionParameters\",\"type\":\"bytes\"}],\"name\":\"conditionPspBeaconUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dapiNameHashToDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dapiNameSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"}],\"name\":\"dapiNameToDataFeedId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"dataFeeds\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillPspBeaconSetUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"fulfillPspBeaconUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"fulfillRrpBeaconUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockBasefee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oevProxyToBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"oevProxyToIdToDataFeed\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiNameHash\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithDapiNameHash\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiNameHash\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithDapiNameHashAsOevProxy\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithId\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"readDataFeedWithIdAsOevProxy\",\"outputs\":[{\"internalType\":\"int224\",\"name\":\"value\",\"type\":\"int224\"},{\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"conditions\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"registerBeaconUpdateSubscription\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"subscriptionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRelayedRrpBeaconUpdateWithEndpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRelayedRrpBeaconUpdateWithTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"endpointId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"parameters\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRrpBeaconUpdateWithEndpoint\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"templateId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"requestRrpBeaconUpdateWithTemplate\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"dapiName\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"dataFeedId\",\"type\":\"bytes32\"}],\"name\":\"setDapiName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rrpBeaconUpdateRequester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRrpBeaconUpdatePermissionStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"sponsorToRrpBeaconUpdateRequesterToPermissionStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"subscriptionIdToBeaconId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"beaconIds\",\"type\":\"bytes32[]\"}],\"name\":\"updateBeaconSetWithBeacons\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"beaconSetId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signedData\",\"type\":\"bytes[]\"}],\"name\":\"updateDataFeedWithDomainSignedData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"signedData\",\"type\":\"bytes[]\"}],\"name\":\"updateDataFeedWithSignedData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"updateId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"signatureCount\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signedData\",\"type\":\"bytes[]\"}],\"name\":\"updateOevProxyDataFeedWithSignedData\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oevProxy\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"DapiServer is a PSP requester contract. Unlike RRP, which is implemented as a central contract, PSP implementation is built into the requester for optimization. Accordingly, the checks that are not required are omitted. Some examples: - While executing a PSP Beacon update, the condition is not verified because Beacon updates where the condition returns `false` (e.g., the on-chain value is already close to the actual value) are not harmful, and are even desirable (\\\"any update is a good update\\\"). - PSP Beacon set update subscription IDs are not verified, as the Airnode/relayer cannot be made to \\\"misreport a Beacon set update\\\" by spoofing a subscription ID. - While executing a PSP Beacon set update, even the signature is not checked because this is a purely keeper job that does not require off-chain data. Similar to Beacon updates, any Beacon set update is welcome.\",\"kind\":\"dev\",\"methods\":{\"aggregateBeacons(bytes32[])\":{\"details\":\"Tha aggregation of Beacons may have a different value than the respective Beacon set, e.g., because the Beacon set has been updated using signed data\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"timestamp\":\"Aggregation timestamp\",\"value\":\"Aggregation value\"}},\"conditionPspBeaconSetUpdate(bytes32,bytes,bytes)\":{\"details\":\"`endpointOrTemplateId` in the respective Subscription is expected to be zero, which means the `parameters` field of the Subscription will be forwarded to this function as `data`. This field should be the Beacon ID array encoded in contract ABI.\",\"params\":{\"conditionParameters\":\"Subscription condition parameters. This includes multiple ABI-encoded values, see `checkUpdateCondition()`.\",\"data\":\"Fulfillment data (array of Beacon IDs, i.e., `bytes32[]` encoded in contract ABI)\",\"subscriptionId\":\"Subscription ID\"},\"returns\":{\"_0\":\"If the Beacon set update subscription should be fulfilled\"}},\"conditionPspBeaconUpdate(bytes32,bytes,bytes)\":{\"details\":\"`conditionParameters` are specified within the `conditions` field of a Subscription\",\"params\":{\"conditionParameters\":\"Subscription condition parameters. This includes multiple ABI-encoded values, see `checkUpdateCondition()`.\",\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"subscriptionId\":\"Subscription ID\"},\"returns\":{\"_0\":\"If the Beacon update subscription should be fulfilled\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\",\"_airnodeProtocol\":\"AirnodeProtocol contract address\",\"_manager\":\"Manager address\"}},\"dapiNameToDataFeedId(bytes32)\":{\"params\":{\"dapiName\":\"dAPI name\"},\"returns\":{\"_0\":\"Data feed ID\"}},\"fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"details\":\"Similar to `conditionPspBeaconSetUpdate()`, if `endpointOrTemplateId` of the Subscription is zero, its `parameters` field will be forwarded to `data` here, which is expect to be contract ABI-encoded array of Beacon IDs. It does not make sense for this subscription to be relayed, as there is no external data being delivered. Nevertheless, this is allowed for the lack of a reason to prevent it. Even though the consistency of the arguments are not being checked, if a standard implementation of Airnode is being used, these can be expected to be correct. Either way, the assumption is that it does not matter for the purposes of a Beacon set update subscription.\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"relayer\":\"Relayer address\",\"signature\":\"Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet\",\"sponsor\":\"Sponsor address\",\"subscriptionId\":\"Subscription ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"details\":\"There is no need to verify that `conditionPspBeaconUpdate()` returns `true` because any Beacon update is a good Beacon update\",\"params\":{\"airnode\":\"Airnode address\",\"data\":\"Fulfillment data (a single `int256` encoded in contract ABI)\",\"relayer\":\"Relayer address\",\"signature\":\"Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet\",\"sponsor\":\"Sponsor address\",\"subscriptionId\":\"Subscription ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"fulfillRrpBeaconUpdate(bytes32,uint256,bytes)\":{\"params\":{\"data\":\"Fulfillment data (an `int256` encoded in contract ABI)\",\"requestId\":\"Request ID\",\"timestamp\":\"Timestamp used in the signature\"}},\"getBalance(address)\":{\"params\":{\"account\":\"Account address\"},\"returns\":{\"_0\":\"Account balance\"}},\"getBlockBasefee()\":{\"returns\":{\"_0\":\"Current block basefee\"}},\"getBlockNumber()\":{\"returns\":{\"_0\":\"Current block number\"}},\"getBlockTimestamp()\":{\"returns\":{\"_0\":\"Current block timestamp\"}},\"getChainId()\":{\"returns\":{\"_0\":\"Chain ID\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"readDataFeedWithDapiNameHash(bytes32)\":{\"params\":{\"dapiNameHash\":\"dAPI name hash\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithDapiNameHashAsOevProxy(bytes32)\":{\"params\":{\"dapiNameHash\":\"dAPI name hash\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithId(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"readDataFeedWithIdAsOevProxy(bytes32)\":{\"params\":{\"dataFeedId\":\"Data feed ID\"},\"returns\":{\"timestamp\":\"Data feed timestamp\",\"value\":\"Data feed value\"}},\"registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)\":{\"details\":\"Similar to how one needs to call `requestRrpBeaconUpdate()` for this contract to recognize the incoming RRP fulfillment, this needs to be called before the subscription fulfillments. In addition to the subscription being registered, the sponsor must use `setPspSponsorshipStatus()` to give permission for its sponsor wallet to be used for the specific subscription.\",\"params\":{\"airnode\":\"Airnode address\",\"conditions\":\"Conditions under which the subscription is requested to be fulfilled\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"subscriptionId\":\"Subscription ID\"}},\"requestRelayedRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"parameters\":\"Parameters\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestRelayedRrpBeaconUpdateWithTemplate(address,bytes32,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"relayer\":\"Relayer address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"endpointId\":\"Endpoint ID\",\"parameters\":\"Parameters\",\"sponsor\":\"Sponsor address\"},\"returns\":{\"requestId\":\"Request ID\"}},\"requestRrpBeaconUpdateWithTemplate(address,bytes32,address)\":{\"details\":\"In addition to the sponsor sponsoring this contract (by calling `setRrpSponsorshipStatus()`), the sponsor must also give update request permission to the sender (by calling `setRrpBeaconUpdatePermissionStatus()`) before this method is called. The template must specify a single point of data of type `int256` to be returned and for it to be small enough to be castable to `int224` because this is what `fulfillRrpBeaconUpdate()` expects.\",\"params\":{\"airnode\":\"Airnode address\",\"sponsor\":\"Sponsor address\",\"templateId\":\"Template ID\"},\"returns\":{\"requestId\":\"Request ID\"}},\"setDapiName(bytes32,bytes32)\":{\"details\":\"While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.\",\"params\":{\"dapiName\":\"Human-readable dAPI name\",\"dataFeedId\":\"Data feed ID the dAPI name will point to\"}},\"setRrpBeaconUpdatePermissionStatus(address,bool)\":{\"params\":{\"rrpBeaconUpdateRequester\":\"RRP-based Beacon update requester address\",\"status\":\"Permission status\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}},\"updateBeaconSetWithBeacons(bytes32[])\":{\"details\":\"As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.\",\"params\":{\"beaconIds\":\"Beacon IDs\"},\"returns\":{\"beaconSetId\":\"Beacon set ID\"}},\"updateDataFeedWithDomainSignedData(bytes[])\":{\"details\":\"This signed data here is specific to this contract, which is to be used when the signer does not want to provide the more general signature. EIP712 may feel relevant here, but we avoided it for the sake of consistency among signed data implementations and clarity.\",\"params\":{\"signedData\":\"Array of contract ABI-encoded Airnode address, template ID, timestamp and fulfillment data that is signed by the respective Airnode for this specific contract\"}},\"updateDataFeedWithSignedData(bytes[])\":{\"details\":\"The signed data here is intentionally very general for practical reasons. It is less demanding on the signer to have data signed once and use that everywhere.\",\"params\":{\"signedData\":\"Array of contract ABI-encoded Airnode address, template ID, timestamp and fulfillment data that is signed by the respective Airnode\"}},\"updateOevProxyDataFeedWithSignedData(address,bytes32,uint256,bytes[])\":{\"details\":\"Even though data for Beacons are signed individually, the caller is only allowed to use the signatures as a bundle. They cannot omit individual signatures or mix-and-match among bundles.\",\"params\":{\"oevProxy\":\"OEV proxy that reads the data feed\",\"signatureCount\":\"Number of signatures in `signedData`\",\"signedData\":\"Array of ABI-encoded Airnode address, template ID, timestamp, fulfillment data and bid metadata that is signed by the respective Airnode for the specific bid\",\"updateId\":\"Update ID\"}},\"withdraw(address)\":{\"details\":\"This does not require the caller to be the beneficiary because we expect that in most cases, the OEV beneficiary will be a contract that will not be able to make arbitrary calls. Our choice can be worked around by implementing a beneficiary proxy.\",\"params\":{\"oevProxy\":\"OEV proxy\"}}},\"stateVariables\":{\"HUNDRED_PERCENT\":{\"details\":\"10^8 (and not a larger number) is chosen to avoid overflows in `calculateUpdateInPercentage()`. Since the reported data needs to fit into 224 bits, its multiplication by 10^8 is guaranteed not to overflow.\"},\"oevProxyToIdToDataFeed\":{\"details\":\"This implies that an update as a result of an OEV auction only affects contracts that read through the respective proxy that the auction was being held for\"}},\"title\":\"Contract that serves Beacons, Beacon sets and dAPIs based on the Airnode protocol\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DAPI_NAME_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"dAPI name setter role description\"},\"HUNDRED_PERCENT()\":{\"notice\":\"Number that represents 100%\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"adminRole()\":{\"notice\":\"Admin role\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"aggregateBeacons(bytes32[])\":{\"notice\":\"Aggregates the Beacons and returns the result\"},\"airnodeProtocol()\":{\"notice\":\"AirnodeProtocol contract address\"},\"conditionPspBeaconSetUpdate(bytes32,bytes,bytes)\":{\"notice\":\"Returns if the respective Beacon set needs to be updated based on the condition parameters\"},\"conditionPspBeaconUpdate(bytes32,bytes,bytes)\":{\"notice\":\"Returns if the respective Beacon needs to be updated based on the fulfillment data and the condition parameters\"},\"dapiNameHashToDataFeedId(bytes32)\":{\"notice\":\"dAPI name hash mapped to the data feed ID\"},\"dapiNameSetterRole()\":{\"notice\":\"dAPI name setter role\"},\"dapiNameToDataFeedId(bytes32)\":{\"notice\":\"Returns the data feed ID the dAPI name is set to\"},\"dataFeeds(bytes32)\":{\"notice\":\"Data feed with ID\"},\"fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon set update subscription\"},\"fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon update subscription\"},\"fulfillRrpBeaconUpdate(bytes32,uint256,bytes)\":{\"notice\":\"Called by the Airnode/relayer using the sponsor wallet through AirnodeProtocol to fulfill the request\"},\"getBalance(address)\":{\"notice\":\"Returns the account balance\"},\"getBlockBasefee()\":{\"notice\":\"Returns the current block basefee\"},\"getBlockNumber()\":{\"notice\":\"Returns the current block number\"},\"getBlockTimestamp()\":{\"notice\":\"Returns the current block timestamp\"},\"getChainId()\":{\"notice\":\"Returns the chain ID\"},\"manager()\":{\"notice\":\"Address of the manager that manages the related AccessControlRegistry roles\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts if at least one of the batched calls reverts\"},\"oevProxyToBalance(address)\":{\"notice\":\"Accumulated OEV auction proceeds for the specific proxy\"},\"oevProxyToIdToDataFeed(address,bytes32)\":{\"notice\":\"Data feed with ID specific to the OEV proxy\"},\"readDataFeedWithDapiNameHash(bytes32)\":{\"notice\":\"Reads the data feed with dAPI name hash\"},\"readDataFeedWithDapiNameHashAsOevProxy(bytes32)\":{\"notice\":\"Reads the data feed as the OEV proxy with dAPI name hash\"},\"readDataFeedWithId(bytes32)\":{\"notice\":\"Reads the data feed with ID\"},\"readDataFeedWithIdAsOevProxy(bytes32)\":{\"notice\":\"Reads the data feed as the OEV proxy with ID\"},\"registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)\":{\"notice\":\"Registers the Beacon update subscription\"},\"requestRelayedRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address,address)\":{\"notice\":\"Creates an RRP request for the Beacon to be updated by the relayer\"},\"requestRelayedRrpBeaconUpdateWithTemplate(address,bytes32,address,address)\":{\"notice\":\"Creates an RRP request for the Beacon to be updated by the relayer\"},\"requestRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address)\":{\"notice\":\"Creates an RRP request for the Beacon to be updated\"},\"requestRrpBeaconUpdateWithTemplate(address,bytes32,address)\":{\"notice\":\"Creates an RRP request for the Beacon to be updated\"},\"setDapiName(bytes32,bytes32)\":{\"notice\":\"Sets the data feed ID the dAPI name points to\"},\"setRrpBeaconUpdatePermissionStatus(address,bool)\":{\"notice\":\"Called by the sponsor to set the update request permission status of an account\"},\"sponsorToRrpBeaconUpdateRequesterToPermissionStatus(address,address)\":{\"notice\":\"If a sponsor has permitted an account to request RRP-based updates at this contract\"},\"subscriptionIdToBeaconId(bytes32)\":{\"notice\":\"ID of the Beacon that the subscription is registered to update\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"},\"updateBeaconSetWithBeacons(bytes32[])\":{\"notice\":\"Updates the Beacon set using the current values of its Beacons\"},\"updateDataFeedWithDomainSignedData(bytes[])\":{\"notice\":\"Updates a data feed using data domain-signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the fulfillment data and signature is omitted will be read from storage.\"},\"updateDataFeedWithSignedData(bytes[])\":{\"notice\":\"Updates a data feed using data signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the fulfillment data and signature is omitted will be read from storage.\"},\"updateOevProxyDataFeedWithSignedData(address,bytes32,uint256,bytes[])\":{\"notice\":\"Updates a data feed that the OEV proxy reads using data signed by the respective Airnodes for the specific bid. The Beacons for which the fulfillment data and signature is omitted will be read from storage.\"},\"withdraw(address)\":{\"notice\":\"Withdraws the balance of the OEV proxy to the respective beneficiary account\"}},\"notice\":\"A Beacon is a live data feed addressed by an ID, which is derived from an Airnode address and a template ID. This is suitable where the more recent data point is always more favorable, e.g., in the context of an asset price data feed. Beacons can also be seen as one-Airnode data feeds that can be used individually or combined to build Beacon sets. dAPIs are an abstraction layer over Beacons and Beacon sets. In addition, this contract allows winners of OEV auctions to pay their bids to update the specific data feed.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/dapis/DapiServer.sol\":\"DapiServer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/SelfMulticall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    SelfMulticall,\\n    RoleDeriver,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        accessControlRegistry = _accessControlRegistry;\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(\\n        address manager\\n    ) internal view returns (bytes32 adminRole) {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x813755d99a9d8dd6298720da68fb5a6dd69329ea2dec91da1d09f715d4543c15\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\\\";\\n\\n/// @title Contract to be inherited by contracts with manager whose adminship\\n/// functionality will be implemented using AccessControlRegistry\\n/// @notice The manager address here is expected to belong to an\\n/// AccessControlRegistry user that is a multisig/DAO\\ncontract AccessControlRegistryAdminnedWithManager is\\n    AccessControlRegistryAdminned,\\n    IAccessControlRegistryAdminnedWithManager\\n{\\n    /// @notice Address of the manager that manages the related\\n    /// AccessControlRegistry roles\\n    /// @dev The mutability of the manager role can be implemented by\\n    /// designating an OwnableCallForwarder contract as the manager. The\\n    /// ownership of this contract can then be transferred, effectively\\n    /// transferring managership.\\n    address public immutable override manager;\\n\\n    /// @notice Admin role\\n    /// @dev Since `manager` is immutable, so is `adminRole`\\n    bytes32 public immutable override adminRole;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager\\n    )\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {\\n        require(_manager != address(0), \\\"Manager address zero\\\");\\n        manager = _manager;\\n        adminRole = _deriveAdminRole(_manager);\\n    }\\n}\\n\",\"keccak256\":\"0xbe5df884327dd7d4e236c105b6ef52cc6db20b452f4cdbe6c50fa506ed66cace\",\"license\":\"MIT\"},\"contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(\\n        address manager\\n    ) internal pure returns (bytes32 rootRole) {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        string memory description\\n    ) internal pure returns (bytes32 role) {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        bytes32 descriptionHash\\n    ) internal pure returns (bytes32 role) {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x488adb3cb7031415d4a195230753a0ac8f9f610e6db7a571529a350e29c97ed6\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"../../utils/interfaces/IExpiringMetaTxForwarder.sol\\\";\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistry is\\n    IAccessControl,\\n    IExpiringMetaTxForwarder,\\n    ISelfMulticall\\n{\\n    event InitializedManager(\\n        bytes32 indexed rootRole,\\n        address indexed manager,\\n        address sender\\n    );\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0xfe3f55a43a4456091ab90f4c17d4feda383587a5bbd3b7313295d87d878d843b\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IAccessControlRegistryAdminnedWithManager is\\n    IAccessControlRegistryAdminned\\n{\\n    function manager() external view returns (address);\\n\\n    function adminRole() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x8a8e1756fca81175305755b7a311536132e88173f60b2ac0fdeef92a6236afc5\",\"license\":\"MIT\"},\"contracts/dapis/DapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\\\";\\nimport \\\"../utils/ExtendedSelfMulticall.sol\\\";\\nimport \\\"../protocol/AirnodeRequester.sol\\\";\\nimport \\\"./Median.sol\\\";\\nimport \\\"./interfaces/IDapiServer.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./proxies/interfaces/IOevProxy.sol\\\";\\n\\n/// @title Contract that serves Beacons, Beacon sets and dAPIs based on the\\n/// Airnode protocol\\n/// @notice A Beacon is a live data feed addressed by an ID, which is derived\\n/// from an Airnode address and a template ID. This is suitable where the more\\n/// recent data point is always more favorable, e.g., in the context of an\\n/// asset price data feed. Beacons can also be seen as one-Airnode data feeds\\n/// that can be used individually or combined to build Beacon sets. dAPIs are\\n/// an abstraction layer over Beacons and Beacon sets.\\n/// In addition, this contract allows winners of OEV auctions to pay their bids\\n/// to update the specific data feed.\\n/// @dev DapiServer is a PSP requester contract. Unlike RRP, which is\\n/// implemented as a central contract, PSP implementation is built into the\\n/// requester for optimization. Accordingly, the checks that are not required\\n/// are omitted. Some examples:\\n/// - While executing a PSP Beacon update, the condition is not verified\\n/// because Beacon updates where the condition returns `false` (e.g., the\\n/// on-chain value is already close to the actual value) are not harmful, and\\n/// are even desirable (\\\"any update is a good update\\\").\\n/// - PSP Beacon set update subscription IDs are not verified, as the\\n/// Airnode/relayer cannot be made to \\\"misreport a Beacon set update\\\" by\\n/// spoofing a subscription ID.\\n/// - While executing a PSP Beacon set update, even the signature is not\\n/// checked because this is a purely keeper job that does not require off-chain\\n/// data. Similar to Beacon updates, any Beacon set update is welcome.\\ncontract DapiServer is\\n    AccessControlRegistryAdminnedWithManager,\\n    ExtendedSelfMulticall,\\n    AirnodeRequester,\\n    Median,\\n    IDapiServer\\n{\\n    using ECDSA for bytes32;\\n\\n    // Airnodes serve their fulfillment data along with timestamps. This\\n    // contract casts the reported data to `int224` and the timestamp to\\n    // `uint32`, which works until year 2106.\\n    struct DataFeed {\\n        int224 value;\\n        uint32 timestamp;\\n    }\\n\\n    /// @notice dAPI name setter role description\\n    string public constant override DAPI_NAME_SETTER_ROLE_DESCRIPTION =\\n        \\\"dAPI name setter\\\";\\n\\n    /// @notice Number that represents 100%\\n    /// @dev 10^8 (and not a larger number) is chosen to avoid overflows in\\n    /// `calculateUpdateInPercentage()`. Since the reported data needs to fit\\n    /// into 224 bits, its multiplication by 10^8 is guaranteed not to\\n    /// overflow.\\n    uint256 public constant override HUNDRED_PERCENT = 1e8;\\n\\n    /// @notice dAPI name setter role\\n    bytes32 public immutable override dapiNameSetterRole;\\n\\n    /// @notice If a sponsor has permitted an account to request RRP-based\\n    /// updates at this contract\\n    mapping(address => mapping(address => bool))\\n        public\\n        override sponsorToRrpBeaconUpdateRequesterToPermissionStatus;\\n\\n    /// @notice ID of the Beacon that the subscription is registered to update\\n    mapping(bytes32 => bytes32) public override subscriptionIdToBeaconId;\\n\\n    /// @notice Data feed with ID\\n    mapping(bytes32 => DataFeed) public override dataFeeds;\\n\\n    /// @notice Data feed with ID specific to the OEV proxy\\n    /// @dev This implies that an update as a result of an OEV auction only\\n    /// affects contracts that read through the respective proxy that the\\n    /// auction was being held for\\n    mapping(address => mapping(bytes32 => DataFeed))\\n        public\\n        override oevProxyToIdToDataFeed;\\n\\n    /// @notice dAPI name hash mapped to the data feed ID\\n    mapping(bytes32 => bytes32) public override dapiNameHashToDataFeedId;\\n\\n    /// @notice Accumulated OEV auction proceeds for the specific proxy\\n    mapping(address => uint256) public override oevProxyToBalance;\\n\\n    mapping(bytes32 => bytes32) private requestIdToBeaconId;\\n\\n    mapping(bytes32 => bytes32) private subscriptionIdToHash;\\n\\n    /// @dev Reverts if the sender is not permitted to request an RRP-based\\n    /// update with the sponsor and is not the sponsor\\n    /// @param sponsor Sponsor address\\n    modifier onlyPermittedUpdateRequester(address sponsor) {\\n        require(\\n            sponsor == msg.sender ||\\n                sponsorToRrpBeaconUpdateRequesterToPermissionStatus[sponsor][\\n                    msg.sender\\n                ],\\n            \\\"Sender not permitted\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    /// @param _manager Manager address\\n    /// @param _airnodeProtocol AirnodeProtocol contract address\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription,\\n        address _manager,\\n        address _airnodeProtocol\\n    )\\n        AccessControlRegistryAdminnedWithManager(\\n            _accessControlRegistry,\\n            _adminRoleDescription,\\n            _manager\\n        )\\n        AirnodeRequester(_airnodeProtocol)\\n    {\\n        dapiNameSetterRole = _deriveRole(\\n            _deriveAdminRole(manager),\\n            DAPI_NAME_SETTER_ROLE_DESCRIPTION\\n        );\\n    }\\n\\n    ///                     ~~~RRP Beacon updates~~~\\n\\n    /// @notice Called by the sponsor to set the update request permission\\n    /// status of an account\\n    /// @param rrpBeaconUpdateRequester RRP-based Beacon update requester\\n    /// address\\n    /// @param status Permission status\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external override {\\n        require(\\n            rrpBeaconUpdateRequester != address(0),\\n            \\\"Update requester zero\\\"\\n        );\\n        sponsorToRrpBeaconUpdateRequesterToPermissionStatus[msg.sender][\\n            rrpBeaconUpdateRequester\\n        ] = status;\\n        emit SetRrpBeaconUpdatePermissionStatus(\\n            msg.sender,\\n            rrpBeaconUpdateRequester,\\n            status\\n        );\\n    }\\n\\n    /// @notice Creates an RRP request for the Beacon to be updated\\n    /// @dev In addition to the sponsor sponsoring this contract (by calling\\n    /// `setRrpSponsorshipStatus()`), the sponsor must also give update request\\n    /// permission to the sender (by calling\\n    /// `setRrpBeaconUpdatePermissionStatus()`) before this method is called.\\n    /// The template must specify a single point of data of type `int256` to be\\n    /// returned and for it to be small enough to be castable to `int224`\\n    /// because this is what `fulfillRrpBeaconUpdate()` expects.\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRrpBeaconUpdateWithTemplate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\\n            airnode,\\n            templateId,\\n            \\\"\\\",\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRrpBeaconUpdate(\\n            beaconId,\\n            airnode,\\n            templateId,\\n            sponsor,\\n            requestId,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Creates an RRP request for the Beacon to be updated\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param parameters Parameters\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRrpBeaconUpdateWithEndpoint(\\n        address airnode,\\n        bytes32 endpointId,\\n        bytes calldata parameters,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 templateId = keccak256(\\n            abi.encodePacked(endpointId, parameters)\\n        );\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\\n            airnode,\\n            endpointId,\\n            parameters,\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRrpBeaconUpdate(\\n            beaconId,\\n            airnode,\\n            templateId,\\n            sponsor,\\n            requestId,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Creates an RRP request for the Beacon to be updated by the relayer\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRelayedRrpBeaconUpdateWithTemplate(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\\n            airnode,\\n            templateId,\\n            \\\"\\\",\\n            relayer,\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRelayedRrpBeaconUpdate(\\n            beaconId,\\n            airnode,\\n            templateId,\\n            relayer,\\n            sponsor,\\n            requestId,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Creates an RRP request for the Beacon to be updated by the relayer\\n    /// @param airnode Airnode address\\n    /// @param endpointId Endpoint ID\\n    /// @param parameters Parameters\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @return requestId Request ID\\n    function requestRelayedRrpBeaconUpdateWithEndpoint(\\n        address airnode,\\n        bytes32 endpointId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor\\n    )\\n        external\\n        override\\n        onlyPermittedUpdateRequester(sponsor)\\n        returns (bytes32 requestId)\\n    {\\n        bytes32 templateId = keccak256(\\n            abi.encodePacked(endpointId, parameters)\\n        );\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\\n            airnode,\\n            endpointId,\\n            parameters,\\n            relayer,\\n            sponsor,\\n            this.fulfillRrpBeaconUpdate.selector\\n        );\\n        requestIdToBeaconId[requestId] = beaconId;\\n        emit RequestedRelayedRrpBeaconUpdate(\\n            beaconId,\\n            airnode,\\n            templateId,\\n            relayer,\\n            sponsor,\\n            requestId,\\n            msg.sender\\n        );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet through\\n    /// AirnodeProtocol to fulfill the request\\n    /// @param requestId Request ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external override onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\\n        bytes32 beaconId = requestIdToBeaconId[requestId];\\n        delete requestIdToBeaconId[requestId];\\n        int224 decodedData = processBeaconUpdate(beaconId, timestamp, data);\\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\\n        // means it will be small enough to be typecast into `uint32`\\n        emit UpdatedBeaconWithRrp(\\n            beaconId,\\n            requestId,\\n            decodedData,\\n            uint32(timestamp)\\n        );\\n    }\\n\\n    ///                     ~~~PSP Beacon updates~~~\\n\\n    /// @notice Registers the Beacon update subscription\\n    /// @dev Similar to how one needs to call `requestRrpBeaconUpdate()` for\\n    /// this contract to recognize the incoming RRP fulfillment, this needs to\\n    /// be called before the subscription fulfillments.\\n    /// In addition to the subscription being registered, the sponsor must use\\n    /// `setPspSponsorshipStatus()` to give permission for its sponsor wallet\\n    /// to be used for the specific subscription.\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @param conditions Conditions under which the subscription is requested\\n    /// to be fulfilled\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @return subscriptionId Subscription ID\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor\\n    ) external override returns (bytes32 subscriptionId) {\\n        require(relayer != address(0), \\\"Relayer address zero\\\");\\n        require(sponsor != address(0), \\\"Sponsor address zero\\\");\\n        subscriptionId = keccak256(\\n            abi.encode(\\n                block.chainid,\\n                airnode,\\n                templateId,\\n                \\\"\\\",\\n                conditions,\\n                relayer,\\n                sponsor,\\n                address(this),\\n                this.fulfillPspBeaconUpdate.selector\\n            )\\n        );\\n        require(\\n            subscriptionIdToHash[subscriptionId] == bytes32(0),\\n            \\\"Subscription already registered\\\"\\n        );\\n        subscriptionIdToHash[subscriptionId] = keccak256(\\n            abi.encodePacked(airnode, relayer, sponsor)\\n        );\\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\\n        subscriptionIdToBeaconId[subscriptionId] = beaconId;\\n        emit RegisteredBeaconUpdateSubscription(\\n            beaconId,\\n            subscriptionId,\\n            airnode,\\n            templateId,\\n            conditions,\\n            relayer,\\n            sponsor\\n        );\\n    }\\n\\n    /// @notice Returns if the respective Beacon needs to be updated based on\\n    /// the fulfillment data and the condition parameters\\n    /// @dev `conditionParameters` are specified within the `conditions` field\\n    /// of a Subscription\\n    /// @param subscriptionId Subscription ID\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @param conditionParameters Subscription condition parameters. This\\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\\n    /// @return If the Beacon update subscription should be fulfilled\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view override returns (bool) {\\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\\n        require(beaconId != bytes32(0), \\\"Subscription not registered\\\");\\n        // Assuming that the update value will be signed after this condition\\n        // returns true, the update timestamp will be larger than\\n        // `block.timestamp`, which will still satisfy the update condition.\\n        return\\n            checkUpdateCondition(\\n                beaconId,\\n                decodeFulfillmentData(data),\\n                uint32(block.timestamp),\\n                conditionParameters\\n            );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\\n    /// fulfill the Beacon update subscription\\n    /// @dev There is no need to verify that `conditionPspBeaconUpdate()`\\n    /// returns `true` because any Beacon update is a good Beacon update\\n    /// @param subscriptionId Subscription ID\\n    /// @param airnode Airnode address\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (a single `int256` encoded in contract\\n    /// ABI)\\n    /// @param signature Subscription ID, timestamp, sponsor wallet address\\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\\n    /// Airnode wallet\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external override onlyValidTimestamp(timestamp) {\\n        require(\\n            subscriptionIdToHash[subscriptionId] ==\\n                keccak256(abi.encodePacked(airnode, relayer, sponsor)),\\n            \\\"Subscription not registered\\\"\\n        );\\n        if (airnode == relayer) {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(subscriptionId, timestamp, msg.sender)\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n        } else {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(\\n                            subscriptionId,\\n                            timestamp,\\n                            msg.sender,\\n                            data\\n                        )\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n        }\\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\\n        // Beacon ID is guaranteed to not be zero because the subscription is\\n        // registered\\n        int224 decodedData = processBeaconUpdate(beaconId, timestamp, data);\\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\\n        // means it will be small enough to be typecast into `uint32`\\n        emit UpdatedBeaconWithPsp(\\n            beaconId,\\n            subscriptionId,\\n            decodedData,\\n            uint32(timestamp)\\n        );\\n    }\\n\\n    ///                     ~~~PSP Beacon set updates~~~\\n\\n    /// @notice Updates the Beacon set using the current values of its Beacons\\n    /// @dev As an oddity, this function still works if some of the IDs in\\n    /// `beaconIds` belong to Beacon sets rather than Beacons. This can be used\\n    /// to implement hierarchical Beacon sets.\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) public override returns (bytes32 beaconSetId) {\\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\\n            beaconIds\\n        );\\n        beaconSetId = deriveBeaconSetId(beaconIds);\\n        require(\\n            updatedTimestamp > dataFeeds[beaconSetId].timestamp,\\n            \\\"Does not update timestamp\\\"\\n        );\\n        dataFeeds[beaconSetId] = DataFeed({\\n            value: updatedValue,\\n            timestamp: updatedTimestamp\\n        });\\n        emit UpdatedBeaconSetWithBeacons(\\n            beaconSetId,\\n            updatedValue,\\n            updatedTimestamp\\n        );\\n    }\\n\\n    /// @notice Returns if the respective Beacon set needs to be updated based\\n    /// on the condition parameters\\n    /// @dev `endpointOrTemplateId` in the respective Subscription is expected\\n    /// to be zero, which means the `parameters` field of the Subscription will\\n    /// be forwarded to this function as `data`. This field should be the\\n    /// Beacon ID array encoded in contract ABI.\\n    /// @param subscriptionId Subscription ID\\n    /// @param data Fulfillment data (array of Beacon IDs, i.e., `bytes32[]`\\n    /// encoded in contract ABI)\\n    /// @param conditionParameters Subscription condition parameters. This\\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\\n    /// @return If the Beacon set update subscription should be fulfilled\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId, // solhint-disable-line no-unused-vars\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view override returns (bool) {\\n        bytes32[] memory beaconIds = abi.decode(data, (bytes32[]));\\n        require(\\n            keccak256(abi.encode(beaconIds)) == keccak256(data),\\n            \\\"Data length not correct\\\"\\n        );\\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\\n            beaconIds\\n        );\\n        return\\n            checkUpdateCondition(\\n                deriveBeaconSetId(beaconIds),\\n                updatedValue,\\n                updatedTimestamp,\\n                conditionParameters\\n            );\\n    }\\n\\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\\n    /// fulfill the Beacon set update subscription\\n    /// @dev Similar to `conditionPspBeaconSetUpdate()`, if\\n    /// `endpointOrTemplateId` of the Subscription is zero, its `parameters`\\n    /// field will be forwarded to `data` here, which is expect to be contract\\n    /// ABI-encoded array of Beacon IDs.\\n    /// It does not make sense for this subscription to be relayed, as there is\\n    /// no external data being delivered. Nevertheless, this is allowed for the\\n    /// lack of a reason to prevent it.\\n    /// Even though the consistency of the arguments are not being checked, if\\n    /// a standard implementation of Airnode is being used, these can be\\n    /// expected to be correct. Either way, the assumption is that it does not\\n    /// matter for the purposes of a Beacon set update subscription.\\n    /// @param subscriptionId Subscription ID\\n    /// @param airnode Airnode address\\n    /// @param relayer Relayer address\\n    /// @param sponsor Sponsor address\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @param signature Subscription ID, timestamp, sponsor wallet address\\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\\n    /// Airnode wallet\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId, // solhint-disable-line no-unused-vars\\n        address airnode, // solhint-disable-line no-unused-vars\\n        address relayer, // solhint-disable-line no-unused-vars\\n        address sponsor, // solhint-disable-line no-unused-vars\\n        uint256 timestamp, // solhint-disable-line no-unused-vars\\n        bytes calldata data,\\n        bytes calldata signature // solhint-disable-line no-unused-vars\\n    ) external override {\\n        require(\\n            keccak256(data) ==\\n                updateBeaconSetWithBeacons(abi.decode(data, (bytes32[]))),\\n            \\\"Data length not correct\\\"\\n        );\\n    }\\n\\n    ///                     ~~~Signed data feed updates~~~\\n\\n    /// @notice Updates a data feed using data signed by the respective\\n    /// Airnodes without requiring a request or subscription. The Beacons for\\n    /// which the fulfillment data and signature is omitted will be read from\\n    /// storage.\\n    /// @dev The signed data here is intentionally very general for practical\\n    /// reasons. It is less demanding on the signer to have data signed once\\n    /// and use that everywhere.\\n    /// @param signedData Array of contract ABI-encoded Airnode address,\\n    /// template ID, timestamp and fulfillment data that is signed by the\\n    /// respective Airnode\\n    function updateDataFeedWithSignedData(\\n        bytes[] calldata signedData\\n    ) external override {\\n        uint256 beaconCount = signedData.length;\\n        if (beaconCount > 1) {\\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n            int256[] memory values = new int256[](beaconCount);\\n            uint256 accumulatedTimestamp = 0;\\n            for (uint256 ind = 0; ind < beaconCount; ) {\\n                (\\n                    bytes32 beaconId,\\n                    int224 beaconValue,\\n                    uint32 beaconTimestamp\\n                ) = decodeSignedData(signedData[ind]);\\n                beaconIds[ind] = beaconId;\\n                if (beaconTimestamp != 0) {\\n                    values[ind] = beaconValue;\\n                    // Will not overflow assuming less than 2^224 Beacons\\n                    unchecked {\\n                        accumulatedTimestamp += beaconTimestamp;\\n                    }\\n                } else {\\n                    DataFeed storage beacon = dataFeeds[beaconId];\\n                    values[ind] = beacon.value;\\n                    unchecked {\\n                        accumulatedTimestamp += beacon.timestamp;\\n                    }\\n                }\\n                unchecked {\\n                    ind++;\\n                }\\n            }\\n            bytes32 beaconSetId = deriveBeaconSetId(beaconIds);\\n            uint32 updatedTimestamp = uint32(\\n                accumulatedTimestamp / beaconCount\\n            );\\n            require(\\n                updatedTimestamp > dataFeeds[beaconSetId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            int224 updatedValue = int224(median(values));\\n            dataFeeds[beaconSetId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            emit UpdatedBeaconSetWithSignedData(\\n                beaconSetId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else if (beaconCount == 1) {\\n            (\\n                bytes32 beaconId,\\n                int224 updatedValue,\\n                uint32 updatedTimestamp\\n            ) = decodeSignedData(signedData[0]);\\n            require(updatedTimestamp != 0, \\\"Missing data\\\");\\n            require(\\n                updatedTimestamp > dataFeeds[beaconId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            dataFeeds[beaconId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            emit UpdatedBeaconWithSignedData(\\n                beaconId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else {\\n            revert(\\\"Specified no Beacons\\\");\\n        }\\n    }\\n\\n    /// @notice Updates a data feed using data domain-signed by the respective\\n    /// Airnodes without requiring a request or subscription. The Beacons for\\n    /// which the fulfillment data and signature is omitted will be read from\\n    /// storage.\\n    /// @dev This signed data here is specific to this contract, which is to be\\n    /// used when the signer does not want to provide the more general\\n    /// signature. EIP712 may feel relevant here, but we avoided it for the\\n    /// sake of consistency among signed data implementations and clarity.\\n    /// @param signedData Array of contract ABI-encoded Airnode address,\\n    /// template ID, timestamp and fulfillment data that is signed by the\\n    /// respective Airnode for this specific contract\\n    function updateDataFeedWithDomainSignedData(\\n        bytes[] calldata signedData\\n    ) external override {\\n        uint256 beaconCount = signedData.length;\\n        if (beaconCount > 1) {\\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n            int256[] memory values = new int256[](beaconCount);\\n            uint256 accumulatedTimestamp = 0;\\n            for (uint256 ind = 0; ind < beaconCount; ) {\\n                (\\n                    bytes32 beaconId,\\n                    int224 beaconValue,\\n                    uint32 beaconTimestamp\\n                ) = decodeDomainSignedData(signedData[ind]);\\n                beaconIds[ind] = beaconId;\\n                if (beaconTimestamp != 0) {\\n                    values[ind] = beaconValue;\\n                    unchecked {\\n                        accumulatedTimestamp += beaconTimestamp;\\n                    }\\n                } else {\\n                    DataFeed storage beacon = dataFeeds[beaconId];\\n                    values[ind] = beacon.value;\\n                    unchecked {\\n                        accumulatedTimestamp += beacon.timestamp;\\n                    }\\n                }\\n                unchecked {\\n                    ind++;\\n                }\\n            }\\n            bytes32 beaconSetId = deriveBeaconSetId(beaconIds);\\n            uint32 updatedTimestamp = uint32(\\n                accumulatedTimestamp / beaconCount\\n            );\\n            require(\\n                updatedTimestamp > dataFeeds[beaconSetId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            int224 updatedValue = int224(median(values));\\n            dataFeeds[beaconSetId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            emit UpdatedBeaconSetWithDomainSignedData(\\n                beaconSetId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else if (beaconCount == 1) {\\n            (\\n                bytes32 beaconId,\\n                int224 updatedValue,\\n                uint32 updatedTimestamp\\n            ) = decodeDomainSignedData(signedData[0]);\\n            require(updatedTimestamp != 0, \\\"Missing data\\\");\\n            require(\\n                updatedTimestamp > dataFeeds[beaconId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            dataFeeds[beaconId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            emit UpdatedBeaconWithDomainSignedData(\\n                beaconId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else {\\n            revert(\\\"Specified no Beacons\\\");\\n        }\\n    }\\n\\n    ///                     ~~~OEV~~~\\n\\n    /// @notice Updates a data feed that the OEV proxy reads using data signed\\n    /// by the respective Airnodes for the specific bid. The Beacons for which\\n    /// the fulfillment data and signature is omitted will be read from\\n    /// storage.\\n    /// @dev Even though data for Beacons are signed individually, the caller\\n    /// is only allowed to use the signatures as a bundle. They cannot omit\\n    /// individual signatures or mix-and-match among bundles.\\n    /// @param oevProxy OEV proxy that reads the data feed\\n    /// @param updateId Update ID\\n    /// @param signatureCount Number of signatures in `signedData`\\n    /// @param signedData Array of ABI-encoded Airnode address, template ID,\\n    /// timestamp, fulfillment data and bid metadata that is signed by the\\n    /// respective Airnode for the specific bid\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 updateId,\\n        uint256 signatureCount,\\n        bytes[] calldata signedData\\n    ) external payable override {\\n        uint256 beaconCount = signedData.length;\\n        bytes32 metadataHash = keccak256(\\n            abi.encodePacked(\\n                block.chainid,\\n                address(this),\\n                address(oevProxy),\\n                msg.sender,\\n                msg.value,\\n                updateId,\\n                signatureCount,\\n                beaconCount\\n            )\\n        );\\n        if (beaconCount > 1) {\\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\\n            int256[] memory values = new int256[](beaconCount);\\n            uint256 accumulatedTimestamp = 0;\\n            for (uint256 ind = 0; ind < beaconCount; ) {\\n                (\\n                    bytes32 beaconId,\\n                    int224 beaconValue,\\n                    uint32 beaconTimestamp\\n                ) = decodeOevSignedData(metadataHash, signedData[ind]);\\n                beaconIds[ind] = beaconId;\\n                if (beaconTimestamp != 0) {\\n                    values[ind] = beaconValue;\\n                    unchecked {\\n                        accumulatedTimestamp += beaconTimestamp;\\n                    }\\n                    require(signatureCount != 0, \\\"More signatures than stated\\\");\\n                    unchecked {\\n                        signatureCount--;\\n                    }\\n                } else {\\n                    DataFeed storage beacon = dataFeeds[beaconId];\\n                    values[ind] = beacon.value;\\n                    unchecked {\\n                        accumulatedTimestamp += beacon.timestamp;\\n                    }\\n                }\\n                unchecked {\\n                    ind++;\\n                }\\n            }\\n            require(signatureCount == 0, \\\"Less signatures than stated\\\");\\n            bytes32 beaconSetId = deriveBeaconSetId(beaconIds);\\n            uint32 updatedTimestamp = uint32(\\n                accumulatedTimestamp / beaconCount\\n            );\\n            require(\\n                updatedTimestamp >\\n                    oevProxyToIdToDataFeed[oevProxy][beaconSetId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            int224 updatedValue = int224(median(values));\\n            oevProxyToIdToDataFeed[oevProxy][beaconSetId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            oevProxyToBalance[oevProxy] += msg.value;\\n            emit UpdatedOevProxyBeaconSetWithSignedData(\\n                beaconSetId,\\n                oevProxy,\\n                updateId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else if (beaconCount == 1) {\\n            (\\n                bytes32 beaconId,\\n                int224 updatedValue,\\n                uint32 updatedTimestamp\\n            ) = decodeOevSignedData(metadataHash, signedData[0]);\\n            require(updatedTimestamp != 0, \\\"Missing data\\\");\\n            require(\\n                updatedTimestamp >\\n                    oevProxyToIdToDataFeed[oevProxy][beaconId].timestamp,\\n                \\\"Does not update timestamp\\\"\\n            );\\n            oevProxyToIdToDataFeed[oevProxy][beaconId] = DataFeed({\\n                value: updatedValue,\\n                timestamp: updatedTimestamp\\n            });\\n            oevProxyToBalance[oevProxy] += msg.value;\\n            emit UpdatedOevProxyBeaconWithSignedData(\\n                beaconId,\\n                oevProxy,\\n                updateId,\\n                updatedValue,\\n                updatedTimestamp\\n            );\\n        } else {\\n            revert(\\\"Specified no Beacons\\\");\\n        }\\n    }\\n\\n    /// @notice Withdraws the balance of the OEV proxy to the respective\\n    /// beneficiary account\\n    /// @dev This does not require the caller to be the beneficiary because we\\n    /// expect that in most cases, the OEV beneficiary will be a contract that\\n    /// will not be able to make arbitrary calls. Our choice can be worked\\n    /// around by implementing a beneficiary proxy.\\n    /// @param oevProxy OEV proxy\\n    function withdraw(address oevProxy) external override {\\n        address oevBeneficiary = IOevProxy(oevProxy).oevBeneficiary();\\n        require(oevBeneficiary != address(0), \\\"Beneficiary address zero\\\");\\n        uint256 balance = oevProxyToBalance[oevProxy];\\n        require(balance != 0, \\\"OEV proxy balance zero\\\");\\n        oevProxyToBalance[oevProxy] = 0;\\n        emit Withdrew(oevProxy, oevBeneficiary, balance);\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, ) = oevBeneficiary.call{value: balance}(\\\"\\\");\\n        require(success, \\\"Withdrawal reverted\\\");\\n    }\\n\\n    /// @notice Sets the data feed ID the dAPI name points to\\n    /// @dev While a data feed ID refers to a specific Beacon or Beacon set,\\n    /// dAPI names provide a more abstract interface for convenience. This\\n    /// means a dAPI name that was pointing to a Beacon can be pointed to a\\n    /// Beacon set, then another Beacon set, etc.\\n    /// @param dapiName Human-readable dAPI name\\n    /// @param dataFeedId Data feed ID the dAPI name will point to\\n    function setDapiName(\\n        bytes32 dapiName,\\n        bytes32 dataFeedId\\n    ) external override {\\n        require(dapiName != bytes32(0), \\\"dAPI name zero\\\");\\n        require(\\n            msg.sender == manager ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    dapiNameSetterRole,\\n                    msg.sender\\n                ),\\n            \\\"Sender cannot set dAPI name\\\"\\n        );\\n        dapiNameHashToDataFeedId[\\n            keccak256(abi.encodePacked(dapiName))\\n        ] = dataFeedId;\\n        emit SetDapiName(dataFeedId, dapiName, msg.sender);\\n    }\\n\\n    /// @notice Returns the data feed ID the dAPI name is set to\\n    /// @param dapiName dAPI name\\n    /// @return Data feed ID\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view override returns (bytes32) {\\n        return dapiNameHashToDataFeedId[keccak256(abi.encodePacked(dapiName))];\\n    }\\n\\n    /// @notice Reads the data feed with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Reads the data feed with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\\n        require(dataFeedId != bytes32(0), \\\"dAPI name not set\\\");\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Reads the data feed as the OEV proxy with ID\\n    /// @param dataFeedId Data feed ID\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        DataFeed storage oevDataFeed = oevProxyToIdToDataFeed[msg.sender][\\n            dataFeedId\\n        ];\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\\n        } else {\\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        }\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Reads the data feed as the OEV proxy with dAPI name hash\\n    /// @param dapiNameHash dAPI name hash\\n    /// @return value Data feed value\\n    /// @return timestamp Data feed timestamp\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view override returns (int224 value, uint32 timestamp) {\\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\\n        require(dataFeedId != bytes32(0), \\\"dAPI name not set\\\");\\n        DataFeed storage oevDataFeed = oevProxyToIdToDataFeed[msg.sender][\\n            dataFeedId\\n        ];\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\\n        } else {\\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\\n        }\\n        require(timestamp > 0, \\\"Data feed not initialized\\\");\\n    }\\n\\n    /// @notice Aggregates the Beacons and returns the result\\n    /// @dev Tha aggregation of Beacons may have a different value than the\\n    /// respective Beacon set, e.g., because the Beacon set has been updated\\n    /// using signed data\\n    /// @param beaconIds Beacon IDs\\n    /// @return value Aggregation value\\n    /// @return timestamp Aggregation timestamp\\n    function aggregateBeacons(\\n        bytes32[] memory beaconIds\\n    ) public view override returns (int224 value, uint32 timestamp) {\\n        uint256 beaconCount = beaconIds.length;\\n        require(beaconCount > 1, \\\"Specified less than two Beacons\\\");\\n        int256[] memory values = new int256[](beaconCount);\\n        uint256 accumulatedTimestamp = 0;\\n        for (uint256 ind = 0; ind < beaconCount; ) {\\n            DataFeed storage dataFeed = dataFeeds[beaconIds[ind]];\\n            values[ind] = dataFeed.value;\\n            unchecked {\\n                accumulatedTimestamp += dataFeed.timestamp;\\n                ind++;\\n            }\\n        }\\n        value = int224(median(values));\\n        timestamp = uint32(accumulatedTimestamp / beaconCount);\\n    }\\n\\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\\n    /// @param airnode Airnode address\\n    /// @param templateId Template ID\\n    /// @return beaconId Beacon ID\\n    function deriveBeaconId(\\n        address airnode,\\n        bytes32 templateId\\n    ) private pure returns (bytes32 beaconId) {\\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\\n    }\\n\\n    /// @notice Derives the Beacon set ID from the Beacon IDs\\n    /// @dev Notice that `abi.encode()` is used over `abi.encodePacked()`\\n    /// @param beaconIds Beacon IDs\\n    /// @return beaconSetId Beacon set ID\\n    function deriveBeaconSetId(\\n        bytes32[] memory beaconIds\\n    ) private pure returns (bytes32 beaconSetId) {\\n        beaconSetId = keccak256(abi.encode(beaconIds));\\n    }\\n\\n    /// @notice Called privately to process the Beacon update\\n    /// @param beaconId Beacon ID\\n    /// @param timestamp Timestamp used in the signature\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return updatedBeaconValue Updated Beacon value\\n    function processBeaconUpdate(\\n        bytes32 beaconId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) private returns (int224 updatedBeaconValue) {\\n        updatedBeaconValue = decodeFulfillmentData(data);\\n        require(\\n            timestamp > dataFeeds[beaconId].timestamp,\\n            \\\"Does not update timestamp\\\"\\n        );\\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\\n        // means it will be small enough to be typecast into `uint32`\\n        dataFeeds[beaconId] = DataFeed({\\n            value: updatedBeaconValue,\\n            timestamp: uint32(timestamp)\\n        });\\n    }\\n\\n    /// @notice Called privately to decode the fulfillment data\\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\\n    /// @return decodedData Decoded fulfillment data\\n    function decodeFulfillmentData(\\n        bytes memory data\\n    ) private pure returns (int224) {\\n        require(data.length == 32, \\\"Data length not correct\\\");\\n        int256 decodedData = abi.decode(data, (int256));\\n        require(\\n            decodedData >= type(int224).min && decodedData <= type(int224).max,\\n            \\\"Value typecasting error\\\"\\n        );\\n        return int224(decodedData);\\n    }\\n\\n    /// @notice Called privately to check the update condition\\n    /// @param dataFeedId Data feed ID\\n    /// @param updatedValue Value the data feed will be updated with\\n    /// @param updatedTimestamp Timestamp the data feed will be updated with\\n    /// @param conditionParameters Subscription condition parameters. This\\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\\n    /// @return If the update should be executed\\n    function checkUpdateCondition(\\n        bytes32 dataFeedId,\\n        int224 updatedValue,\\n        uint32 updatedTimestamp,\\n        bytes calldata conditionParameters\\n    ) private view returns (bool) {\\n        require(conditionParameters.length == 96, \\\"Incorrect parameter length\\\");\\n        (\\n            uint256 deviationThresholdInPercentage,\\n            int224 deviationReference,\\n            uint256 heartbeatInterval\\n        ) = abi.decode(conditionParameters, (uint256, int224, uint256));\\n        DataFeed storage dataFeed = dataFeeds[dataFeedId];\\n        unchecked {\\n            return\\n                (dataFeed.timestamp == 0 && updatedTimestamp != 0) ||\\n                (deviationThresholdInPercentage != 0 &&\\n                    calculateUpdateInPercentage(\\n                        dataFeed.value,\\n                        updatedValue,\\n                        deviationReference\\n                    ) >=\\n                    deviationThresholdInPercentage) ||\\n                (heartbeatInterval != 0 &&\\n                    dataFeed.timestamp + heartbeatInterval <= updatedTimestamp);\\n        }\\n    }\\n\\n    /// @notice Called privately to calculate the update magnitude in\\n    /// percentages where 100% is represented as `HUNDRED_PERCENT`\\n    /// @dev The percentage changes will be more pronounced when the initial\\n    /// value is closer to the deviation reference. Therefore, while deciding\\n    /// on the subscription conditions, one should choose a deviation reference\\n    /// that will produce the desired update behavior. In general, the\\n    /// deviation reference should not be close to the operational range of the\\n    /// data feed (e.g., if the value is expected to change between -10 and 10,\\n    /// a deviation reference of -30 may be suitable.)\\n    /// @param initialValue Initial value\\n    /// @param updatedValue Updated value\\n    /// @param deviationReference Reference value that deviation will be\\n    /// calculated against\\n    /// @return updateInPercentage Update in percentage\\n    function calculateUpdateInPercentage(\\n        int224 initialValue,\\n        int224 updatedValue,\\n        int224 deviationReference\\n    ) private pure returns (uint256 updateInPercentage) {\\n        int256 delta;\\n        unchecked {\\n            delta = int256(updatedValue) - int256(initialValue);\\n        }\\n        if (delta == 0) {\\n            return 0;\\n        }\\n        uint256 absoluteInitialValue;\\n        unchecked {\\n            absoluteInitialValue = initialValue > deviationReference\\n                ? uint256(int256(initialValue) - int256(deviationReference))\\n                : uint256(int256(deviationReference) - int256(initialValue));\\n        }\\n        if (absoluteInitialValue == 0) {\\n            return type(uint256).max;\\n        }\\n        uint256 absoluteDelta = delta > 0 ? uint256(delta) : uint256(-delta);\\n        updateInPercentage =\\n            (absoluteDelta * HUNDRED_PERCENT) /\\n            absoluteInitialValue;\\n    }\\n\\n    /// @notice Decodes data signed to update a Beacon by the respective\\n    /// Airnode\\n    /// @param signedData Contract ABI-encoded Airnode address, template ID,\\n    /// timestamp and fulfillment data that is signed by the respective Airnode\\n    /// @return beaconId Beacon ID\\n    /// @return beaconValue Beacon value\\n    /// @return beaconTimestamp Beacon timestamp\\n    function decodeSignedData(\\n        bytes calldata signedData\\n    )\\n        private\\n        view\\n        returns (bytes32 beaconId, int224 beaconValue, uint32 beaconTimestamp)\\n    {\\n        (\\n            address airnode,\\n            bytes32 templateId,\\n            uint256 timestamp,\\n            bytes memory data,\\n            bytes memory signature\\n        ) = abi.decode(signedData, (address, bytes32, uint256, bytes, bytes));\\n        beaconId = deriveBeaconId(airnode, templateId);\\n        if (signature.length == 0) {\\n            require(data.length == 0, \\\"Missing signature\\\");\\n        } else {\\n            require(\\n                (\\n                    keccak256(abi.encodePacked(templateId, timestamp, data))\\n                        .toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n            beaconValue = decodeFulfillmentData(data);\\n            require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n            beaconTimestamp = uint32(timestamp);\\n        }\\n    }\\n\\n    /// @notice Decodes data domain-signed to update a Beacon by the respective\\n    /// Airnode\\n    /// @param signedData ABI-encoded Airnode address, template ID, timestamp\\n    /// and fulfillment data that is signed by the respective Airnode for this\\n    /// specific contract\\n    /// @return beaconId Beacon ID\\n    /// @return beaconValue Beacon value\\n    /// @return beaconTimestamp Beacon timestamp\\n    function decodeDomainSignedData(\\n        bytes calldata signedData\\n    )\\n        private\\n        view\\n        returns (bytes32 beaconId, int224 beaconValue, uint32 beaconTimestamp)\\n    {\\n        (\\n            address airnode,\\n            bytes32 templateId,\\n            uint256 timestamp,\\n            bytes memory data,\\n            bytes memory signature\\n        ) = abi.decode(signedData, (address, bytes32, uint256, bytes, bytes));\\n        beaconId = deriveBeaconId(airnode, templateId);\\n        if (signature.length == 0) {\\n            require(data.length == 0, \\\"Missing signature\\\");\\n        } else {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(\\n                            block.chainid,\\n                            address(this),\\n                            templateId,\\n                            timestamp,\\n                            data\\n                        )\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n            beaconValue = decodeFulfillmentData(data);\\n            require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n            beaconTimestamp = uint32(timestamp);\\n        }\\n    }\\n\\n    /// @notice Decodes data signed by the respective Airnode for the specific\\n    /// bid to update the Beacon that a OEV proxy reads\\n    /// @param metadataHash Hash of the metadata of the bid that won the OEV\\n    /// auction\\n    /// @param signedData ABI-encoded Airnode address, template ID, timestamp,\\n    /// fulfillment data and bid metadata that is signed by the respective\\n    /// Airnode for the specific bid\\n    /// @return beaconId Beacon ID\\n    /// @return beaconValue Beacon value\\n    /// @return beaconTimestamp Beacon timestamp\\n    function decodeOevSignedData(\\n        bytes32 metadataHash,\\n        bytes calldata signedData\\n    )\\n        private\\n        view\\n        returns (bytes32 beaconId, int224 beaconValue, uint32 beaconTimestamp)\\n    {\\n        (\\n            address airnode,\\n            bytes32 templateId,\\n            uint256 timestamp,\\n            bytes memory data,\\n            bytes memory signature\\n        ) = abi.decode(signedData, (address, bytes32, uint256, bytes, bytes));\\n        beaconId = deriveBeaconId(airnode, templateId);\\n        if (signature.length == 0) {\\n            require(data.length == 0, \\\"Missing signature\\\");\\n        } else {\\n            require(\\n                (\\n                    keccak256(\\n                        abi.encodePacked(\\n                            metadataHash,\\n                            templateId,\\n                            timestamp,\\n                            data\\n                        )\\n                    ).toEthSignedMessageHash()\\n                ).recover(signature) == airnode,\\n                \\\"Signature mismatch\\\"\\n            );\\n            beaconValue = decodeFulfillmentData(data);\\n            require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n            beaconTimestamp = uint32(timestamp);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae89c92f8762f90b66ac8ab0e18e96f9bf4f43d827a9f231a9fa4b8164b659e4\",\"license\":\"MIT\"},\"contracts/dapis/Median.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Sort.sol\\\";\\nimport \\\"./QuickSelect.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will calculate the median\\n/// of an array\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Median is Sort, Quickselect {\\n    /// @notice Returns the median of the array\\n    /// @dev Uses an unrolled sorting implementation for shorter arrays and\\n    /// quickselect for longer arrays for gas cost efficiency\\n    /// @param array Array whose median is to be calculated\\n    /// @return Median of the array\\n    function median(int256[] memory array) internal pure returns (int256) {\\n        uint256 arrayLength = array.length;\\n        if (arrayLength <= MAX_SORT_LENGTH) {\\n            sort(array);\\n            if (arrayLength % 2 == 1) {\\n                return array[arrayLength / 2];\\n            } else {\\n                assert(arrayLength != 0);\\n                unchecked {\\n                    return\\n                        average(\\n                            array[arrayLength / 2 - 1],\\n                            array[arrayLength / 2]\\n                        );\\n                }\\n            }\\n        } else {\\n            if (arrayLength % 2 == 1) {\\n                return array[quickselectK(array, arrayLength / 2)];\\n            } else {\\n                uint256 mid1;\\n                uint256 mid2;\\n                unchecked {\\n                    (mid1, mid2) = quickselectKPlusOne(\\n                        array,\\n                        arrayLength / 2 - 1\\n                    );\\n                }\\n                return average(array[mid1], array[mid2]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Averages two signed integers without overflowing\\n    /// @param x Integer x\\n    /// @param y Integer y\\n    /// @return Average of integers x and y\\n    function average(int256 x, int256 y) private pure returns (int256) {\\n        unchecked {\\n            int256 averageRoundedDownToNegativeInfinity = (x >> 1) +\\n                (y >> 1) +\\n                (x & y & 1);\\n            // If the average rounded down to negative infinity is negative\\n            // (i.e., its 256th sign bit is set), and one of (x, y) is even and\\n            // the other one is odd (i.e., the 1st bit of their xor is set),\\n            // add 1 to round the average down to zero instead.\\n            // We will typecast the signed integer to unsigned to logical-shift\\n            // int256(uint256(signedInt)) >> 255 ~= signedInt >>> 255\\n            return\\n                averageRoundedDownToNegativeInfinity +\\n                (int256(\\n                    (uint256(averageRoundedDownToNegativeInfinity) >> 255)\\n                ) & (x ^ y));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x84912d10ad5fa4848f2dfbbac40431ccdeb5250c263718b5fbdfeceeb0946524\",\"license\":\"MIT\"},\"contracts/dapis/QuickSelect.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will calculate the index\\n/// of the k-th and optionally (k+1)-th largest elements in the array\\n/// @notice Uses quickselect, which operates in-place, i.e., the array provided\\n/// as the argument will be modified.\\ncontract Quickselect {\\n    /// @notice Returns the index of the k-th largest element in the array\\n    /// @param array Array in which k-th largest element will be searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    function quickselectK(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 0);\\n        unchecked {\\n            (indK, ) = quickselect(array, 0, arrayLength - 1, k, false);\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th and (k+1)-th largest elements in\\n    /// the array\\n    /// @param array Array in which k-th and (k+1)-th largest elements will be\\n    /// searched\\n    /// @param k K\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element\\n    function quickselectKPlusOne(\\n        int256[] memory array,\\n        uint256 k\\n    ) internal pure returns (uint256 indK, uint256 indKPlusOne) {\\n        uint256 arrayLength = array.length;\\n        assert(arrayLength > 1);\\n        unchecked {\\n            return quickselect(array, 0, arrayLength - 1, k, true);\\n        }\\n    }\\n\\n    /// @notice Returns the index of the k-th largest element in the specified\\n    /// section of the (potentially unsorted) array\\n    /// @param array Array in which K will be searched for\\n    /// @param lo Starting index of the section of the array that K will be\\n    /// searched in\\n    /// @param hi Last index of the section of the array that K will be\\n    /// searched in\\n    /// @param k K\\n    /// @param selectKPlusOne If the index of the (k+1)-th largest element is\\n    /// to be returned\\n    /// @return indK Index of the k-th largest element\\n    /// @return indKPlusOne Index of the (k+1)-th largest element (only set if\\n    /// `selectKPlusOne` is `true`)\\n    function quickselect(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi,\\n        uint256 k,\\n        bool selectKPlusOne\\n    ) private pure returns (uint256 indK, uint256 indKPlusOne) {\\n        if (lo == hi) {\\n            return (k, 0);\\n        }\\n        uint256 indPivot = partition(array, lo, hi);\\n        if (k < indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, lo, indPivot - 1, k, false);\\n            }\\n        } else if (k > indPivot) {\\n            unchecked {\\n                (indK, ) = quickselect(array, indPivot + 1, hi, k, false);\\n            }\\n        } else {\\n            indK = indPivot;\\n        }\\n        // Since Quickselect ends in the array being partitioned around the\\n        // k-th largest element, we can continue searching towards right for\\n        // the (k+1)-th largest element, which is useful in calculating the\\n        // median of an array with even length\\n        if (selectKPlusOne) {\\n            unchecked {\\n                indKPlusOne = indK + 1;\\n            }\\n            uint256 i;\\n            unchecked {\\n                i = indKPlusOne + 1;\\n            }\\n            for (; i < array.length; ) {\\n                if (array[i] < array[indKPlusOne]) {\\n                    indKPlusOne = i;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Partitions the array into two around a pivot\\n    /// @param array Array that will be partitioned\\n    /// @param lo Starting index of the section of the array that will be\\n    /// partitioned\\n    /// @param hi Last index of the section of the array that will be\\n    /// partitioned\\n    /// @return pivotInd Pivot index\\n    function partition(\\n        int256[] memory array,\\n        uint256 lo,\\n        uint256 hi\\n    ) private pure returns (uint256 pivotInd) {\\n        if (lo == hi) {\\n            return lo;\\n        }\\n        int256 pivot = array[lo];\\n        uint256 i = lo;\\n        unchecked {\\n            pivotInd = hi + 1;\\n        }\\n        while (true) {\\n            do {\\n                unchecked {\\n                    i++;\\n                }\\n            } while (i < array.length && array[i] < pivot);\\n            do {\\n                unchecked {\\n                    pivotInd--;\\n                }\\n            } while (array[pivotInd] > pivot);\\n            if (i >= pivotInd) {\\n                (array[lo], array[pivotInd]) = (array[pivotInd], array[lo]);\\n                return pivotInd;\\n            }\\n            (array[i], array[pivotInd]) = (array[pivotInd], array[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x00f7f20130ba3896991520160113372f4ecc35c213b8bfdb4001cb0a78f3361f\",\"license\":\"MIT\"},\"contracts/dapis/Sort.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will sort an array using\\n/// an unrolled implementation\\n/// @notice The operation will be in-place, i.e., the array provided as the\\n/// argument will be modified.\\ncontract Sort {\\n    uint256 internal constant MAX_SORT_LENGTH = 9;\\n\\n    /// @notice Sorts the array\\n    /// @param array Array to be sorted\\n    function sort(int256[] memory array) internal pure {\\n        uint256 arrayLength = array.length;\\n        require(arrayLength <= MAX_SORT_LENGTH, \\\"Array too long to sort\\\");\\n        // Do a binary search\\n        if (arrayLength < 6) {\\n            // Possible lengths: 1, 2, 3, 4, 5\\n            if (arrayLength < 4) {\\n                // Possible lengths: 1, 2, 3\\n                if (arrayLength == 3) {\\n                    // Length: 3\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                } else if (arrayLength == 2) {\\n                    // Length: 2\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                }\\n                // Do nothing for Length: 1\\n            } else {\\n                // Possible lengths: 4, 5\\n                if (arrayLength == 5) {\\n                    // Length: 5\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                } else {\\n                    // Length: 4\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                }\\n            }\\n        } else {\\n            // Possible lengths: 6, 7, 8, 9\\n            if (arrayLength < 8) {\\n                // Possible lengths: 6, 7\\n                if (arrayLength == 7) {\\n                    // Length: 7\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 1, 5);\\n                    swapIfFirstIsLarger(array, 0, 4);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 6\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                }\\n            } else {\\n                // Possible lengths: 8, 9\\n                if (arrayLength == 9) {\\n                    // Length: 9\\n                    swapIfFirstIsLarger(array, 1, 8);\\n                    swapIfFirstIsLarger(array, 2, 7);\\n                    swapIfFirstIsLarger(array, 3, 6);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 1, 4);\\n                    swapIfFirstIsLarger(array, 5, 8);\\n                    swapIfFirstIsLarger(array, 0, 2);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 3);\\n                    swapIfFirstIsLarger(array, 5, 7);\\n                    swapIfFirstIsLarger(array, 4, 6);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 7, 8);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                } else {\\n                    // Length: 8\\n                    swapIfFirstIsLarger(array, 0, 7);\\n                    swapIfFirstIsLarger(array, 1, 6);\\n                    swapIfFirstIsLarger(array, 2, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 0, 3);\\n                    swapIfFirstIsLarger(array, 4, 7);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 0, 1);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 6, 7);\\n                    swapIfFirstIsLarger(array, 3, 5);\\n                    swapIfFirstIsLarger(array, 2, 4);\\n                    swapIfFirstIsLarger(array, 1, 2);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                    swapIfFirstIsLarger(array, 5, 6);\\n                    swapIfFirstIsLarger(array, 2, 3);\\n                    swapIfFirstIsLarger(array, 4, 5);\\n                    swapIfFirstIsLarger(array, 3, 4);\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice Swaps two elements of an array if the first element is greater\\n    /// than the second\\n    /// @param array Array whose elements are to be swapped\\n    /// @param ind1 Index of the first element\\n    /// @param ind2 Index of the second element\\n    function swapIfFirstIsLarger(\\n        int256[] memory array,\\n        uint256 ind1,\\n        uint256 ind2\\n    ) private pure {\\n        if (array[ind1] > array[ind2]) {\\n            (array[ind1], array[ind2]) = (array[ind2], array[ind1]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81e3790f7964b0169e60022f00f988a136e37a043053d8b07c794cc1c9b6c510\",\"license\":\"MIT\"},\"contracts/dapis/interfaces/IDapiServer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\nimport \\\"../../protocol/interfaces/IAirnodeRequester.sol\\\";\\n\\ninterface IDapiServer is IExtendedSelfMulticall, IAirnodeRequester {\\n    event SetRrpBeaconUpdatePermissionStatus(\\n        address indexed sponsor,\\n        address indexed requester,\\n        bool status\\n    );\\n\\n    event RequestedRrpBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor,\\n        bytes32 requestId,\\n        address requester\\n    );\\n\\n    event RequestedRelayedRrpBeaconUpdate(\\n        bytes32 indexed beaconId,\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor,\\n        bytes32 requestId,\\n        address requester\\n    );\\n\\n    event UpdatedBeaconWithRrp(\\n        bytes32 indexed beaconId,\\n        bytes32 requestId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event RegisteredBeaconUpdateSubscription(\\n        bytes32 indexed beaconId,\\n        bytes32 subscriptionId,\\n        address airnode,\\n        bytes32 templateId,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor\\n    );\\n\\n    event UpdatedBeaconWithPsp(\\n        bytes32 indexed beaconId,\\n        bytes32 subscriptionId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n    event UpdatedBeaconWithDomainSignedData(\\n        bytes32 indexed beaconId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithBeacons(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedBeaconSetWithDomainSignedData(\\n        bytes32 indexed dapiId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconWithSignedData(\\n        bytes32 indexed beaconId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event UpdatedOevProxyBeaconSetWithSignedData(\\n        bytes32 indexed beaconSetId,\\n        address indexed proxy,\\n        bytes32 indexed updateId,\\n        int224 value,\\n        uint32 timestamp\\n    );\\n\\n    event Withdrew(\\n        address indexed oevProxy,\\n        address oevBeneficiary,\\n        uint256 amount\\n    );\\n\\n    event SetDapiName(\\n        bytes32 indexed dataFeedId,\\n        bytes32 indexed dapiName,\\n        address sender\\n    );\\n\\n    function setRrpBeaconUpdatePermissionStatus(\\n        address rrpBeaconUpdateRequester,\\n        bool status\\n    ) external;\\n\\n    function requestRrpBeaconUpdateWithTemplate(\\n        address airnode,\\n        bytes32 templateId,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRrpBeaconUpdateWithEndpoint(\\n        address airnode,\\n        bytes32 endpointId,\\n        bytes calldata parameters,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRelayedRrpBeaconUpdateWithTemplate(\\n        address airnode,\\n        bytes32 templateId,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function requestRelayedRrpBeaconUpdateWithEndpoint(\\n        address airnode,\\n        bytes32 endpointId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRrpBeaconUpdate(\\n        bytes32 requestId,\\n        uint256 timestamp,\\n        bytes calldata data\\n    ) external;\\n\\n    function registerBeaconUpdateSubscription(\\n        address airnode,\\n        bytes32 templateId,\\n        bytes memory conditions,\\n        address relayer,\\n        address sponsor\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function conditionPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view returns (bool);\\n\\n    function fulfillPspBeaconUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateBeaconSetWithBeacons(\\n        bytes32[] memory beaconIds\\n    ) external returns (bytes32 beaconSetId);\\n\\n    function conditionPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        bytes calldata data,\\n        bytes calldata conditionParameters\\n    ) external view returns (bool);\\n\\n    function fulfillPspBeaconSetUpdate(\\n        bytes32 subscriptionId,\\n        address airnode,\\n        address relayer,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external;\\n\\n    function updateDataFeedWithSignedData(bytes[] calldata signedData) external;\\n\\n    function updateDataFeedWithDomainSignedData(\\n        bytes[] calldata signedData\\n    ) external;\\n\\n    function updateOevProxyDataFeedWithSignedData(\\n        address oevProxy,\\n        bytes32 updateId,\\n        uint256 signatureCount,\\n        bytes[] calldata signedData\\n    ) external payable;\\n\\n    function withdraw(address oevProxy) external;\\n\\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\\n\\n    function dapiNameToDataFeedId(\\n        bytes32 dapiName\\n    ) external view returns (bytes32);\\n\\n    function readDataFeedWithId(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHash(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithIdAsOevProxy(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function readDataFeedWithDapiNameHashAsOevProxy(\\n        bytes32 dapiNameHash\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function aggregateBeacons(\\n        bytes32[] memory beaconIds\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function HUNDRED_PERCENT() external view returns (uint256);\\n\\n    function dapiNameSetterRole() external view returns (bytes32);\\n\\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\\n        address sponsor,\\n        address updateRequester\\n    ) external view returns (bool);\\n\\n    function subscriptionIdToBeaconId(\\n        bytes32 subscriptionId\\n    ) external view returns (bytes32);\\n\\n    function dataFeeds(\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function oevProxyToIdToDataFeed(\\n        address proxy,\\n        bytes32 dataFeedId\\n    ) external view returns (int224 value, uint32 timestamp);\\n\\n    function dapiNameHashToDataFeedId(\\n        bytes32 dapiNameHash\\n    ) external view returns (bytes32 dataFeedId);\\n\\n    function oevProxyToBalance(\\n        address oevProxy\\n    ) external view returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0xff9200982cb18e104f1d1a8cee863f0777f8859bfd2cfc80fd2aeb0120d55490\",\"license\":\"MIT\"},\"contracts/dapis/proxies/interfaces/IOevProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOevProxy {\\n    function oevBeneficiary() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcd9962a465c96e85638eb40775da008f9c86a0ea0c50c7c5fcbb11c55f48fc22\",\"license\":\"MIT\"},\"contracts/protocol/AirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IAirnodeProtocol.sol\\\";\\nimport \\\"./interfaces/IAirnodeRequester.sol\\\";\\n\\n/// @title Contract to be inherited by contracts that will make Airnode\\n/// requests and receive fulfillments\\ncontract AirnodeRequester is IAirnodeRequester {\\n    /// @notice AirnodeProtocol contract address\\n    address public immutable override airnodeProtocol;\\n\\n    /// @dev Reverts if the sender is not the AirnodeProtocol contract. Use\\n    /// this modifier with methods that are meant to receive RRP fulfillments.\\n    modifier onlyAirnodeProtocol() {\\n        require(\\n            msg.sender == address(airnodeProtocol),\\n            \\\"Sender not Airnode protocol\\\"\\n        );\\n        _;\\n    }\\n\\n    /// @dev Reverts if the timestamp is not valid. Use this modifier with\\n    /// methods that are meant to receive RRP and PSP fulfillments.\\n    /// @param timestamp Timestamp used in the signature\\n    modifier onlyValidTimestamp(uint256 timestamp) {\\n        require(timestampIsValid(timestamp), \\\"Timestamp not valid\\\");\\n        _;\\n    }\\n\\n    /// @param _airnodeProtocol AirnodeProtocol contract address\\n    constructor(address _airnodeProtocol) {\\n        require(_airnodeProtocol != address(0), \\\"AirnodeProtocol address zero\\\");\\n        airnodeProtocol = _airnodeProtocol;\\n    }\\n\\n    /// @notice Returns if the timestamp used in the signature is valid\\n    /// @dev If and how the timestamp should be validated depends on the nature\\n    /// of the request. If the request is \\\"return me the price of this asset at\\n    /// this specific time in history\\\", it can be assumed that the response\\n    /// will not go out of date. If the request is \\\"return me the price of this\\n    /// asset now\\\", the requester would rather not consider a response that is\\n    /// not immediate. Since users commonly make the latter type of requests,\\n    /// we provide an example timestamp validation function. Feel free to use a\\n    /// different condition or even omit it if you are aware of the\\n    /// implications.\\n    /// @param timestamp Timestamp used in the signature\\n    function timestampIsValid(uint256 timestamp) internal view returns (bool) {\\n        unchecked {\\n            return\\n                timestamp + 1 hours > block.timestamp &&\\n                timestamp < block.timestamp + 15 minutes;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xab1b514402d4562d7822ae6f733777b7253a4bbccb78c502709d99760c66c5b9\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAirnodeProtocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/IExtendedSelfMulticall.sol\\\";\\nimport \\\"./IStorageUtils.sol\\\";\\nimport \\\"./ISponsorshipUtils.sol\\\";\\nimport \\\"./IWithdrawalUtils.sol\\\";\\n\\ninterface IAirnodeProtocol is\\n    IExtendedSelfMulticall,\\n    IStorageUtils,\\n    ISponsorshipUtils,\\n    IWithdrawalUtils\\n{\\n    event MadeRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequest(\\n        address indexed airnode,\\n        bytes32 indexed requestId,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    event MadeRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        address requester,\\n        uint256 requesterRequestCount,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    event FulfilledRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        bytes data\\n    );\\n\\n    event FailedRequestRelayed(\\n        address indexed relayer,\\n        bytes32 indexed requestId,\\n        address indexed airnode,\\n        uint256 timestamp,\\n        string errorMessage\\n    );\\n\\n    function makeRequest(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequest(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function makeRequestRelayed(\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        address relayer,\\n        address sponsor,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 requestId);\\n\\n    function fulfillRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        bytes calldata data,\\n        bytes calldata signature\\n    ) external returns (bool callSuccess, bytes memory callData);\\n\\n    function failRequestRelayed(\\n        bytes32 requestId,\\n        address airnode,\\n        address requester,\\n        address relayer,\\n        bytes4 fulfillFunctionId,\\n        uint256 timestamp,\\n        string calldata errorMessage,\\n        bytes calldata signature\\n    ) external;\\n\\n    function requestIsAwaitingFulfillment(\\n        bytes32 requestId\\n    ) external view returns (bool);\\n\\n    function requesterToRequestCount(\\n        address requester\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe5484a3f9246b2d9f42986cd7f98713b4689466b8470c8538f905ae105e95f74\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IAirnodeRequester.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IAirnodeRequester {\\n    function airnodeProtocol() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2412446bb860cfaafa447d99d0f41ba6977e7f2b6b743a09c16b1ff58186309\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/ISponsorshipUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISponsorshipUtils {\\n    event SetRrpSponsorshipStatus(\\n        address indexed sponsor,\\n        address indexed requester,\\n        bool status\\n    );\\n\\n    event SetPspSponsorshipStatus(\\n        address indexed sponsor,\\n        bytes32 indexed subscriptionId,\\n        bool status\\n    );\\n\\n    function setRrpSponsorshipStatus(address requester, bool status) external;\\n\\n    function setPspSponsorshipStatus(\\n        bytes32 subscriptionId,\\n        bool status\\n    ) external;\\n\\n    function sponsorToRequesterToRrpSponsorshipStatus(\\n        address sponsor,\\n        address requester\\n    ) external view returns (bool status);\\n\\n    function sponsorToSubscriptionIdToPspSponsorshipStatus(\\n        address sponsor,\\n        bytes32 subscriptionId\\n    ) external view returns (bool status);\\n}\\n\",\"keccak256\":\"0xcaac32775e5d2534e159d174e3a77f6058420daa18e1167f048df60d45a927ad\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IStorageUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IStorageUtils {\\n    event AnnouncedTemplate(\\n        bytes32 indexed templateId,\\n        bytes32 endpointId,\\n        bytes parameters\\n    );\\n\\n    event AnnouncedSubscription(\\n        bytes32 indexed subscriptionId,\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes parameters,\\n        bytes conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    );\\n\\n    function announceTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) external returns (bytes32 templateId);\\n\\n    function storeTemplate(\\n        bytes32 endpointId,\\n        bytes calldata parameters\\n    ) external returns (bytes32 templateId);\\n\\n    function announceSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 subscriptionId);\\n\\n    function storeSubscription(\\n        uint256 chainId,\\n        address airnode,\\n        bytes32 endpointOrTemplateId,\\n        bytes calldata parameters,\\n        bytes calldata conditions,\\n        address relayer,\\n        address sponsor,\\n        address requester,\\n        bytes4 fulfillFunctionId\\n    ) external returns (bytes32 subscriptionId);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function MAXIMUM_PARAMETER_LENGTH() external view returns (uint256);\\n\\n    function templates(\\n        bytes32 templateId\\n    ) external view returns (bytes32 endpointId, bytes memory parameters);\\n\\n    function subscriptions(\\n        bytes32 subscriptionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 chainId,\\n            address airnode,\\n            bytes32 endpointOrTemplateId,\\n            bytes memory parameters,\\n            bytes memory conditions,\\n            address relayer,\\n            address sponsor,\\n            address requester,\\n            bytes4 fulfillFunctionId\\n        );\\n}\\n\",\"keccak256\":\"0x711a0e9b00587a493e2503c65b2a65bb1cf23d9d7aa3bf42357c46d9f477687d\",\"license\":\"MIT\"},\"contracts/protocol/interfaces/IWithdrawalUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWithdrawalUtils {\\n    event RequestedWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId\\n    );\\n\\n    event FulfilledWithdrawal(\\n        address indexed airnodeOrRelayer,\\n        address indexed sponsor,\\n        bytes32 indexed withdrawalRequestId,\\n        uint256 protocolId,\\n        address sponsorWallet,\\n        uint256 amount\\n    );\\n\\n    event ClaimedBalance(address indexed sponsor, uint256 amount);\\n\\n    function requestWithdrawal(\\n        address airnodeOrRelayer,\\n        uint256 protocolId\\n    ) external;\\n\\n    function fulfillWithdrawal(\\n        bytes32 withdrawalRequestId,\\n        address airnodeOrRelayer,\\n        uint256 protocolId,\\n        address sponsor,\\n        uint256 timestamp,\\n        bytes calldata signature\\n    ) external payable;\\n\\n    function claimBalance() external;\\n\\n    function withdrawalRequestIsAwaitingFulfillment(\\n        bytes32 withdrawalRequestId\\n    ) external view returns (bool);\\n\\n    function sponsorToBalance(address sponsor) external view returns (uint256);\\n\\n    function sponsorToWithdrawalRequestCount(\\n        address sponsor\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb2356197ca1e0ccdbe53f56364438f56aa40a468d5dfc34c56c29c1d34b62b01\",\"license\":\"MIT\"},\"contracts/utils/ExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./SelfMulticall.sol\\\";\\nimport \\\"./interfaces/IExtendedSelfMulticall.sol\\\";\\n\\n/// @title Contract that extends SelfMulticall to fetch some of the global\\n/// variables\\n/// @notice Available global variables are limited to the ones that Airnode\\n/// tends to need\\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\\n    /// @notice Returns the chain ID\\n    /// @return Chain ID\\n    function getChainId() external view override returns (uint256) {\\n        return block.chainid;\\n    }\\n\\n    /// @notice Returns the account balance\\n    /// @param account Account address\\n    /// @return Account balance\\n    function getBalance(\\n        address account\\n    ) external view override returns (uint256) {\\n        return account.balance;\\n    }\\n\\n    /// @notice Returns the current block number\\n    /// @return Current block number\\n    function getBlockNumber() external view override returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @notice Returns the current block timestamp\\n    /// @return Current block timestamp\\n    function getBlockTimestamp() external view override returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @notice Returns the current block basefee\\n    /// @return Current block basefee\\n    function getBlockBasefee() external view override returns (uint256) {\\n        return block.basefee;\\n    }\\n}\\n\",\"keccak256\":\"0x27d9535d1a1a0f87a164f44a407a203b81242e4993b2caaf6b1e65ea8cac0563\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be\\n/// batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev Refer to OpenZeppelin's Multicall.sol for a similar implementation\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts if at\\n    /// least one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xed4f03a82a22975c0922a7839be114bd5ccecb56aff3f6df8f3d2e4f7cbf808b\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExpiringMetaTxForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExpiringMetaTxForwarder {\\n    event ExecutedMetaTx(bytes32 indexed metaTxHash);\\n\\n    event CanceledMetaTx(bytes32 indexed metaTxHash);\\n\\n    struct ExpiringMetaTx {\\n        address from;\\n        address to;\\n        bytes data;\\n        uint256 expirationTimestamp;\\n    }\\n\\n    function execute(\\n        ExpiringMetaTx calldata metaTx,\\n        bytes calldata signature\\n    ) external returns (bytes memory returndata);\\n\\n    function cancel(ExpiringMetaTx calldata metaTx) external;\\n\\n    function metaTxWithHashIsExecutedOrCanceled(\\n        bytes32 metaTxHash\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x07dd88733178b59486717a0b8a2027afcf3fbb5cc475166ee75327a683c7fa45\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExtendedSelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ISelfMulticall.sol\\\";\\n\\ninterface IExtendedSelfMulticall is ISelfMulticall {\\n    function getChainId() external view returns (uint256);\\n\\n    function getBalance(address account) external view returns (uint256);\\n\\n    function getBlockNumber() external view returns (uint256);\\n\\n    function getBlockTimestamp() external view returns (uint256);\\n\\n    function getBlockBasefee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4b205cf4fa62bd79b6035bacfe082a2939f91b234a99297f0d875e23ff09d521\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200604338038062006043833981016040819052620000359162000395565b8084848482826001600160a01b0382166200008a5760405162461bcd60e51b815260206004820152601060248201526f4143522061646472657373207a65726f60801b60448201526064015b60405180910390fd5b6000815111620000dd5760405162461bcd60e51b815260206004820152601c60248201527f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000604482015260640162000081565b6001600160a01b0382166080526000620000f8828262000517565b50806040516020016200010c9190620005e3565b60408051601f19818403018152919052805160209091012060a05250506001600160a01b038116620001815760405162461bcd60e51b815260206004820152601460248201527f4d616e616765722061646472657373207a65726f000000000000000000000000604482015260640162000081565b6001600160a01b03811660c052620001998162000253565b60e0525050506001600160a01b038116620001f75760405162461bcd60e51b815260206004820152601c60248201527f4169726e6f646550726f746f636f6c2061646472657373207a65726f00000000604482015260640162000081565b6001600160a01b03166101005260c0516200024490620002179062000253565b60408051808201909152601081526f3220a824903730b6b29039b2ba3a32b960811b6020820152620002cd565b61012052506200060192505050565b6000620002c762000298836040516001600160601b0319606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b60a051604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92915050565b6000620003098383604051602001620002e79190620005e3565b604051602081830303815290604052805190602001206200031060201b60201c565b9392505050565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b80516001600160a01b03811681146200035457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156200038c57818101518382015260200162000372565b50506000910152565b60008060008060808587031215620003ac57600080fd5b620003b7856200033c565b60208601519094506001600160401b0380821115620003d557600080fd5b818701915087601f830112620003ea57600080fd5b815181811115620003ff57620003ff62000359565b604051601f8201601f19908116603f011681019083821181831017156200042a576200042a62000359565b816040528281528a60208487010111156200044457600080fd5b620004578360208301602088016200036f565b80975050505050506200046d604086016200033c565b91506200047d606086016200033c565b905092959194509250565b600181811c908216806200049d57607f821691505b602082108103620004be57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200051257600081815260208120601f850160051c81016020861015620004ed5750805b601f850160051c820191505b818110156200050e57828155600101620004f9565b5050505b505050565b81516001600160401b0381111562000533576200053362000359565b6200054b8162000544845462000488565b84620004c4565b602080601f8311600181146200058357600084156200056a5750858301515b600019600386901b1c1916600185901b1785556200050e565b600085815260208120601f198616915b82811015620005b45788860151825594840194600190910190840162000593565b5085821015620005d35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251620005f78184602087016200036f565b9190910192915050565b60805160a05160c05160e05161010051610120516159bd620006866000396000818161060501526127f301526000818161083e01528181610be30152818161193d01528181611e7a015281816124d801526132ab015260006102fc01526000818161050401526127a401526000505060008181610398015261281f01526159bd6000f3fe6080604052600436106102e55760003560e01c8063796b89b911610184578063ac9650d8116100d6578063d7c0b8791161008a578063f8b2cb4f11610064578063f8b2cb4f1461092b578063fc3c1f8b14610953578063fce90be81461097357600080fd5b8063d7c0b879146108a0578063dc96acc8146108c0578063f83ea108146108e057600080fd5b8063b76f3c15116100bb578063b76f3c151461082c578063cfaf497114610860578063d10a13981461088057600080fd5b8063ac9650d8146107df578063b62408a31461080c57600080fd5b806391eed085116101385780639e14caa8116101125780639e14caa814610772578063a026658f14610792578063a5fc076f146107bf57600080fd5b806391eed085146106e7578063934cd0d614610707578063977cae011461072757600080fd5b80638cdd8844116101695780638cdd88441461067a5780638e6ddc271461069a5780638fca9ab9146106c757600080fd5b8063796b89b914610647578063810b3e111461065a57600080fd5b8063437b91161161023d57806351cff8d9116101f15780636ed93dd0116101cb5780636ed93dd0146105db5780637512449b146105f357806378ef72d71461062757600080fd5b806351cff8d91461055b5780635bc8a5c81461057b57806367a7cfb71461059b57600080fd5b8063481c6a7511610222578063481c6a75146104f25780634c8f1d8d146105265780634dcc19fe1461054857600080fd5b8063437b911614610497578063472c22f1146104c557600080fd5b8063206b48f41161029f5780633408e470116102795780633408e470146104515780633ade28281461046457806342cbb15c1461048457600080fd5b8063206b48f4146103d25780632ce010e3146103f257806332be8f0b1461041257600080fd5b806312acef12116102d057806312acef121461035157806318e99d90146103715780631ce9ae071461038657600080fd5b80629f2f3c146102ea578062aae33f14610331575b600080fd5b3480156102f657600080fd5b5061031e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561033d57600080fd5b5061031e61034c366004614c47565b6109bc565b34801561035d57600080fd5b5061031e61036c366004614d02565b610ad4565b61038461037f366004614d89565b610cca565b005b34801561039257600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610328565b3480156103de57600080fd5b506103846103ed366004614e35565b611376565b3480156103fe57600080fd5b5061038461040d366004614e35565b611692565b34801561041e57600080fd5b5061043261042d366004614ef2565b611711565b60408051601b9390930b835263ffffffff909116602083015201610328565b34801561045d57600080fd5b504661031e565b34801561047057600080fd5b5061031e61047f366004614f0b565b611844565b34801561049057600080fd5b504361031e565b3480156104a357600080fd5b506104b76104b2366004614f90565b611a54565b604051610328929190615077565b3480156104d157600080fd5b5061031e6104e0366004614ef2565b60056020526000908152604090205481565b3480156104fe57600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053257600080fd5b5061053b611bba565b60405161032891906150d0565b34801561055457600080fd5b504861031e565b34801561056757600080fd5b506103846105763660046150e3565b611c48565b34801561058757600080fd5b50610384610596366004615100565b611e6f565b3480156105a757600080fd5b506104326105b6366004614ef2565b600360205260009081526040902054601b81900b90600160e01b900463ffffffff1682565b3480156105e757600080fd5b5061031e6305f5e10081565b3480156105ff57600080fd5b5061031e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063357600080fd5b50610384610642366004614f90565b611faa565b34801561065357600080fd5b504261031e565b34801561066657600080fd5b5061031e610675366004615153565b6123c1565b34801561068657600080fd5b50610432610695366004614c47565b6125c8565b3480156106a657600080fd5b5061031e6106b53660046150e3565b60066020526000908152604090205481565b3480156106d357600080fd5b5061031e6106e2366004614ef2565b612707565b3480156106f357600080fd5b506103846107023660046151a6565b61274c565b34801561071357600080fd5b50610384610722366004614f90565b612959565b34801561073357600080fd5b506107626107423660046151c8565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610328565b34801561077e57600080fd5b5061038461078d36600461520f565b612d54565b34801561079e57600080fd5b5061031e6107ad366004614ef2565b60026020526000908152604090205481565b3480156107cb57600080fd5b506104326107da366004614ef2565b612e0f565b3480156107eb57600080fd5b506107ff6107fa366004614f90565b612e87565b604051610328919061523d565b34801561081857600080fd5b50610432610827366004614ef2565b613008565b34801561083857600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b34801561086c57600080fd5b5061043261087b366004614ef2565b6130e0565b34801561088c57600080fd5b5061031e61089b366004615250565b6131b2565b3480156108ac57600080fd5b506107626108bb3660046152c4565b6133b7565b3480156108cc57600080fd5b506107626108db3660046152c4565b613486565b3480156108ec57600080fd5b506104326108fb36600461532d565b6004602090815260009283526040808420909152908252902054601b81900b90600160e01b900463ffffffff1682565b34801561093757600080fd5b5061031e6109463660046150e3565b6001600160a01b03163190565b34801561095f57600080fd5b5061031e61096e366004614f0b565b613538565b34801561097f57600080fd5b5061053b6040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b60008060006109ca846125c8565b915091506109d784613780565b60008181526003602052604090205490935063ffffffff600160e01b909104811690821611610a495760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b60448201526064015b60405180910390fd5b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a25050919050565b6000816001600160a01b038116331480610b1157506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b610b545760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60408051606087901b6bffffffffffffffffffffffff19166020808301919091526034808301889052835180840390910181526054909201909252805191012060009060405163eebecf6960e01b81526001600160a01b0388811660048301526024820188905260a06044830152600060a48301528681166064830152630b7914b960e31b60848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063eebecf699060c4016020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190615359565b60008181526007602090815260409182902084905581516001600160a01b038a811682529181018990529087168183015260608101839052336080820152905191945082917ffdb8fbecf8c307d3eb37e7eef7a6fb3f2c05c992afa63bef475c82a4c75ca14d9181900360a00190a250509392505050565b60408051466020808301919091526bffffffffffffffffffffffff1930606090811b82168486015289811b8216605485015233901b16606883015234607c830152609c820187905260bc820186905260dc8083018590528351808403909101815260fc9092019092528051910120819060018211156111625760008267ffffffffffffffff811115610d5e57610d5e614c00565b604051908082528060200260200182016040528015610d87578160200160208202803683370190505b50905060008367ffffffffffffffff811115610da557610da5614c00565b604051908082528060200260200182016040528015610dce578160200160208202803683370190505b5090506000805b85811015610f1d576000806000610e0f888c8c87818110610df857610df8615372565b9050602002810190610e0a9190615388565b6137b0565b92509250925082878581518110610e2857610e28615372565b602090810291909101015263ffffffff811615610ec85781601b0b868581518110610e5557610e55615372565b6020026020010181815250508063ffffffff16850194508b600003610ebc5760405162461bcd60e51b815260206004820152601b60248201527f4d6f7265207369676e617475726573207468616e2073746174656400000000006044820152606401610a40565b600019909b019a610f12565b600083815260036020526040902080548751601b9190910b90889087908110610ef357610ef3615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b505050600101610dd5565b508715610f6c5760405162461bcd60e51b815260206004820152601b60248201527f4c657373207369676e617475726573207468616e2073746174656400000000006044820152606401610a40565b6000610f7784613780565b90506000610f8587846153fb565b6001600160a01b038d16600090815260046020908152604080832086845290915290205490915063ffffffff600160e01b9091048116908216116110075760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b600061101285613949565b9050604051806040016040528082601b0b81526020018363ffffffff16815250600460008f6001600160a01b03166001600160a01b03168152602001908152602001600020600085815260200190815260200160002060008201518160000160006101000a8154816001600160e01b030219169083601b0b6001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505034600660008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110f7919061540f565b925050819055508b8d6001600160a01b0316847fdd29860e0772a39dea2ff0520d79f8efdffe48c903d6bbbc0c2cc65dc6568a7f848660405161114f929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a450505050505061136d565b816001036113255760008060006111868488886000818110610df857610df8615372565b9250925092508063ffffffff166000036111d15760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b6001600160a01b038a16600090815260046020908152604080832086845290915290205463ffffffff600160e01b9091048116908216116112505760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b815263ffffffff80841660208084019182526001600160a01b038f166000818152600483528681208a8252835286812095519351909416600160e01b026001600160e01b03909316929092179093558152600690915290812080543492906112c790849061540f565b909155505060408051601b84900b815263ffffffff831660208201528a916001600160a01b038d169186917fc856aaa4e639403f366ad68f07eb69bad4c044a35b0369c4ef1ea3a427a6a0ee910160405180910390a450505061136d565b60405162461bcd60e51b815260206004820152601460248201527f537065636966696564206e6f20426561636f6e730000000000000000000000006044820152606401610a40565b50505050505050565b8461138081613aa2565b6113c25760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a811b8216603484015289901b166048820152605c0160408051601f19818403018152918152815160209283012060008d81526008909352912054146114675760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f74207265676973746572656400000000006044820152606401610a40565b876001600160a01b0316896001600160a01b03160361157057886001600160a01b031661152084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161151a92506114ff91508f908c903390602001928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120613ac0565b90613afb565b6001600160a01b03161461156b5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b61161b565b886001600160a01b03166115d084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161151a92506114ff91508f908c9033908d908d90602001615422565b6001600160a01b03161461161b5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b60008a8152600260205260408120549061163782898989613b1f565b604080518e8152601b83900b602082015263ffffffff8b1681830152905191925083917f2b85d71813342fd0091d4573a5f78e244c2133755e470943c33a6dbf3cf9c15d9181900360600190a2505050505050505050505050565b6116a161034c84860186614c47565b84846040516116b192919061545c565b6040518091039020146117065760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b505050505050505050565b60008181526005602052604081205481908061176f5760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610a40565b336000908152600460209081526040808320848452825280832060039092529091208054825463ffffffff600160e01b928390048116929091041611156117cd578154601b81900b9550600160e01b900463ffffffff1693506117e6565b8054601b81900b9550600160e01b900463ffffffff1693505b60008463ffffffff161161183c5760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b505050915091565b6000816001600160a01b03811633148061188157506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6118c45760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60008787876040516020016118db9392919061546c565b60408051808303601f1901815282825280516020918201206bffffffffffffffffffffffff1960608e901b1682850152603480850182905283518086039091018152605485019384905280519201919091206353f0642f60e11b9092529250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a7e0c85e9061198d908d908d908d908d908d908d90630b7914b960e31b906058016154af565b6020604051808303816000875af11580156119ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d09190615359565b60008181526007602090815260409182902084905581516001600160a01b038e81168252918101869052898216818401529088166060820152608081018390523360a0820152905191955082917f0f217d153669e569a267b32f8ddbbb65c09cb35e7a51ba97bea2cdea05992d089181900360c00190a25050509695505050505050565b606080828067ffffffffffffffff811115611a7157611a71614c00565b604051908082528060200260200182016040528015611a9a578160200160208202803683370190505b5092508067ffffffffffffffff811115611ab657611ab6614c00565b604051908082528060200260200182016040528015611ae957816020015b6060815260200190600190039081611ad45790505b50915060005b81811015611bb15730868683818110611b0a57611b0a615372565b9050602002810190611b1c9190615388565b604051611b2a92919061545c565b600060405180830381855af49150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b50858381518110611b7d57611b7d615372565b60200260200101858481518110611b9657611b96615372565b60209081029190910101919091529015159052600101611aef565b50509250929050565b60008054611bc79061551e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf39061551e565b8015611c405780601f10611c1557610100808354040283529160200191611c40565b820191906000526020600020905b815481529060010190602001808311611c2357829003601f168201915b505050505081565b6000816001600160a01b0316630e15999d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190615552565b90506001600160a01b038116611d045760405162461bcd60e51b815260206004820152601860248201527f42656e65666963696172792061646472657373207a65726f00000000000000006044820152606401610a40565b6001600160a01b03821660009081526006602052604081205490819003611d6d5760405162461bcd60e51b815260206004820152601660248201527f4f45562070726f78792062616c616e6365207a65726f000000000000000000006044820152606401610a40565b6001600160a01b0383811660008181526006602090815260408083209290925581519386168452830184905290917f0472be967f9a37138dfea1875af44784cafb79f92044ab33d7d6958eddd9ca6c910160405180910390a26000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e13576040519150601f19603f3d011682016040523d82523d6000602084013e611e18565b606091505b5050905080611e695760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c207265766572746564000000000000000000000000006044820152606401610a40565b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ee75760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74204169726e6f64652070726f746f636f6c00000000006044820152606401610a40565b82611ef181613aa2565b611f335760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b600085815260076020526040812080549082905590611f5482878787613b1f565b60408051898152601b83900b602082015263ffffffff891681830152905191925083917fbf747faf738dbfb7e8b225265a7d7afd921e2ddd91b2bc5b87984d12d41c8b359181900360600190a250505050505050565b80600181111561225b5760008167ffffffffffffffff811115611fcf57611fcf614c00565b604051908082528060200260200182016040528015611ff8578160200160208202803683370190505b50905060008267ffffffffffffffff81111561201657612016614c00565b60405190808252806020026020018201604052801561203f578160200160208202803683370190505b5090506000805b8481101561213657600080600061207f8a8a8681811061206857612068615372565b905060200281019061207a9190615388565b613c1b565b9250925092508287858151811061209857612098615372565b602090810291909101015263ffffffff8116156120e15781601b0b8685815181106120c5576120c5615372565b6020026020010181815250508063ffffffff168501945061212b565b600083815260036020526040902080548751601b9190910b9088908790811061210c5761210c615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b505050600101612046565b50600061214284613780565b9050600061215086846153fb565b60008381526003602052604090205490915063ffffffff600160e01b9091048116908216116121bd5760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b60006121c885613949565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008b81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925084917fb34747dc40d9c985b4857c2955fec7a8f34d88bc06da72f4331979575880040791015b60405180910390a2505050505050505050565b8060010361132557600080600061227e8686600081811061206857612068615372565b9250925092508063ffffffff166000036122c95760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b60008381526003602052604090205463ffffffff600160e01b9091048116908216116123335760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917f1ffdb573afe7273932e253bc4b8a17b9da4d37d7219ba05e464358975b36efb791015b60405180910390a25050505b505050565b6000816001600160a01b0381163314806123fe57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6124415760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60408051606088901b6bffffffffffffffffffffffff1916602080830191909152603480830189905283518084039091018152605490920190925280519101206000906040516353f0642f60e11b81526001600160a01b0389811660048301526024820189905260c06044830152600060c483015287811660648301528681166084830152630b7914b960e31b60a48301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a7e0c85e9060e4016020604051808303816000875af1158015612523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125479190615359565b60008181526007602090815260409182902084905581516001600160a01b038b811682529181018a9052888216818401529087166060820152608081018390523360a0820152905191945082917f0f217d153669e569a267b32f8ddbbb65c09cb35e7a51ba97bea2cdea05992d089181900360c00190a25050949350505050565b805160009081906001811161261f5760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e73006044820152606401610a40565b60008167ffffffffffffffff81111561263a5761263a614c00565b604051908082528060200260200182016040528015612663578160200160208202803683370190505b5090506000805b838110156126e75760006003600089848151811061268a5761268a615372565b602090810291909101810151825281019190915260400160002080548551919250601b0b908590849081106126c1576126c1615372565b602090810291909101015254600160e01b900463ffffffff16919091019060010161266a565b506126f182613949565b94506126fd83826153fb565b9350505050915091565b6000600560008360405160200161272091815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b816127995760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610a40565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061289257506040517f91d148540000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061556f565b6128de5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d6500000000006044820152606401610a40565b8060056000846040516020016128f691815260200190565b60408051601f1981840301815291815281516020928301208352828201939093529082016000209290925551338152839183917ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f591015b60405180910390a35050565b806001811115612bfb5760008167ffffffffffffffff81111561297e5761297e614c00565b6040519080825280602002602001820160405280156129a7578160200160208202803683370190505b50905060008267ffffffffffffffff8111156129c5576129c5614c00565b6040519080825280602002602001820160405280156129ee578160200160208202803683370190505b5090506000805b84811015612ae5576000806000612a2e8a8a86818110612a1757612a17615372565b9050602002810190612a299190615388565b613db0565b92509250925082878581518110612a4757612a47615372565b602090810291909101015263ffffffff811615612a905781601b0b868581518110612a7457612a74615372565b6020026020010181815250508063ffffffff1685019450612ada565b600083815260036020526040902080548751601b9190910b90889087908110612abb57612abb615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b5050506001016129f5565b506000612af184613780565b90506000612aff86846153fb565b60008381526003602052604090205490915063ffffffff600160e01b909104811690821611612b6c5760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b6000612b7785613949565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008b81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925084917fe8a26d41600714ff17db64ddb6eb7590f25d6e1e5fa1adf35aa3a5f5b9d694ed9101612248565b80600103611325576000806000612c1e86866000818110612a1757612a17615372565b9250925092508063ffffffff16600003612c695760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b60008381526003602052604090205463ffffffff600160e01b909104811690821611612cd35760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917f218ec204122699f75f4032ddef3df77e5072a4be8aa4d1867bdc897e1955f37991016123b0565b6001600160a01b038216612daa5760405162461bcd60e51b815260206004820152601560248201527f55706461746520726571756573746572207a65726f00000000000000000000006044820152606401610a40565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917fba239f737a4075f5efb0d649e16cd7d2b1978690876b079dab642f077050b279910161294d565b60008181526003602052604090208054601b81900b91600160e01b90910463ffffffff169081612e815760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b50915091565b6060818067ffffffffffffffff811115612ea357612ea3614c00565b604051908082528060200260200182016040528015612ed657816020015b6060815260200190600190039081612ec15790505b50915060005b8181101561300057600030868684818110612ef957612ef9615372565b9050602002810190612f0b9190615388565b604051612f1992919061545c565b600060405180830381855af49150503d8060008114612f54576040519150601f19603f3d011682016040523d82523d6000602084013e612f59565b606091505b50858481518110612f6c57612f6c615372565b6020908102919091010152905080612ff7576000848381518110612f9257612f92615372565b60200260200101519050600081511115612faf5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610a40565b50600101612edc565b505092915050565b6000818152600560205260408120548190806130665760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610a40565b60008181526003602052604090208054601b81900b9450600160e01b900463ffffffff169250826130d95760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b5050915091565b336000908152600460209081526040808320848452825280832060039092528220805482548493929163ffffffff600160e01b918290048116919092049091161115613143578154601b81900b9450600160e01b900463ffffffff16925061315c565b8054601b81900b9450600160e01b900463ffffffff1692505b60008363ffffffff16116130d95760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b6000816001600160a01b0381163314806131ef57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6132325760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60008686866040516020016132499392919061546c565b60408051808303601f1901815282825280516020918201206bffffffffffffffffffffffff1960608d901b16828501526034808501829052835180860390910181526054850193849052805192019190912063eebecf6960e01b9092529250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eebecf69906132f9908c908c908c908c908c90630b7914b960e31b9060580161558c565b6020604051808303816000875af1158015613318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333c9190615359565b60008181526007602090815260409182902084905581516001600160a01b038d811682529181018690529088168183015260608101839052336080820152905191955082917ffdb8fbecf8c307d3eb37e7eef7a6fb3f2c05c992afa63bef475c82a4c75ca14d9181900360a00190a250505095945050505050565b6000806133c685870187614c47565b905085856040516133d892919061545c565b6040518091039020816040516020016133f191906155f1565b60405160208183030381529060405280519060200120146134545760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b600080613460836125c8565b9150915061347961347084613780565b83838989613e93565b9998505050505050505050565b600085815260026020526040812054806134e25760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f74207265676973746572656400000000006044820152606401610a40565b61352d8161352588888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f8892505050565b428787613e93565b979650505050505050565b60006001600160a01b0383166135905760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f0000000000000000000000006044820152606401610a40565b6001600160a01b0382166135e65760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f0000000000000000000000006044820152606401610a40565b60405161362790469089908990899089908990899030907f206b48f40000000000000000000000000000000000000000000000000000000090602001615635565b60408051601f198184030181529181528151602092830120600081815260089093529120549091501561369c5760405162461bcd60e51b815260206004820152601f60248201527f537562736372697074696f6e20616c72656164792072656769737465726564006044820152606401610a40565b604080516bffffffffffffffffffffffff1960608a811b8216602080850182905288831b841660348601529187901b90921660488401528351808403603c018152605c8401855280519082012060008681526008835285812091909155607c84019290925260908084018b90528451808503909101815260b0909301808552835193820193909320858352600290915292902082905581907f39f2437664bc2ef14dea31757145f683a7c4b0cfe8a520f186470bc7c4a1321d9061376d9085908c908c908c908c908c908c906156c6565b60405180910390a2509695505050505050565b60008160405160200161379391906155f1565b604051602081830303815290604052805190602001209050919050565b6000808080808080806137c5898b018b615782565b9450945094509450945061381b85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b9750805160000361386e578151156138695760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b61393b565b846001600160a01b03166138968261151a8e8888886040516020016114ff949392919061580c565b6001600160a01b0316146138e15760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b6138ea82613f88565b96506138f583613aa2565b6139375760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b8295505b505050505093509350939050565b805160009060098111613a225761395f8361408b565b61396a600282615840565b60010361399d578261397d6002836153fb565b8151811061398d5761398d615372565b6020026020010151915050919050565b806000036139ad576139ad615854565b613a1b8360016002840403815181106139c8576139c8615372565b602002602001015184600284816139e1576139e16153cf565b04815181106139f2576139f2615372565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b9392505050565b613a2d600282615840565b600103613a49578261397d81613a446002856153fb565b61459d565b600080613a5c85600160028604036145ca565b8092508193505050613a93858381518110613a7957613a79615372565b60200260200101518683815181106139f2576139f2615372565b95945050505050565b50919050565b60004282610e1001118015613aba5750426103840182105b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01613793565b6000806000613b0a8585614600565b91509150613b1781614642565b509392505050565b6000613b6083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f8892505050565b600086815260036020526040902054909150600160e01b900463ffffffff168411613bc95760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600390529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b600080808080808080613c30898b018b615782565b94509450945094509450613c8685856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b97508051600003613cd957815115613cd45760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b613da4565b846001600160a01b0316613cff8261151a8787876040516020016114ff9392919061586a565b6001600160a01b031614613d4a5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b613d5382613f88565b9650613d5e83613aa2565b613da05760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b8295505b50505050509250925092565b600080808080808080613dc5898b018b615782565b94509450945094509450613e1b85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b97508051600003613e6957815115613cd45760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b846001600160a01b0316613cff8261151a46308989896040516020016114ff959493929190615897565b600060608214613ee55760405162461bcd60e51b815260206004820152601a60248201527f496e636f727265637420706172616d65746572206c656e6774680000000000006044820152606401610a40565b60008080613ef5858701876158e4565b60008c81526003602052604090208054939650919450925090600160e01b900463ffffffff16158015613f2d575063ffffffff881615155b80613f5257508315801590613f52575080548490613f4f90601b0b8b866147aa565b10155b80613f7a57508115801590613f7a5750805463ffffffff808a16600160e01b90920416830111155b9a9950505050505050505050565b60008151602014613fdb5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b600082806020019051810190613ff19190615359565b90507fffffffff80000000000000000000000000000000000000000000000000000000811280159061403f57507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b613aba5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f720000000000000000006044820152606401610a40565b805160098111156140de5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f7274000000000000000000006044820152606401610a40565b60068110156141e95760048110156141385780600303614123576141058260006001614838565b6141128260016002614838565b61411f8260006001614838565b5050565b8060020361411f5761411f8260006001614838565b806005036141b55761414d8260016002614838565b61415a8260036004614838565b6141678260016003614838565b6141748260006002614838565b6141818260026004614838565b61418e8260006003614838565b61419b8260006001614838565b6141a88260026003614838565b61411f8260016002614838565b6141c28260006001614838565b6141cf8260026003614838565b6141dc8260016003614838565b6141a88260006002614838565b600881101561436657806007036142ca576142078260016002614838565b6142148260036004614838565b6142218260056006614838565b61422e8260006002614838565b61423b8260046006614838565b6142488260036005614838565b6142558260026006614838565b6142628260016005614838565b61426f8260006004614838565b61427c8260026005614838565b6142898260006003614838565b6142968260026004614838565b6142a38260016003614838565b6142b08260006001614838565b6142bd8260026003614838565b61411f8260046005614838565b6142d78260006001614838565b6142e48260026003614838565b6142f18260046005614838565b6142fe8260016003614838565b61430b8260036005614838565b6143188260016003614838565b6143258260026004614838565b6143328260006002614838565b61433f8260026004614838565b61434c8260036004614838565b6143598260016002614838565b61411f8260026003614838565b806009036144995761437b8260016008614838565b6143888260026007614838565b6143958260036006614838565b6143a28260046005614838565b6143af8260016004614838565b6143bc8260056008614838565b6143c98260006002614838565b6143d68260066007614838565b6143e38260026006614838565b6143f08260076008614838565b6143fd8260006003614838565b61440a8260046005614838565b6144178260006001614838565b6144248260036005614838565b6144318260066007614838565b61443e8260026004614838565b61444b8260016003614838565b6144588260056007614838565b6144658260046006614838565b6144728260016002614838565b61447f8260036004614838565b61448c8260056006614838565b6142b08260076008614838565b6144a68260006007614838565b6144b38260016006614838565b6144c08260026005614838565b6144cd8260036004614838565b6144da8260006003614838565b6144e78260046007614838565b6144f48260016002614838565b6145018260056006614838565b61450e8260006001614838565b61451b8260026003614838565b6145288260046005614838565b6145358260066007614838565b6145428260036005614838565b61454f8260026004614838565b61455c8260016002614838565b6145698260036004614838565b6145768260056006614838565b6145838260026003614838565b6145908260046005614838565b61411f8260036004614838565b8151600090806145af576145af615854565b6145c1846000600184038660006148e5565b50949350505050565b81516000908190600181116145e1576145e1615854565b6145f3856000600184038760016148e5565b92509250505b9250929050565b60008082516041036146365760208301516040840151606085015160001a61462a878285856149b5565b945094505050506145f9565b506000905060026145f9565b600081600481111561465657614656615922565b0361465e5750565b600181600481111561467257614672615922565b036146bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a40565b60028160048111156146d3576146d3615922565b036147205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a40565b600381600481111561473457614734615922565b036147a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a40565b50565b6000601b84810b9084900b038082036147c7576000915050613a1b565b600083601b0b86601b0b136147e45785601b0b84601b0b036147ee565b83601b0b86601b0b035b9050806000036148045760001992505050613a1b565b600080831361481b5761481683615938565b61481d565b825b90508161482e6305f5e10083615970565b61352d91906153fb565b82818151811061484a5761484a615372565b602002602001015183838151811061486457614864615372565b602002602001015113156123bc5782818151811061488457614884615372565b602002602001015183838151811061489e5761489e615372565b60200260200101518484815181106148b8576148b8615372565b602002602001018584815181106148d1576148d1615372565b602090810291909101019190915252505050565b6000808486036148fa575082905060006149ab565b6000614907888888614a79565b90508085101561492a576149228888600184038860006148e5565b509250614947565b80851115614943576149228882600101888860006148e5565b8092505b83156149a957600183019150600283015b88518110156149a75788838151811061497357614973615372565b602002602001015189828151811061498d5761498d615372565b6020026020010151121561499f578092505b600101614958565b505b505b9550959350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156149ec5750600090506003614a70565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614a40573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614a6957600060019250925050614a70565b9150600090505b94509492505050565b6000818303614a89575081613a1b565b6000848481518110614a9d57614a9d615372565b6020026020010151905060008490508360010192505b855160019091019081108015614ae1575081868281518110614ad757614ad7615372565b6020026020010151125b614ab3575b82806001900393505081868481518110614b0257614b02615372565b602002602001015113614ae657828110614b8d57858381518110614b2857614b28615372565b6020026020010151868681518110614b4257614b42615372565b6020026020010151878781518110614b5c57614b5c615372565b60200260200101888681518110614b7557614b75615372565b60200260200101828152508281525050505050613a1b565b858381518110614b9f57614b9f615372565b6020026020010151868281518110614bb957614bb9615372565b6020026020010151878381518110614bd357614bd3615372565b60200260200101888681518110614bec57614bec615372565b602090810291909101019190915252614ab3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614c3f57614c3f614c00565b604052919050565b60006020808385031215614c5a57600080fd5b823567ffffffffffffffff80821115614c7257600080fd5b818501915085601f830112614c8657600080fd5b813581811115614c9857614c98614c00565b8060051b9150614ca9848301614c16565b8181529183018401918481019088841115614cc357600080fd5b938501935b83851015614ce157843582529385019390850190614cc8565b98975050505050505050565b6001600160a01b03811681146147a757600080fd5b600080600060608486031215614d1757600080fd5b8335614d2281614ced565b9250602084013591506040840135614d3981614ced565b809150509250925092565b60008083601f840112614d5657600080fd5b50813567ffffffffffffffff811115614d6e57600080fd5b6020830191508360208260051b85010111156145f957600080fd5b600080600080600060808688031215614da157600080fd5b8535614dac81614ced565b94506020860135935060408601359250606086013567ffffffffffffffff811115614dd657600080fd5b614de288828901614d44565b969995985093965092949392505050565b60008083601f840112614e0557600080fd5b50813567ffffffffffffffff811115614e1d57600080fd5b6020830191508360208285010111156145f957600080fd5b600080600080600080600080600060e08a8c031215614e5357600080fd5b8935985060208a0135614e6581614ced565b975060408a0135614e7581614ced565b965060608a0135614e8581614ced565b955060808a0135945060a08a013567ffffffffffffffff80821115614ea957600080fd5b614eb58d838e01614df3565b909650945060c08c0135915080821115614ece57600080fd5b50614edb8c828d01614df3565b915080935050809150509295985092959850929598565b600060208284031215614f0457600080fd5b5035919050565b60008060008060008060a08789031215614f2457600080fd5b8635614f2f81614ced565b955060208701359450604087013567ffffffffffffffff811115614f5257600080fd5b614f5e89828a01614df3565b9095509350506060870135614f7281614ced565b91506080870135614f8281614ced565b809150509295509295509295565b60008060208385031215614fa357600080fd5b823567ffffffffffffffff811115614fba57600080fd5b614fc685828601614d44565b90969095509350505050565b60005b83811015614fed578181015183820152602001614fd5565b50506000910152565b6000815180845261500e816020860160208601614fd2565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561506a578284038952615058848351614ff6565b98850198935090840190600101615040565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156150b2578151151584529284019290840190600101615094565b505050838103828501526150c68186615022565b9695505050505050565b602081526000613a1b6020830184614ff6565b6000602082840312156150f557600080fd5b8135613a1b81614ced565b6000806000806060858703121561511657600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561513b57600080fd5b61514787828801614df3565b95989497509550505050565b6000806000806080858703121561516957600080fd5b843561517481614ced565b935060208501359250604085013561518b81614ced565b9150606085013561519b81614ced565b939692955090935050565b600080604083850312156151b957600080fd5b50508035926020909101359150565b600080604083850312156151db57600080fd5b82356151e681614ced565b915060208301356151f681614ced565b809150509250929050565b80151581146147a757600080fd5b6000806040838503121561522257600080fd5b823561522d81614ced565b915060208301356151f681615201565b602081526000613a1b6020830184615022565b60008060008060006080868803121561526857600080fd5b853561527381614ced565b945060208601359350604086013567ffffffffffffffff81111561529657600080fd5b6152a288828901614df3565b90945092505060608601356152b681614ced565b809150509295509295909350565b6000806000806000606086880312156152dc57600080fd5b85359450602086013567ffffffffffffffff808211156152fb57600080fd5b61530789838a01614df3565b9096509450604088013591508082111561532057600080fd5b50614de288828901614df3565b6000806040838503121561534057600080fd5b823561534b81614ced565b946020939093013593505050565b60006020828403121561536b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261539f57600080fd5b83018035915067ffffffffffffffff8211156153ba57600080fd5b6020019150368190038213156145f957600080fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261540a5761540a6153cf565b500490565b80820180821115613aba57613aba6153e5565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b8183823760009101908152919050565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006001600160a01b03808a16835288602084015260c060408401526154d960c08401888a615486565b95811660608401529390931660808201527fffffffff000000000000000000000000000000000000000000000000000000009190911660a09091015250949350505050565b600181811c9082168061553257607f821691505b602082108103613a9c57634e487b7160e01b600052602260045260246000fd5b60006020828403121561556457600080fd5b8151613a1b81614ced565b60006020828403121561558157600080fd5b8151613a1b81615201565b60006001600160a01b03808916835287602084015260a060408401526155b660a084018789615486565b94166060830152507fffffffff0000000000000000000000000000000000000000000000000000000091909116608090910152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156156295783518352928401929184019160010161560d565b50909695505050505050565b60006101208b83526001600160a01b03808c1660208501528a604085015281606085015260008285015261014091508160808501526156778285018a8c615486565b97811660a085015295861660c084015250509190921660e08201527fffffffff000000000000000000000000000000000000000000000000000000009091166101009091015295945050505050565b87815260006001600160a01b03808916602084015287604084015260c060608401526156f660c084018789615486565b94811660808401529290921660a0909101525095945050505050565b600082601f83011261572357600080fd5b813567ffffffffffffffff81111561573d5761573d614c00565b615750601f8201601f1916602001614c16565b81815284602083860101111561576557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561579a57600080fd5b85356157a581614ced565b94506020860135935060408601359250606086013567ffffffffffffffff808211156157d057600080fd5b6157dc89838a01615712565b935060808801359150808211156157f257600080fd5b506157ff88828901615712565b9150509295509295909350565b84815283602082015282604082015260008251615830816060850160208701614fd2565b9190910160600195945050505050565b60008261584f5761584f6153cf565b500690565b634e487b7160e01b600052600160045260246000fd5b83815282602082015260008251615888816040850160208701614fd2565b91909101604001949350505050565b8581526bffffffffffffffffffffffff198560601b166020820152836034820152826054820152600082516158d3816074850160208701614fd2565b919091016074019695505050505050565b6000806000606084860312156158f957600080fd5b83359250602084013580601b0b811461591157600080fd5b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203615969576159696153e5565b5060000390565b8082028115828204841417613aba57613aba6153e556fea264697066735822122030025687622494406a490c720958f6642580bd0efe231135a08dc0d0c897b3bc64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106102e55760003560e01c8063796b89b911610184578063ac9650d8116100d6578063d7c0b8791161008a578063f8b2cb4f11610064578063f8b2cb4f1461092b578063fc3c1f8b14610953578063fce90be81461097357600080fd5b8063d7c0b879146108a0578063dc96acc8146108c0578063f83ea108146108e057600080fd5b8063b76f3c15116100bb578063b76f3c151461082c578063cfaf497114610860578063d10a13981461088057600080fd5b8063ac9650d8146107df578063b62408a31461080c57600080fd5b806391eed085116101385780639e14caa8116101125780639e14caa814610772578063a026658f14610792578063a5fc076f146107bf57600080fd5b806391eed085146106e7578063934cd0d614610707578063977cae011461072757600080fd5b80638cdd8844116101695780638cdd88441461067a5780638e6ddc271461069a5780638fca9ab9146106c757600080fd5b8063796b89b914610647578063810b3e111461065a57600080fd5b8063437b91161161023d57806351cff8d9116101f15780636ed93dd0116101cb5780636ed93dd0146105db5780637512449b146105f357806378ef72d71461062757600080fd5b806351cff8d91461055b5780635bc8a5c81461057b57806367a7cfb71461059b57600080fd5b8063481c6a7511610222578063481c6a75146104f25780634c8f1d8d146105265780634dcc19fe1461054857600080fd5b8063437b911614610497578063472c22f1146104c557600080fd5b8063206b48f41161029f5780633408e470116102795780633408e470146104515780633ade28281461046457806342cbb15c1461048457600080fd5b8063206b48f4146103d25780632ce010e3146103f257806332be8f0b1461041257600080fd5b806312acef12116102d057806312acef121461035157806318e99d90146103715780631ce9ae071461038657600080fd5b80629f2f3c146102ea578062aae33f14610331575b600080fd5b3480156102f657600080fd5b5061031e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561033d57600080fd5b5061031e61034c366004614c47565b6109bc565b34801561035d57600080fd5b5061031e61036c366004614d02565b610ad4565b61038461037f366004614d89565b610cca565b005b34801561039257600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610328565b3480156103de57600080fd5b506103846103ed366004614e35565b611376565b3480156103fe57600080fd5b5061038461040d366004614e35565b611692565b34801561041e57600080fd5b5061043261042d366004614ef2565b611711565b60408051601b9390930b835263ffffffff909116602083015201610328565b34801561045d57600080fd5b504661031e565b34801561047057600080fd5b5061031e61047f366004614f0b565b611844565b34801561049057600080fd5b504361031e565b3480156104a357600080fd5b506104b76104b2366004614f90565b611a54565b604051610328929190615077565b3480156104d157600080fd5b5061031e6104e0366004614ef2565b60056020526000908152604090205481565b3480156104fe57600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b34801561053257600080fd5b5061053b611bba565b60405161032891906150d0565b34801561055457600080fd5b504861031e565b34801561056757600080fd5b506103846105763660046150e3565b611c48565b34801561058757600080fd5b50610384610596366004615100565b611e6f565b3480156105a757600080fd5b506104326105b6366004614ef2565b600360205260009081526040902054601b81900b90600160e01b900463ffffffff1682565b3480156105e757600080fd5b5061031e6305f5e10081565b3480156105ff57600080fd5b5061031e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561063357600080fd5b50610384610642366004614f90565b611faa565b34801561065357600080fd5b504261031e565b34801561066657600080fd5b5061031e610675366004615153565b6123c1565b34801561068657600080fd5b50610432610695366004614c47565b6125c8565b3480156106a657600080fd5b5061031e6106b53660046150e3565b60066020526000908152604090205481565b3480156106d357600080fd5b5061031e6106e2366004614ef2565b612707565b3480156106f357600080fd5b506103846107023660046151a6565b61274c565b34801561071357600080fd5b50610384610722366004614f90565b612959565b34801561073357600080fd5b506107626107423660046151c8565b600160209081526000928352604080842090915290825290205460ff1681565b6040519015158152602001610328565b34801561077e57600080fd5b5061038461078d36600461520f565b612d54565b34801561079e57600080fd5b5061031e6107ad366004614ef2565b60026020526000908152604090205481565b3480156107cb57600080fd5b506104326107da366004614ef2565b612e0f565b3480156107eb57600080fd5b506107ff6107fa366004614f90565b612e87565b604051610328919061523d565b34801561081857600080fd5b50610432610827366004614ef2565b613008565b34801561083857600080fd5b506103ba7f000000000000000000000000000000000000000000000000000000000000000081565b34801561086c57600080fd5b5061043261087b366004614ef2565b6130e0565b34801561088c57600080fd5b5061031e61089b366004615250565b6131b2565b3480156108ac57600080fd5b506107626108bb3660046152c4565b6133b7565b3480156108cc57600080fd5b506107626108db3660046152c4565b613486565b3480156108ec57600080fd5b506104326108fb36600461532d565b6004602090815260009283526040808420909152908252902054601b81900b90600160e01b900463ffffffff1682565b34801561093757600080fd5b5061031e6109463660046150e3565b6001600160a01b03163190565b34801561095f57600080fd5b5061031e61096e366004614f0b565b613538565b34801561097f57600080fd5b5061053b6040518060400160405280601081526020017f64415049206e616d65207365747465720000000000000000000000000000000081525081565b60008060006109ca846125c8565b915091506109d784613780565b60008181526003602052604090205490935063ffffffff600160e01b909104811690821611610a495760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b60448201526064015b60405180910390fd5b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917fb7712be6248d021e8c56ac9613c09491354a4d0f4ad0b7db1a664b35be4b2349910160405180910390a25050919050565b6000816001600160a01b038116331480610b1157506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b610b545760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60408051606087901b6bffffffffffffffffffffffff19166020808301919091526034808301889052835180840390910181526054909201909252805191012060009060405163eebecf6960e01b81526001600160a01b0388811660048301526024820188905260a06044830152600060a48301528681166064830152630b7914b960e31b60848301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063eebecf699060c4016020604051808303816000875af1158015610c2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c529190615359565b60008181526007602090815260409182902084905581516001600160a01b038a811682529181018990529087168183015260608101839052336080820152905191945082917ffdb8fbecf8c307d3eb37e7eef7a6fb3f2c05c992afa63bef475c82a4c75ca14d9181900360a00190a250509392505050565b60408051466020808301919091526bffffffffffffffffffffffff1930606090811b82168486015289811b8216605485015233901b16606883015234607c830152609c820187905260bc820186905260dc8083018590528351808403909101815260fc9092019092528051910120819060018211156111625760008267ffffffffffffffff811115610d5e57610d5e614c00565b604051908082528060200260200182016040528015610d87578160200160208202803683370190505b50905060008367ffffffffffffffff811115610da557610da5614c00565b604051908082528060200260200182016040528015610dce578160200160208202803683370190505b5090506000805b85811015610f1d576000806000610e0f888c8c87818110610df857610df8615372565b9050602002810190610e0a9190615388565b6137b0565b92509250925082878581518110610e2857610e28615372565b602090810291909101015263ffffffff811615610ec85781601b0b868581518110610e5557610e55615372565b6020026020010181815250508063ffffffff16850194508b600003610ebc5760405162461bcd60e51b815260206004820152601b60248201527f4d6f7265207369676e617475726573207468616e2073746174656400000000006044820152606401610a40565b600019909b019a610f12565b600083815260036020526040902080548751601b9190910b90889087908110610ef357610ef3615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b505050600101610dd5565b508715610f6c5760405162461bcd60e51b815260206004820152601b60248201527f4c657373207369676e617475726573207468616e2073746174656400000000006044820152606401610a40565b6000610f7784613780565b90506000610f8587846153fb565b6001600160a01b038d16600090815260046020908152604080832086845290915290205490915063ffffffff600160e01b9091048116908216116110075760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b600061101285613949565b9050604051806040016040528082601b0b81526020018363ffffffff16815250600460008f6001600160a01b03166001600160a01b03168152602001908152602001600020600085815260200190815260200160002060008201518160000160006101000a8154816001600160e01b030219169083601b0b6001600160e01b03160217905550602082015181600001601c6101000a81548163ffffffff021916908363ffffffff16021790555090505034600660008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546110f7919061540f565b925050819055508b8d6001600160a01b0316847fdd29860e0772a39dea2ff0520d79f8efdffe48c903d6bbbc0c2cc65dc6568a7f848660405161114f929190601b9290920b825263ffffffff16602082015260400190565b60405180910390a450505050505061136d565b816001036113255760008060006111868488886000818110610df857610df8615372565b9250925092508063ffffffff166000036111d15760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b6001600160a01b038a16600090815260046020908152604080832086845290915290205463ffffffff600160e01b9091048116908216116112505760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b815263ffffffff80841660208084019182526001600160a01b038f166000818152600483528681208a8252835286812095519351909416600160e01b026001600160e01b03909316929092179093558152600690915290812080543492906112c790849061540f565b909155505060408051601b84900b815263ffffffff831660208201528a916001600160a01b038d169186917fc856aaa4e639403f366ad68f07eb69bad4c044a35b0369c4ef1ea3a427a6a0ee910160405180910390a450505061136d565b60405162461bcd60e51b815260206004820152601460248201527f537065636966696564206e6f20426561636f6e730000000000000000000000006044820152606401610a40565b50505050505050565b8461138081613aa2565b6113c25760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b6040516bffffffffffffffffffffffff1960608b811b821660208401528a811b8216603484015289901b166048820152605c0160408051601f19818403018152918152815160209283012060008d81526008909352912054146114675760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f74207265676973746572656400000000006044820152606401610a40565b876001600160a01b0316896001600160a01b03160361157057886001600160a01b031661152084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161151a92506114ff91508f908c903390602001928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60405160208183030381529060405280519060200120613ac0565b90613afb565b6001600160a01b03161461156b5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b61161b565b886001600160a01b03166115d084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060405161151a92506114ff91508f908c9033908d908d90602001615422565b6001600160a01b03161461161b5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b60008a8152600260205260408120549061163782898989613b1f565b604080518e8152601b83900b602082015263ffffffff8b1681830152905191925083917f2b85d71813342fd0091d4573a5f78e244c2133755e470943c33a6dbf3cf9c15d9181900360600190a2505050505050505050505050565b6116a161034c84860186614c47565b84846040516116b192919061545c565b6040518091039020146117065760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b505050505050505050565b60008181526005602052604081205481908061176f5760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610a40565b336000908152600460209081526040808320848452825280832060039092529091208054825463ffffffff600160e01b928390048116929091041611156117cd578154601b81900b9550600160e01b900463ffffffff1693506117e6565b8054601b81900b9550600160e01b900463ffffffff1693505b60008463ffffffff161161183c5760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b505050915091565b6000816001600160a01b03811633148061188157506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6118c45760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60008787876040516020016118db9392919061546c565b60408051808303601f1901815282825280516020918201206bffffffffffffffffffffffff1960608e901b1682850152603480850182905283518086039091018152605485019384905280519201919091206353f0642f60e11b9092529250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a7e0c85e9061198d908d908d908d908d908d908d90630b7914b960e31b906058016154af565b6020604051808303816000875af11580156119ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d09190615359565b60008181526007602090815260409182902084905581516001600160a01b038e81168252918101869052898216818401529088166060820152608081018390523360a0820152905191955082917f0f217d153669e569a267b32f8ddbbb65c09cb35e7a51ba97bea2cdea05992d089181900360c00190a25050509695505050505050565b606080828067ffffffffffffffff811115611a7157611a71614c00565b604051908082528060200260200182016040528015611a9a578160200160208202803683370190505b5092508067ffffffffffffffff811115611ab657611ab6614c00565b604051908082528060200260200182016040528015611ae957816020015b6060815260200190600190039081611ad45790505b50915060005b81811015611bb15730868683818110611b0a57611b0a615372565b9050602002810190611b1c9190615388565b604051611b2a92919061545c565b600060405180830381855af49150503d8060008114611b65576040519150601f19603f3d011682016040523d82523d6000602084013e611b6a565b606091505b50858381518110611b7d57611b7d615372565b60200260200101858481518110611b9657611b96615372565b60209081029190910101919091529015159052600101611aef565b50509250929050565b60008054611bc79061551e565b80601f0160208091040260200160405190810160405280929190818152602001828054611bf39061551e565b8015611c405780601f10611c1557610100808354040283529160200191611c40565b820191906000526020600020905b815481529060010190602001808311611c2357829003601f168201915b505050505081565b6000816001600160a01b0316630e15999d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190615552565b90506001600160a01b038116611d045760405162461bcd60e51b815260206004820152601860248201527f42656e65666963696172792061646472657373207a65726f00000000000000006044820152606401610a40565b6001600160a01b03821660009081526006602052604081205490819003611d6d5760405162461bcd60e51b815260206004820152601660248201527f4f45562070726f78792062616c616e6365207a65726f000000000000000000006044820152606401610a40565b6001600160a01b0383811660008181526006602090815260408083209290925581519386168452830184905290917f0472be967f9a37138dfea1875af44784cafb79f92044ab33d7d6958eddd9ca6c910160405180910390a26000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611e13576040519150601f19603f3d011682016040523d82523d6000602084013e611e18565b606091505b5050905080611e695760405162461bcd60e51b815260206004820152601360248201527f5769746864726177616c207265766572746564000000000000000000000000006044820152606401610a40565b50505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611ee75760405162461bcd60e51b815260206004820152601b60248201527f53656e646572206e6f74204169726e6f64652070726f746f636f6c00000000006044820152606401610a40565b82611ef181613aa2565b611f335760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b600085815260076020526040812080549082905590611f5482878787613b1f565b60408051898152601b83900b602082015263ffffffff891681830152905191925083917fbf747faf738dbfb7e8b225265a7d7afd921e2ddd91b2bc5b87984d12d41c8b359181900360600190a250505050505050565b80600181111561225b5760008167ffffffffffffffff811115611fcf57611fcf614c00565b604051908082528060200260200182016040528015611ff8578160200160208202803683370190505b50905060008267ffffffffffffffff81111561201657612016614c00565b60405190808252806020026020018201604052801561203f578160200160208202803683370190505b5090506000805b8481101561213657600080600061207f8a8a8681811061206857612068615372565b905060200281019061207a9190615388565b613c1b565b9250925092508287858151811061209857612098615372565b602090810291909101015263ffffffff8116156120e15781601b0b8685815181106120c5576120c5615372565b6020026020010181815250508063ffffffff168501945061212b565b600083815260036020526040902080548751601b9190910b9088908790811061210c5761210c615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b505050600101612046565b50600061214284613780565b9050600061215086846153fb565b60008381526003602052604090205490915063ffffffff600160e01b9091048116908216116121bd5760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b60006121c885613949565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008b81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925084917fb34747dc40d9c985b4857c2955fec7a8f34d88bc06da72f4331979575880040791015b60405180910390a2505050505050505050565b8060010361132557600080600061227e8686600081811061206857612068615372565b9250925092508063ffffffff166000036122c95760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b60008381526003602052604090205463ffffffff600160e01b9091048116908216116123335760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917f1ffdb573afe7273932e253bc4b8a17b9da4d37d7219ba05e464358975b36efb791015b60405180910390a25050505b505050565b6000816001600160a01b0381163314806123fe57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6124415760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60408051606088901b6bffffffffffffffffffffffff1916602080830191909152603480830189905283518084039091018152605490920190925280519101206000906040516353f0642f60e11b81526001600160a01b0389811660048301526024820189905260c06044830152600060c483015287811660648301528681166084830152630b7914b960e31b60a48301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063a7e0c85e9060e4016020604051808303816000875af1158015612523573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125479190615359565b60008181526007602090815260409182902084905581516001600160a01b038b811682529181018a9052888216818401529087166060820152608081018390523360a0820152905191945082917f0f217d153669e569a267b32f8ddbbb65c09cb35e7a51ba97bea2cdea05992d089181900360c00190a25050949350505050565b805160009081906001811161261f5760405162461bcd60e51b815260206004820152601f60248201527f537065636966696564206c657373207468616e2074776f20426561636f6e73006044820152606401610a40565b60008167ffffffffffffffff81111561263a5761263a614c00565b604051908082528060200260200182016040528015612663578160200160208202803683370190505b5090506000805b838110156126e75760006003600089848151811061268a5761268a615372565b602090810291909101810151825281019190915260400160002080548551919250601b0b908590849081106126c1576126c1615372565b602090810291909101015254600160e01b900463ffffffff16919091019060010161266a565b506126f182613949565b94506126fd83826153fb565b9350505050915091565b6000600560008360405160200161272091815260200190565b604051602081830303815290604052805190602001208152602001908152602001600020549050919050565b816127995760405162461bcd60e51b815260206004820152600e60248201527f64415049206e616d65207a65726f0000000000000000000000000000000000006044820152606401610a40565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148061289257506040517f91d148540000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000060048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906391d1485490604401602060405180830381865afa15801561286e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612892919061556f565b6128de5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f74207365742064415049206e616d6500000000006044820152606401610a40565b8060056000846040516020016128f691815260200190565b60408051601f1981840301815291815281516020928301208352828201939093529082016000209290925551338152839183917ff3a9aac9b6ac0f842cb5d9b3491cd5fc1b6a6778d97fd9529f587339865294f591015b60405180910390a35050565b806001811115612bfb5760008167ffffffffffffffff81111561297e5761297e614c00565b6040519080825280602002602001820160405280156129a7578160200160208202803683370190505b50905060008267ffffffffffffffff8111156129c5576129c5614c00565b6040519080825280602002602001820160405280156129ee578160200160208202803683370190505b5090506000805b84811015612ae5576000806000612a2e8a8a86818110612a1757612a17615372565b9050602002810190612a299190615388565b613db0565b92509250925082878581518110612a4757612a47615372565b602090810291909101015263ffffffff811615612a905781601b0b868581518110612a7457612a74615372565b6020026020010181815250508063ffffffff1685019450612ada565b600083815260036020526040902080548751601b9190910b90889087908110612abb57612abb615372565b602090810291909101015254600160e01b900463ffffffff1694909401935b5050506001016129f5565b506000612af184613780565b90506000612aff86846153fb565b60008381526003602052604090205490915063ffffffff600160e01b909104811690821611612b6c5760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b6000612b7785613949565b604080518082018252601b83900b80825263ffffffff868116602080850182815260008b81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915291925084917fe8a26d41600714ff17db64ddb6eb7590f25d6e1e5fa1adf35aa3a5f5b9d694ed9101612248565b80600103611325576000806000612c1e86866000818110612a1757612a17615372565b9250925092508063ffffffff16600003612c695760405162461bcd60e51b815260206004820152600c60248201526b4d697373696e67206461746160a01b6044820152606401610a40565b60008381526003602052604090205463ffffffff600160e01b909104811690821611612cd35760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b84900b80825263ffffffff848116602080850182815260008a81526003835287902095519051909316600160e01b026001600160e01b0390931692909217909355835191825281019190915284917f218ec204122699f75f4032ddef3df77e5072a4be8aa4d1867bdc897e1955f37991016123b0565b6001600160a01b038216612daa5760405162461bcd60e51b815260206004820152601560248201527f55706461746520726571756573746572207a65726f00000000000000000000006044820152606401610a40565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917fba239f737a4075f5efb0d649e16cd7d2b1978690876b079dab642f077050b279910161294d565b60008181526003602052604090208054601b81900b91600160e01b90910463ffffffff169081612e815760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b50915091565b6060818067ffffffffffffffff811115612ea357612ea3614c00565b604051908082528060200260200182016040528015612ed657816020015b6060815260200190600190039081612ec15790505b50915060005b8181101561300057600030868684818110612ef957612ef9615372565b9050602002810190612f0b9190615388565b604051612f1992919061545c565b600060405180830381855af49150503d8060008114612f54576040519150601f19603f3d011682016040523d82523d6000602084013e612f59565b606091505b50858481518110612f6c57612f6c615372565b6020908102919091010152905080612ff7576000848381518110612f9257612f92615372565b60200260200101519050600081511115612faf5780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610a40565b50600101612edc565b505092915050565b6000818152600560205260408120548190806130665760405162461bcd60e51b815260206004820152601160248201527f64415049206e616d65206e6f74207365740000000000000000000000000000006044820152606401610a40565b60008181526003602052604090208054601b81900b9450600160e01b900463ffffffff169250826130d95760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b5050915091565b336000908152600460209081526040808320848452825280832060039092528220805482548493929163ffffffff600160e01b918290048116919092049091161115613143578154601b81900b9450600160e01b900463ffffffff16925061315c565b8054601b81900b9450600160e01b900463ffffffff1692505b60008363ffffffff16116130d95760405162461bcd60e51b815260206004820152601960248201527f446174612066656564206e6f7420696e697469616c697a6564000000000000006044820152606401610a40565b6000816001600160a01b0381163314806131ef57506001600160a01b038116600090815260016020908152604080832033845290915290205460ff165b6132325760405162461bcd60e51b815260206004820152601460248201527314d95b99195c881b9bdd081c195c9b5a5d1d195960621b6044820152606401610a40565b60008686866040516020016132499392919061546c565b60408051808303601f1901815282825280516020918201206bffffffffffffffffffffffff1960608d901b16828501526034808501829052835180860390910181526054850193849052805192019190912063eebecf6960e01b9092529250907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eebecf69906132f9908c908c908c908c908c90630b7914b960e31b9060580161558c565b6020604051808303816000875af1158015613318573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061333c9190615359565b60008181526007602090815260409182902084905581516001600160a01b038d811682529181018690529088168183015260608101839052336080820152905191955082917ffdb8fbecf8c307d3eb37e7eef7a6fb3f2c05c992afa63bef475c82a4c75ca14d9181900360a00190a250505095945050505050565b6000806133c685870187614c47565b905085856040516133d892919061545c565b6040518091039020816040516020016133f191906155f1565b60405160208183030381529060405280519060200120146134545760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b600080613460836125c8565b9150915061347961347084613780565b83838989613e93565b9998505050505050505050565b600085815260026020526040812054806134e25760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206e6f74207265676973746572656400000000006044820152606401610a40565b61352d8161352588888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f8892505050565b428787613e93565b979650505050505050565b60006001600160a01b0383166135905760405162461bcd60e51b815260206004820152601460248201527f52656c617965722061646472657373207a65726f0000000000000000000000006044820152606401610a40565b6001600160a01b0382166135e65760405162461bcd60e51b815260206004820152601460248201527f53706f6e736f722061646472657373207a65726f0000000000000000000000006044820152606401610a40565b60405161362790469089908990899089908990899030907f206b48f40000000000000000000000000000000000000000000000000000000090602001615635565b60408051601f198184030181529181528151602092830120600081815260089093529120549091501561369c5760405162461bcd60e51b815260206004820152601f60248201527f537562736372697074696f6e20616c72656164792072656769737465726564006044820152606401610a40565b604080516bffffffffffffffffffffffff1960608a811b8216602080850182905288831b841660348601529187901b90921660488401528351808403603c018152605c8401855280519082012060008681526008835285812091909155607c84019290925260908084018b90528451808503909101815260b0909301808552835193820193909320858352600290915292902082905581907f39f2437664bc2ef14dea31757145f683a7c4b0cfe8a520f186470bc7c4a1321d9061376d9085908c908c908c908c908c908c906156c6565b60405180910390a2509695505050505050565b60008160405160200161379391906155f1565b604051602081830303815290604052805190602001209050919050565b6000808080808080806137c5898b018b615782565b9450945094509450945061381b85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b9750805160000361386e578151156138695760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b61393b565b846001600160a01b03166138968261151a8e8888886040516020016114ff949392919061580c565b6001600160a01b0316146138e15760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b6138ea82613f88565b96506138f583613aa2565b6139375760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b8295505b505050505093509350939050565b805160009060098111613a225761395f8361408b565b61396a600282615840565b60010361399d578261397d6002836153fb565b8151811061398d5761398d615372565b6020026020010151915050919050565b806000036139ad576139ad615854565b613a1b8360016002840403815181106139c8576139c8615372565b602002602001015184600284816139e1576139e16153cf565b04815181106139f2576139f2615372565b6020026020010151600182811d82821d01838316919091160160ff81901c838318160192915050565b9392505050565b613a2d600282615840565b600103613a49578261397d81613a446002856153fb565b61459d565b600080613a5c85600160028604036145ca565b8092508193505050613a93858381518110613a7957613a79615372565b60200260200101518683815181106139f2576139f2615372565b95945050505050565b50919050565b60004282610e1001118015613aba5750426103840182105b92915050565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01613793565b6000806000613b0a8585614600565b91509150613b1781614642565b509392505050565b6000613b6083838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613f8892505050565b600086815260036020526040902054909150600160e01b900463ffffffff168411613bc95760405162461bcd60e51b81526020600482015260196024820152780446f6573206e6f74207570646174652074696d657374616d7603c1b6044820152606401610a40565b604080518082018252601b83900b815263ffffffff95861660208083019182526000988952600390529190962095519051909416600160e01b026001600160e01b039094169390931790935550919050565b600080808080808080613c30898b018b615782565b94509450945094509450613c8685856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b97508051600003613cd957815115613cd45760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b613da4565b846001600160a01b0316613cff8261151a8787876040516020016114ff9392919061586a565b6001600160a01b031614613d4a5760405162461bcd60e51b81526020600482015260126024820152710a6d2cedcc2e8eae4ca40dad2e6dac2e8c6d60731b6044820152606401610a40565b613d5382613f88565b9650613d5e83613aa2565b613da05760405162461bcd60e51b8152602060048201526013602482015272151a5b595cdd185b5c081b9bdd081d985b1a59606a1b6044820152606401610a40565b8295505b50505050509250925092565b600080808080808080613dc5898b018b615782565b94509450945094509450613e1b85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b97508051600003613e6957815115613cd45760405162461bcd60e51b81526020600482015260116024820152704d697373696e67207369676e617475726560781b6044820152606401610a40565b846001600160a01b0316613cff8261151a46308989896040516020016114ff959493929190615897565b600060608214613ee55760405162461bcd60e51b815260206004820152601a60248201527f496e636f727265637420706172616d65746572206c656e6774680000000000006044820152606401610a40565b60008080613ef5858701876158e4565b60008c81526003602052604090208054939650919450925090600160e01b900463ffffffff16158015613f2d575063ffffffff881615155b80613f5257508315801590613f52575080548490613f4f90601b0b8b866147aa565b10155b80613f7a57508115801590613f7a5750805463ffffffff808a16600160e01b90920416830111155b9a9950505050505050505050565b60008151602014613fdb5760405162461bcd60e51b815260206004820152601760248201527f44617461206c656e677468206e6f7420636f72726563740000000000000000006044820152606401610a40565b600082806020019051810190613ff19190615359565b90507fffffffff80000000000000000000000000000000000000000000000000000000811280159061403f57507b7fffffffffffffffffffffffffffffffffffffffffffffffffffffff8113155b613aba5760405162461bcd60e51b815260206004820152601760248201527f56616c7565207479706563617374696e67206572726f720000000000000000006044820152606401610a40565b805160098111156140de5760405162461bcd60e51b815260206004820152601660248201527f417272617920746f6f206c6f6e6720746f20736f7274000000000000000000006044820152606401610a40565b60068110156141e95760048110156141385780600303614123576141058260006001614838565b6141128260016002614838565b61411f8260006001614838565b5050565b8060020361411f5761411f8260006001614838565b806005036141b55761414d8260016002614838565b61415a8260036004614838565b6141678260016003614838565b6141748260006002614838565b6141818260026004614838565b61418e8260006003614838565b61419b8260006001614838565b6141a88260026003614838565b61411f8260016002614838565b6141c28260006001614838565b6141cf8260026003614838565b6141dc8260016003614838565b6141a88260006002614838565b600881101561436657806007036142ca576142078260016002614838565b6142148260036004614838565b6142218260056006614838565b61422e8260006002614838565b61423b8260046006614838565b6142488260036005614838565b6142558260026006614838565b6142628260016005614838565b61426f8260006004614838565b61427c8260026005614838565b6142898260006003614838565b6142968260026004614838565b6142a38260016003614838565b6142b08260006001614838565b6142bd8260026003614838565b61411f8260046005614838565b6142d78260006001614838565b6142e48260026003614838565b6142f18260046005614838565b6142fe8260016003614838565b61430b8260036005614838565b6143188260016003614838565b6143258260026004614838565b6143328260006002614838565b61433f8260026004614838565b61434c8260036004614838565b6143598260016002614838565b61411f8260026003614838565b806009036144995761437b8260016008614838565b6143888260026007614838565b6143958260036006614838565b6143a28260046005614838565b6143af8260016004614838565b6143bc8260056008614838565b6143c98260006002614838565b6143d68260066007614838565b6143e38260026006614838565b6143f08260076008614838565b6143fd8260006003614838565b61440a8260046005614838565b6144178260006001614838565b6144248260036005614838565b6144318260066007614838565b61443e8260026004614838565b61444b8260016003614838565b6144588260056007614838565b6144658260046006614838565b6144728260016002614838565b61447f8260036004614838565b61448c8260056006614838565b6142b08260076008614838565b6144a68260006007614838565b6144b38260016006614838565b6144c08260026005614838565b6144cd8260036004614838565b6144da8260006003614838565b6144e78260046007614838565b6144f48260016002614838565b6145018260056006614838565b61450e8260006001614838565b61451b8260026003614838565b6145288260046005614838565b6145358260066007614838565b6145428260036005614838565b61454f8260026004614838565b61455c8260016002614838565b6145698260036004614838565b6145768260056006614838565b6145838260026003614838565b6145908260046005614838565b61411f8260036004614838565b8151600090806145af576145af615854565b6145c1846000600184038660006148e5565b50949350505050565b81516000908190600181116145e1576145e1615854565b6145f3856000600184038760016148e5565b92509250505b9250929050565b60008082516041036146365760208301516040840151606085015160001a61462a878285856149b5565b945094505050506145f9565b506000905060026145f9565b600081600481111561465657614656615922565b0361465e5750565b600181600481111561467257614672615922565b036146bf5760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610a40565b60028160048111156146d3576146d3615922565b036147205760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610a40565b600381600481111561473457614734615922565b036147a75760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610a40565b50565b6000601b84810b9084900b038082036147c7576000915050613a1b565b600083601b0b86601b0b136147e45785601b0b84601b0b036147ee565b83601b0b86601b0b035b9050806000036148045760001992505050613a1b565b600080831361481b5761481683615938565b61481d565b825b90508161482e6305f5e10083615970565b61352d91906153fb565b82818151811061484a5761484a615372565b602002602001015183838151811061486457614864615372565b602002602001015113156123bc5782818151811061488457614884615372565b602002602001015183838151811061489e5761489e615372565b60200260200101518484815181106148b8576148b8615372565b602002602001018584815181106148d1576148d1615372565b602090810291909101019190915252505050565b6000808486036148fa575082905060006149ab565b6000614907888888614a79565b90508085101561492a576149228888600184038860006148e5565b509250614947565b80851115614943576149228882600101888860006148e5565b8092505b83156149a957600183019150600283015b88518110156149a75788838151811061497357614973615372565b602002602001015189828151811061498d5761498d615372565b6020026020010151121561499f578092505b600101614958565b505b505b9550959350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156149ec5750600090506003614a70565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015614a40573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116614a6957600060019250925050614a70565b9150600090505b94509492505050565b6000818303614a89575081613a1b565b6000848481518110614a9d57614a9d615372565b6020026020010151905060008490508360010192505b855160019091019081108015614ae1575081868281518110614ad757614ad7615372565b6020026020010151125b614ab3575b82806001900393505081868481518110614b0257614b02615372565b602002602001015113614ae657828110614b8d57858381518110614b2857614b28615372565b6020026020010151868681518110614b4257614b42615372565b6020026020010151878781518110614b5c57614b5c615372565b60200260200101888681518110614b7557614b75615372565b60200260200101828152508281525050505050613a1b565b858381518110614b9f57614b9f615372565b6020026020010151868281518110614bb957614bb9615372565b6020026020010151878381518110614bd357614bd3615372565b60200260200101888681518110614bec57614bec615372565b602090810291909101019190915252614ab3565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614c3f57614c3f614c00565b604052919050565b60006020808385031215614c5a57600080fd5b823567ffffffffffffffff80821115614c7257600080fd5b818501915085601f830112614c8657600080fd5b813581811115614c9857614c98614c00565b8060051b9150614ca9848301614c16565b8181529183018401918481019088841115614cc357600080fd5b938501935b83851015614ce157843582529385019390850190614cc8565b98975050505050505050565b6001600160a01b03811681146147a757600080fd5b600080600060608486031215614d1757600080fd5b8335614d2281614ced565b9250602084013591506040840135614d3981614ced565b809150509250925092565b60008083601f840112614d5657600080fd5b50813567ffffffffffffffff811115614d6e57600080fd5b6020830191508360208260051b85010111156145f957600080fd5b600080600080600060808688031215614da157600080fd5b8535614dac81614ced565b94506020860135935060408601359250606086013567ffffffffffffffff811115614dd657600080fd5b614de288828901614d44565b969995985093965092949392505050565b60008083601f840112614e0557600080fd5b50813567ffffffffffffffff811115614e1d57600080fd5b6020830191508360208285010111156145f957600080fd5b600080600080600080600080600060e08a8c031215614e5357600080fd5b8935985060208a0135614e6581614ced565b975060408a0135614e7581614ced565b965060608a0135614e8581614ced565b955060808a0135945060a08a013567ffffffffffffffff80821115614ea957600080fd5b614eb58d838e01614df3565b909650945060c08c0135915080821115614ece57600080fd5b50614edb8c828d01614df3565b915080935050809150509295985092959850929598565b600060208284031215614f0457600080fd5b5035919050565b60008060008060008060a08789031215614f2457600080fd5b8635614f2f81614ced565b955060208701359450604087013567ffffffffffffffff811115614f5257600080fd5b614f5e89828a01614df3565b9095509350506060870135614f7281614ced565b91506080870135614f8281614ced565b809150509295509295509295565b60008060208385031215614fa357600080fd5b823567ffffffffffffffff811115614fba57600080fd5b614fc685828601614d44565b90969095509350505050565b60005b83811015614fed578181015183820152602001614fd5565b50506000910152565b6000815180845261500e816020860160208601614fd2565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b8581101561506a578284038952615058848351614ff6565b98850198935090840190600101615040565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b828110156150b2578151151584529284019290840190600101615094565b505050838103828501526150c68186615022565b9695505050505050565b602081526000613a1b6020830184614ff6565b6000602082840312156150f557600080fd5b8135613a1b81614ced565b6000806000806060858703121561511657600080fd5b8435935060208501359250604085013567ffffffffffffffff81111561513b57600080fd5b61514787828801614df3565b95989497509550505050565b6000806000806080858703121561516957600080fd5b843561517481614ced565b935060208501359250604085013561518b81614ced565b9150606085013561519b81614ced565b939692955090935050565b600080604083850312156151b957600080fd5b50508035926020909101359150565b600080604083850312156151db57600080fd5b82356151e681614ced565b915060208301356151f681614ced565b809150509250929050565b80151581146147a757600080fd5b6000806040838503121561522257600080fd5b823561522d81614ced565b915060208301356151f681615201565b602081526000613a1b6020830184615022565b60008060008060006080868803121561526857600080fd5b853561527381614ced565b945060208601359350604086013567ffffffffffffffff81111561529657600080fd5b6152a288828901614df3565b90945092505060608601356152b681614ced565b809150509295509295909350565b6000806000806000606086880312156152dc57600080fd5b85359450602086013567ffffffffffffffff808211156152fb57600080fd5b61530789838a01614df3565b9096509450604088013591508082111561532057600080fd5b50614de288828901614df3565b6000806040838503121561534057600080fd5b823561534b81614ced565b946020939093013593505050565b60006020828403121561536b57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261539f57600080fd5b83018035915067ffffffffffffffff8211156153ba57600080fd5b6020019150368190038213156145f957600080fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008261540a5761540a6153cf565b500490565b80820180821115613aba57613aba6153e5565b8581528460208201526bffffffffffffffffffffffff198460601b1660408201528183605483013760009101605401908152949350505050565b8183823760009101908152919050565b838152818360208301376000910160200190815292915050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006001600160a01b03808a16835288602084015260c060408401526154d960c08401888a615486565b95811660608401529390931660808201527fffffffff000000000000000000000000000000000000000000000000000000009190911660a09091015250949350505050565b600181811c9082168061553257607f821691505b602082108103613a9c57634e487b7160e01b600052602260045260246000fd5b60006020828403121561556457600080fd5b8151613a1b81614ced565b60006020828403121561558157600080fd5b8151613a1b81615201565b60006001600160a01b03808916835287602084015260a060408401526155b660a084018789615486565b94166060830152507fffffffff0000000000000000000000000000000000000000000000000000000091909116608090910152949350505050565b6020808252825182820181905260009190848201906040850190845b818110156156295783518352928401929184019160010161560d565b50909695505050505050565b60006101208b83526001600160a01b03808c1660208501528a604085015281606085015260008285015261014091508160808501526156778285018a8c615486565b97811660a085015295861660c084015250509190921660e08201527fffffffff000000000000000000000000000000000000000000000000000000009091166101009091015295945050505050565b87815260006001600160a01b03808916602084015287604084015260c060608401526156f660c084018789615486565b94811660808401529290921660a0909101525095945050505050565b600082601f83011261572357600080fd5b813567ffffffffffffffff81111561573d5761573d614c00565b615750601f8201601f1916602001614c16565b81815284602083860101111561576557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561579a57600080fd5b85356157a581614ced565b94506020860135935060408601359250606086013567ffffffffffffffff808211156157d057600080fd5b6157dc89838a01615712565b935060808801359150808211156157f257600080fd5b506157ff88828901615712565b9150509295509295909350565b84815283602082015282604082015260008251615830816060850160208701614fd2565b9190910160600195945050505050565b60008261584f5761584f6153cf565b500690565b634e487b7160e01b600052600160045260246000fd5b83815282602082015260008251615888816040850160208701614fd2565b91909101604001949350505050565b8581526bffffffffffffffffffffffff198560601b166020820152836034820152826054820152600082516158d3816074850160208701614fd2565b919091016074019695505050505050565b6000806000606084860312156158f957600080fd5b83359250602084013580601b0b811461591157600080fd5b929592945050506040919091013590565b634e487b7160e01b600052602160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203615969576159696153e5565b5060000390565b8082028115828204841417613aba57613aba6153e556fea264697066735822122030025687622494406a490c720958f6642580bd0efe231135a08dc0d0c897b3bc64736f6c63430008110033",
  "devdoc": {
    "details": "DapiServer is a PSP requester contract. Unlike RRP, which is implemented as a central contract, PSP implementation is built into the requester for optimization. Accordingly, the checks that are not required are omitted. Some examples: - While executing a PSP Beacon update, the condition is not verified because Beacon updates where the condition returns `false` (e.g., the on-chain value is already close to the actual value) are not harmful, and are even desirable (\"any update is a good update\"). - PSP Beacon set update subscription IDs are not verified, as the Airnode/relayer cannot be made to \"misreport a Beacon set update\" by spoofing a subscription ID. - While executing a PSP Beacon set update, even the signature is not checked because this is a purely keeper job that does not require off-chain data. Similar to Beacon updates, any Beacon set update is welcome.",
    "kind": "dev",
    "methods": {
      "aggregateBeacons(bytes32[])": {
        "details": "Tha aggregation of Beacons may have a different value than the respective Beacon set, e.g., because the Beacon set has been updated using signed data",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "timestamp": "Aggregation timestamp",
          "value": "Aggregation value"
        }
      },
      "conditionPspBeaconSetUpdate(bytes32,bytes,bytes)": {
        "details": "`endpointOrTemplateId` in the respective Subscription is expected to be zero, which means the `parameters` field of the Subscription will be forwarded to this function as `data`. This field should be the Beacon ID array encoded in contract ABI.",
        "params": {
          "conditionParameters": "Subscription condition parameters. This includes multiple ABI-encoded values, see `checkUpdateCondition()`.",
          "data": "Fulfillment data (array of Beacon IDs, i.e., `bytes32[]` encoded in contract ABI)",
          "subscriptionId": "Subscription ID"
        },
        "returns": {
          "_0": "If the Beacon set update subscription should be fulfilled"
        }
      },
      "conditionPspBeaconUpdate(bytes32,bytes,bytes)": {
        "details": "`conditionParameters` are specified within the `conditions` field of a Subscription",
        "params": {
          "conditionParameters": "Subscription condition parameters. This includes multiple ABI-encoded values, see `checkUpdateCondition()`.",
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "subscriptionId": "Subscription ID"
        },
        "returns": {
          "_0": "If the Beacon update subscription should be fulfilled"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description",
          "_airnodeProtocol": "AirnodeProtocol contract address",
          "_manager": "Manager address"
        }
      },
      "dapiNameToDataFeedId(bytes32)": {
        "params": {
          "dapiName": "dAPI name"
        },
        "returns": {
          "_0": "Data feed ID"
        }
      },
      "fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "details": "Similar to `conditionPspBeaconSetUpdate()`, if `endpointOrTemplateId` of the Subscription is zero, its `parameters` field will be forwarded to `data` here, which is expect to be contract ABI-encoded array of Beacon IDs. It does not make sense for this subscription to be relayed, as there is no external data being delivered. Nevertheless, this is allowed for the lack of a reason to prevent it. Even though the consistency of the arguments are not being checked, if a standard implementation of Airnode is being used, these can be expected to be correct. Either way, the assumption is that it does not matter for the purposes of a Beacon set update subscription.",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "relayer": "Relayer address",
          "signature": "Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet",
          "sponsor": "Sponsor address",
          "subscriptionId": "Subscription ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "details": "There is no need to verify that `conditionPspBeaconUpdate()` returns `true` because any Beacon update is a good Beacon update",
        "params": {
          "airnode": "Airnode address",
          "data": "Fulfillment data (a single `int256` encoded in contract ABI)",
          "relayer": "Relayer address",
          "signature": "Subscription ID, timestamp, sponsor wallet address (and fulfillment data if the relayer is not the Airnode) signed by the Airnode wallet",
          "sponsor": "Sponsor address",
          "subscriptionId": "Subscription ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "fulfillRrpBeaconUpdate(bytes32,uint256,bytes)": {
        "params": {
          "data": "Fulfillment data (an `int256` encoded in contract ABI)",
          "requestId": "Request ID",
          "timestamp": "Timestamp used in the signature"
        }
      },
      "getBalance(address)": {
        "params": {
          "account": "Account address"
        },
        "returns": {
          "_0": "Account balance"
        }
      },
      "getBlockBasefee()": {
        "returns": {
          "_0": "Current block basefee"
        }
      },
      "getBlockNumber()": {
        "returns": {
          "_0": "Current block number"
        }
      },
      "getBlockTimestamp()": {
        "returns": {
          "_0": "Current block timestamp"
        }
      },
      "getChainId()": {
        "returns": {
          "_0": "Chain ID"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "readDataFeedWithDapiNameHash(bytes32)": {
        "params": {
          "dapiNameHash": "dAPI name hash"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithDapiNameHashAsOevProxy(bytes32)": {
        "params": {
          "dapiNameHash": "dAPI name hash"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithId(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "readDataFeedWithIdAsOevProxy(bytes32)": {
        "params": {
          "dataFeedId": "Data feed ID"
        },
        "returns": {
          "timestamp": "Data feed timestamp",
          "value": "Data feed value"
        }
      },
      "registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)": {
        "details": "Similar to how one needs to call `requestRrpBeaconUpdate()` for this contract to recognize the incoming RRP fulfillment, this needs to be called before the subscription fulfillments. In addition to the subscription being registered, the sponsor must use `setPspSponsorshipStatus()` to give permission for its sponsor wallet to be used for the specific subscription.",
        "params": {
          "airnode": "Airnode address",
          "conditions": "Conditions under which the subscription is requested to be fulfilled",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "subscriptionId": "Subscription ID"
        }
      },
      "requestRelayedRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "parameters": "Parameters",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestRelayedRrpBeaconUpdateWithTemplate(address,bytes32,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "relayer": "Relayer address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address)": {
        "params": {
          "airnode": "Airnode address",
          "endpointId": "Endpoint ID",
          "parameters": "Parameters",
          "sponsor": "Sponsor address"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "requestRrpBeaconUpdateWithTemplate(address,bytes32,address)": {
        "details": "In addition to the sponsor sponsoring this contract (by calling `setRrpSponsorshipStatus()`), the sponsor must also give update request permission to the sender (by calling `setRrpBeaconUpdatePermissionStatus()`) before this method is called. The template must specify a single point of data of type `int256` to be returned and for it to be small enough to be castable to `int224` because this is what `fulfillRrpBeaconUpdate()` expects.",
        "params": {
          "airnode": "Airnode address",
          "sponsor": "Sponsor address",
          "templateId": "Template ID"
        },
        "returns": {
          "requestId": "Request ID"
        }
      },
      "setDapiName(bytes32,bytes32)": {
        "details": "While a data feed ID refers to a specific Beacon or Beacon set, dAPI names provide a more abstract interface for convenience. This means a dAPI name that was pointing to a Beacon can be pointed to a Beacon set, then another Beacon set, etc.",
        "params": {
          "dapiName": "Human-readable dAPI name",
          "dataFeedId": "Data feed ID the dAPI name will point to"
        }
      },
      "setRrpBeaconUpdatePermissionStatus(address,bool)": {
        "params": {
          "rrpBeaconUpdateRequester": "RRP-based Beacon update requester address",
          "status": "Permission status"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "details": "As an oddity, this function still works if some of the IDs in `beaconIds` belong to Beacon sets rather than Beacons. This can be used to implement hierarchical Beacon sets.",
        "params": {
          "beaconIds": "Beacon IDs"
        },
        "returns": {
          "beaconSetId": "Beacon set ID"
        }
      },
      "updateDataFeedWithDomainSignedData(bytes[])": {
        "details": "This signed data here is specific to this contract, which is to be used when the signer does not want to provide the more general signature. EIP712 may feel relevant here, but we avoided it for the sake of consistency among signed data implementations and clarity.",
        "params": {
          "signedData": "Array of contract ABI-encoded Airnode address, template ID, timestamp and fulfillment data that is signed by the respective Airnode for this specific contract"
        }
      },
      "updateDataFeedWithSignedData(bytes[])": {
        "details": "The signed data here is intentionally very general for practical reasons. It is less demanding on the signer to have data signed once and use that everywhere.",
        "params": {
          "signedData": "Array of contract ABI-encoded Airnode address, template ID, timestamp and fulfillment data that is signed by the respective Airnode"
        }
      },
      "updateOevProxyDataFeedWithSignedData(address,bytes32,uint256,bytes[])": {
        "details": "Even though data for Beacons are signed individually, the caller is only allowed to use the signatures as a bundle. They cannot omit individual signatures or mix-and-match among bundles.",
        "params": {
          "oevProxy": "OEV proxy that reads the data feed",
          "signatureCount": "Number of signatures in `signedData`",
          "signedData": "Array of ABI-encoded Airnode address, template ID, timestamp, fulfillment data and bid metadata that is signed by the respective Airnode for the specific bid",
          "updateId": "Update ID"
        }
      },
      "withdraw(address)": {
        "details": "This does not require the caller to be the beneficiary because we expect that in most cases, the OEV beneficiary will be a contract that will not be able to make arbitrary calls. Our choice can be worked around by implementing a beneficiary proxy.",
        "params": {
          "oevProxy": "OEV proxy"
        }
      }
    },
    "stateVariables": {
      "HUNDRED_PERCENT": {
        "details": "10^8 (and not a larger number) is chosen to avoid overflows in `calculateUpdateInPercentage()`. Since the reported data needs to fit into 224 bits, its multiplication by 10^8 is guaranteed not to overflow."
      },
      "oevProxyToIdToDataFeed": {
        "details": "This implies that an update as a result of an OEV auction only affects contracts that read through the respective proxy that the auction was being held for"
      }
    },
    "title": "Contract that serves Beacons, Beacon sets and dAPIs based on the Airnode protocol",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DAPI_NAME_SETTER_ROLE_DESCRIPTION()": {
        "notice": "dAPI name setter role description"
      },
      "HUNDRED_PERCENT()": {
        "notice": "Number that represents 100%"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "adminRole()": {
        "notice": "Admin role"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "aggregateBeacons(bytes32[])": {
        "notice": "Aggregates the Beacons and returns the result"
      },
      "airnodeProtocol()": {
        "notice": "AirnodeProtocol contract address"
      },
      "conditionPspBeaconSetUpdate(bytes32,bytes,bytes)": {
        "notice": "Returns if the respective Beacon set needs to be updated based on the condition parameters"
      },
      "conditionPspBeaconUpdate(bytes32,bytes,bytes)": {
        "notice": "Returns if the respective Beacon needs to be updated based on the fulfillment data and the condition parameters"
      },
      "dapiNameHashToDataFeedId(bytes32)": {
        "notice": "dAPI name hash mapped to the data feed ID"
      },
      "dapiNameSetterRole()": {
        "notice": "dAPI name setter role"
      },
      "dapiNameToDataFeedId(bytes32)": {
        "notice": "Returns the data feed ID the dAPI name is set to"
      },
      "dataFeeds(bytes32)": {
        "notice": "Data feed with ID"
      },
      "fulfillPspBeaconSetUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon set update subscription"
      },
      "fulfillPspBeaconUpdate(bytes32,address,address,address,uint256,bytes,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet to fulfill the Beacon update subscription"
      },
      "fulfillRrpBeaconUpdate(bytes32,uint256,bytes)": {
        "notice": "Called by the Airnode/relayer using the sponsor wallet through AirnodeProtocol to fulfill the request"
      },
      "getBalance(address)": {
        "notice": "Returns the account balance"
      },
      "getBlockBasefee()": {
        "notice": "Returns the current block basefee"
      },
      "getBlockNumber()": {
        "notice": "Returns the current block number"
      },
      "getBlockTimestamp()": {
        "notice": "Returns the current block timestamp"
      },
      "getChainId()": {
        "notice": "Returns the chain ID"
      },
      "manager()": {
        "notice": "Address of the manager that manages the related AccessControlRegistry roles"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts if at least one of the batched calls reverts"
      },
      "oevProxyToBalance(address)": {
        "notice": "Accumulated OEV auction proceeds for the specific proxy"
      },
      "oevProxyToIdToDataFeed(address,bytes32)": {
        "notice": "Data feed with ID specific to the OEV proxy"
      },
      "readDataFeedWithDapiNameHash(bytes32)": {
        "notice": "Reads the data feed with dAPI name hash"
      },
      "readDataFeedWithDapiNameHashAsOevProxy(bytes32)": {
        "notice": "Reads the data feed as the OEV proxy with dAPI name hash"
      },
      "readDataFeedWithId(bytes32)": {
        "notice": "Reads the data feed with ID"
      },
      "readDataFeedWithIdAsOevProxy(bytes32)": {
        "notice": "Reads the data feed as the OEV proxy with ID"
      },
      "registerBeaconUpdateSubscription(address,bytes32,bytes,address,address)": {
        "notice": "Registers the Beacon update subscription"
      },
      "requestRelayedRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address,address)": {
        "notice": "Creates an RRP request for the Beacon to be updated by the relayer"
      },
      "requestRelayedRrpBeaconUpdateWithTemplate(address,bytes32,address,address)": {
        "notice": "Creates an RRP request for the Beacon to be updated by the relayer"
      },
      "requestRrpBeaconUpdateWithEndpoint(address,bytes32,bytes,address)": {
        "notice": "Creates an RRP request for the Beacon to be updated"
      },
      "requestRrpBeaconUpdateWithTemplate(address,bytes32,address)": {
        "notice": "Creates an RRP request for the Beacon to be updated"
      },
      "setDapiName(bytes32,bytes32)": {
        "notice": "Sets the data feed ID the dAPI name points to"
      },
      "setRrpBeaconUpdatePermissionStatus(address,bool)": {
        "notice": "Called by the sponsor to set the update request permission status of an account"
      },
      "sponsorToRrpBeaconUpdateRequesterToPermissionStatus(address,address)": {
        "notice": "If a sponsor has permitted an account to request RRP-based updates at this contract"
      },
      "subscriptionIdToBeaconId(bytes32)": {
        "notice": "ID of the Beacon that the subscription is registered to update"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      },
      "updateBeaconSetWithBeacons(bytes32[])": {
        "notice": "Updates the Beacon set using the current values of its Beacons"
      },
      "updateDataFeedWithDomainSignedData(bytes[])": {
        "notice": "Updates a data feed using data domain-signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the fulfillment data and signature is omitted will be read from storage."
      },
      "updateDataFeedWithSignedData(bytes[])": {
        "notice": "Updates a data feed using data signed by the respective Airnodes without requiring a request or subscription. The Beacons for which the fulfillment data and signature is omitted will be read from storage."
      },
      "updateOevProxyDataFeedWithSignedData(address,bytes32,uint256,bytes[])": {
        "notice": "Updates a data feed that the OEV proxy reads using data signed by the respective Airnodes for the specific bid. The Beacons for which the fulfillment data and signature is omitted will be read from storage."
      },
      "withdraw(address)": {
        "notice": "Withdraws the balance of the OEV proxy to the respective beneficiary account"
      }
    },
    "notice": "A Beacon is a live data feed addressed by an ID, which is derived from an Airnode address and a template ID. This is suitable where the more recent data point is always more favorable, e.g., in the context of an asset price data feed. Beacons can also be seen as one-Airnode data feeds that can be used individually or combined to build Beacon sets. dAPIs are an abstraction layer over Beacons and Beacon sets. In addition, this contract allows winners of OEV auctions to pay their bids to update the specific data feed.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2745,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 4872,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "sponsorToRrpBeaconUpdateRequesterToPermissionStatus",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 4878,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "subscriptionIdToBeaconId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 4885,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "dataFeeds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(DataFeed)4850_storage)"
      },
      {
        "astId": 4894,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "oevProxyToIdToDataFeed",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(DataFeed)4850_storage))"
      },
      {
        "astId": 4900,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "dapiNameHashToDataFeedId",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 4906,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "oevProxyToBalance",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4910,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "requestIdToBeaconId",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 4914,
        "contract": "contracts/dapis/DapiServer.sol:DapiServer",
        "label": "subscriptionIdToHash",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_int224": {
        "encoding": "inplace",
        "label": "int224",
        "numberOfBytes": "28"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(DataFeed)4850_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct DapiServer.DataFeed))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(DataFeed)4850_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(DataFeed)4850_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct DapiServer.DataFeed)",
        "numberOfBytes": "32",
        "value": "t_struct(DataFeed)4850_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DataFeed)4850_storage": {
        "encoding": "inplace",
        "label": "struct DapiServer.DataFeed",
        "members": [
          {
            "astId": 4847,
            "contract": "contracts/dapis/DapiServer.sol:DapiServer",
            "label": "value",
            "offset": 0,
            "slot": "0",
            "type": "t_int224"
          },
          {
            "astId": 4849,
            "contract": "contracts/dapis/DapiServer.sol:DapiServer",
            "label": "timestamp",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
