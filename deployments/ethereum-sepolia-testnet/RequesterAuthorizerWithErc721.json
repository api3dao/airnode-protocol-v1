{
  "address": "0x5f2c88ba533DbA48d570b9bad5Ee6Be1A719FcA2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_accessControlRegistry",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_adminRoleDescription",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "DepositedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "earliestWithdrawalTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "InitiatedTokenWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "RevokedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetDepositorFreezeStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetRequesterBlockStatus",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "withdrawalLeadTime",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "SetWithdrawalLeadTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDepositRequesterFrom",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "UpdatedDepositRequesterTo",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenDepositCount",
          "type": "uint256"
        }
      ],
      "name": "WithdrewToken",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_FREEZER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUESTER_BLOCKER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminRoleDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airnodeToChainIdToRequesterToBlockStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "airnodeToChainIdToRequesterToTokenToDepositorToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "withdrawalLeadTime",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "earliestWithdrawalTime",
          "type": "uint32"
        },
        {
          "internalType": "enum IRequesterAuthorizerWithErc721.DepositState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airnodeToDepositorToFreezeStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "airnodeToWithdrawalLeadTime",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveDepositorFreezerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "depositorFreezerRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveRequesterBlockerRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requesterBlockerRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        }
      ],
      "name": "deriveWithdrawalLeadTimeSetterRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "withdrawalLeadTimeSetterRole",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initiateTokenWithdrawal",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "earliestWithdrawalTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        }
      ],
      "name": "revokeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setDepositorFreezeStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setRequesterBlockStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "withdrawalLeadTime",
          "type": "uint32"
        }
      ],
      "name": "setWithdrawalLeadTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "tryMulticall",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "successes",
          "type": "bool[]"
        },
        {
          "internalType": "bytes[]",
          "name": "returndata",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainIdPrevious",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requesterPrevious",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainIdNext",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requesterNext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "updateDepositRequester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "airnode",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbca4ef1a9d98f3ee9c2ebd60aae87fe76f8d1515dcf0eef5a250a43ca7449efc",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x07b589f06bD0A5324c4E2376d66d2F4F25921DE1",
    "contractAddress": null,
    "transactionIndex": 30,
    "gasUsed": "2698635",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x72fec91b24c10fb0b34a0f92df60a43c4666565b465534d7e6b821d4ba53a89f",
    "transactionHash": "0xbca4ef1a9d98f3ee9c2ebd60aae87fe76f8d1515dcf0eef5a250a43ca7449efc",
    "logs": [],
    "blockNumber": 3594739,
    "cumulativeGasUsed": "4754010",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x12D82f38a038A71b0843BD3256CD1E0A1De74834", "RequesterAuthorizerWithErc721 admin"],
  "numDeployments": 1,
  "solcInputHash": "7b3ef0c12daee397e3302a6b87af04a0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_accessControlRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_adminRoleDescription\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"DepositedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"earliestWithdrawalTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"InitiatedTokenWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"RevokedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetDepositorFreezeStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetRequesterBlockStatus\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"withdrawalLeadTime\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SetWithdrawalLeadTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"UpdatedDepositRequesterFrom\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"UpdatedDepositRequesterTo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenDepositCount\",\"type\":\"uint256\"}],\"name\":\"WithdrewToken\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSITOR_FREEZER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUESTER_BLOCKER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminRoleDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airnodeToChainIdToRequesterToBlockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airnodeToChainIdToRequesterToTokenAddressToTokenDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"airnodeToChainIdToRequesterToTokenToDepositorToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalLeadTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"earliestWithdrawalTime\",\"type\":\"uint32\"},{\"internalType\":\"enum IRequesterAuthorizerWithErc721.DepositState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airnodeToDepositorToFreezeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"airnodeToWithdrawalLeadTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveDepositorFreezerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"depositorFreezerRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveRequesterBlockerRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requesterBlockerRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"}],\"name\":\"deriveWithdrawalLeadTimeSetterRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"withdrawalLeadTimeSetterRole\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initiateTokenWithdrawal\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"earliestWithdrawalTime\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"}],\"name\":\"revokeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setDepositorFreezeStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setRequesterBlockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalLeadTime\",\"type\":\"uint32\"}],\"name\":\"setWithdrawalLeadTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"tryMulticall\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"successes\",\"type\":\"bool[]\"},{\"internalType\":\"bytes[]\",\"name\":\"returndata\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdPrevious\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requesterPrevious\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainIdNext\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requesterNext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"updateDepositRequester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"airnode\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Airnode operators are strongly recommended to only use a single instance of this contract as an authorizer. If multiple instances are used, the state between the instances should be kept consistent. For example, if a requester on a chain is to be blocked, all instances of this contract that are used as authorizers for the chain should be updated. Otherwise, the requester to be blocked can still be authorized via the instances that have not been updated.\",\"kind\":\"dev\",\"methods\":{\"airnodeToChainIdToRequesterToTokenToDepositorToDeposit(address,uint256,address,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"depositor\":\"Depositor address\",\"requester\":\"Requester address\",\"token\":\"Token address\"},\"returns\":{\"earliestWithdrawalTime\":\"Earliest withdrawal time\",\"tokenId\":\"Token ID\",\"withdrawalLeadTime\":\"Withdrawal lead time captured at deposit-time\"}},\"constructor\":{\"params\":{\"_accessControlRegistry\":\"AccessControlRegistry contract address\",\"_adminRoleDescription\":\"Admin role description\"}},\"deriveDepositorFreezerRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"depositorFreezerRole\":\"Depositor freezer role\"}},\"deriveRequesterBlockerRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"requesterBlockerRole\":\"Requester blocker role\"}},\"deriveWithdrawalLeadTimeSetterRole(address)\":{\"params\":{\"airnode\":\"Airnode address\"},\"returns\":{\"withdrawalLeadTimeSetterRole\":\"Withdrawal lead time setter role\"}},\"initiateTokenWithdrawal(address,uint256,address,address)\":{\"details\":\"The depositor is allowed to initiate a withdrawal even if the respective requester is blocked. However, the withdrawal will not be executable as long as the requester is blocked. Token withdrawals can be initiated even if withdrawal lead time is zero.\",\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"requester\":\"Requester address\",\"token\":\"Token address\"},\"returns\":{\"earliestWithdrawalTime\":\"Earliest withdrawal time\"}},\"isAuthorized(address,uint256,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"requester\":\"Requester address\",\"token\":\"Token address\"},\"returns\":{\"_0\":\"Authorization status\"}},\"multicall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"The first argument is the operator, which we do not need\",\"params\":{\"_data\":\"Airnode address, chain ID and requester address in ABI-encoded form\",\"_from\":\"Account from which the token is transferred\",\"_tokenId\":\"Token ID\"},\"returns\":{\"_0\":\"`onERC721Received()` function selector\"}},\"revokeToken(address,uint256,address,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"depositor\":\"Depositor address\",\"requester\":\"Requester address\",\"token\":\"Token address\"}},\"setDepositorFreezeStatus(address,address,bool)\":{\"params\":{\"airnode\":\"Airnode address\",\"depositor\":\"Depositor address\",\"status\":\"Freeze status\"}},\"setRequesterBlockStatus(address,uint256,address,bool)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"requester\":\"Requester address\",\"status\":\"Block status\"}},\"setWithdrawalLeadTime(address,uint32)\":{\"params\":{\"airnode\":\"Airnode address\",\"withdrawalLeadTime\":\"Withdrawal lead time\"}},\"tryMulticall(bytes[])\":{\"params\":{\"data\":\"Array of calldata of batched calls\"},\"returns\":{\"returndata\":\"Array of returndata of batched calls\",\"successes\":\"Array of success conditions of batched calls\"}},\"updateDepositRequester(address,uint256,address,uint256,address,address)\":{\"details\":\"This is especially useful for not having to wait when the Airnode has set a non-zero withdrawal lead time\",\"params\":{\"airnode\":\"Airnode address\",\"chainIdNext\":\"Next chain ID\",\"chainIdPrevious\":\"Previous chain ID\",\"requesterNext\":\"Next requester address\",\"requesterPrevious\":\"Previous requester address\",\"token\":\"Token address\"}},\"withdrawToken(address,uint256,address,address)\":{\"params\":{\"airnode\":\"Airnode address\",\"chainId\":\"Chain ID\",\"requester\":\"Requester address\",\"token\":\"Token address\"}}},\"title\":\"Authorizer contract that users can deposit the ERC721 tokens recognized by the Airnode to receive authorization for the requester contract on the chain\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DEPOSITOR_FREEZER_ROLE_DESCRIPTION()\":{\"notice\":\"Depositor freezer role description\"},\"REQUESTER_BLOCKER_ROLE_DESCRIPTION()\":{\"notice\":\"Requester blocker role description\"},\"WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION()\":{\"notice\":\"Withdrawal lead time setter role description\"},\"accessControlRegistry()\":{\"notice\":\"AccessControlRegistry contract address\"},\"adminRoleDescription()\":{\"notice\":\"Admin role description\"},\"airnodeToChainIdToRequesterToBlockStatus(address,uint256,address)\":{\"notice\":\"If the Airnode has blocked the requester on the chain. In the context of the respective Airnode, no one can deposit for a blocked requester, make deposit updates that relate to a blocked requester, or withdraw a token deposited for a blocked requester. Anyone can revoke tokens that are already deposited for a blocked requester. Existing deposits for a blocked requester do not provide authorization.\"},\"airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(address,uint256,address,address)\":{\"notice\":\"Deposits of the token with the address made for the Airnode to authorize the requester address on the chain\"},\"airnodeToChainIdToRequesterToTokenToDepositorToDeposit(address,uint256,address,address,address)\":{\"notice\":\"Returns the deposit of the token with the address made by the depositor for the Airnode to authorize the requester address on the chain\"},\"airnodeToDepositorToFreezeStatus(address,address)\":{\"notice\":\"If the Airnode has frozen the depositor. In the context of the respective Airnode, a frozen depositor cannot deposit, make deposit updates or withdraw.\"},\"airnodeToWithdrawalLeadTime(address)\":{\"notice\":\"Withdrawal lead time of the Airnode. This creates the window of opportunity during which a requester can be blocked for breaking T&C and the respective token can be revoked. The withdrawal lead time at deposit-time will apply to a specific deposit.\"},\"deriveDepositorFreezerRole(address)\":{\"notice\":\"Derives the depositor freezer role for the Airnode\"},\"deriveRequesterBlockerRole(address)\":{\"notice\":\"Derives the requester blocker role for the Airnode\"},\"deriveWithdrawalLeadTimeSetterRole(address)\":{\"notice\":\"Derives the withdrawal lead time setter role for the Airnode\"},\"initiateTokenWithdrawal(address,uint256,address,address)\":{\"notice\":\"Called by a token depositor to initiate withdrawal\"},\"isAuthorized(address,uint256,address,address)\":{\"notice\":\"Returns if the requester on the chain is authorized for the Airnode due to a token with the address being deposited\"},\"multicall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Called by the ERC721 contract upon `safeTransferFrom()` to this contract to deposit a token to authorize the requester\"},\"revokeToken(address,uint256,address,address,address)\":{\"notice\":\"Called to revoke the token deposited to authorize a requester that is blocked now\"},\"setDepositorFreezeStatus(address,address,bool)\":{\"notice\":\"Called by the Airnode or its depositor freezers to set the freeze status of the depositor\"},\"setRequesterBlockStatus(address,uint256,address,bool)\":{\"notice\":\"Called by the Airnode or its requester blockers to set the block status of the requester\"},\"setWithdrawalLeadTime(address,uint32)\":{\"notice\":\"Called by the Airnode or its withdrawal lead time setters to set withdrawal lead time\"},\"tryMulticall(bytes[])\":{\"notice\":\"Batches calls to the inheriting contract but does not revert if any of the batched calls reverts\"},\"updateDepositRequester(address,uint256,address,uint256,address,address)\":{\"notice\":\"Called by a token depositor to update the requester for which they have deposited the token for\"},\"withdrawToken(address,uint256,address,address)\":{\"notice\":\"Called by a token depositor to withdraw\"}},\"notice\":\"For an Airnode to treat an ERC721 token deposit as a valid reason for the respective requester contract to be authorized, it needs to be configured at deploy-time to (1) use this contract as an authorizer, (2) recognize the respectice ERC721 token contract. It can be expected for Airnodes to be configured to only recognize the respective NFT keys that their operators have issued, but this is not necessarily true, i.e., an Airnode can be configured to recognize an arbitrary ERC721 token. This contract allows Airnodes to block specific requester contracts. It can be expected for Airnodes to only do this when the requester is breaking T&C. The tokens that have been deposited to authorize requesters that have been blocked can be revoked, which transfers them to the Airnode account. This can be seen as a staking/slashing mechanism. Accordingly, users should not deposit ERC721 tokens to receive authorization from Airnodes that they suspect may abuse this mechanic.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/authorizers/RequesterAuthorizerWithErc721.sol\":\"RequesterAuthorizerWithErc721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"contracts/access-control-registry/AccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/SelfMulticall.sol\\\";\\nimport \\\"./RoleDeriver.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IAccessControlRegistry.sol\\\";\\n\\n/// @title Contract to be inherited by contracts whose adminship functionality\\n/// will be implemented using AccessControlRegistry\\ncontract AccessControlRegistryAdminned is\\n    SelfMulticall,\\n    RoleDeriver,\\n    IAccessControlRegistryAdminned\\n{\\n    /// @notice AccessControlRegistry contract address\\n    address public immutable override accessControlRegistry;\\n\\n    /// @notice Admin role description\\n    string public override adminRoleDescription;\\n\\n    bytes32 internal immutable adminRoleDescriptionHash;\\n\\n    /// @dev Contracts deployed with the same admin role descriptions will have\\n    /// the same roles, meaning that granting an account a role will authorize\\n    /// it in multiple contracts. Unless you want your deployed contract to\\n    /// share the role configuration of another contract, use a unique admin\\n    /// role description.\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    ) {\\n        require(_accessControlRegistry != address(0), \\\"ACR address zero\\\");\\n        require(\\n            bytes(_adminRoleDescription).length > 0,\\n            \\\"Admin role description empty\\\"\\n        );\\n        accessControlRegistry = _accessControlRegistry;\\n        adminRoleDescription = _adminRoleDescription;\\n        adminRoleDescriptionHash = keccak256(\\n            abi.encodePacked(_adminRoleDescription)\\n        );\\n    }\\n\\n    /// @notice Derives the admin role for the specific manager address\\n    /// @param manager Manager address\\n    /// @return adminRole Admin role\\n    function _deriveAdminRole(\\n        address manager\\n    ) internal view returns (bytes32 adminRole) {\\n        adminRole = _deriveRole(\\n            _deriveRootRole(manager),\\n            adminRoleDescriptionHash\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x813755d99a9d8dd6298720da68fb5a6dd69329ea2dec91da1d09f715d4543c15\",\"license\":\"MIT\"},\"contracts/access-control-registry/RoleDeriver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @title Contract to be inherited by contracts that will derive\\n/// AccessControlRegistry roles\\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\\n/// derive roles, it should inherit this contract instead of re-implementing\\n/// the logic\\ncontract RoleDeriver {\\n    /// @notice Derives the root role of the manager\\n    /// @param manager Manager address\\n    /// @return rootRole Root role\\n    function _deriveRootRole(\\n        address manager\\n    ) internal pure returns (bytes32 rootRole) {\\n        rootRole = keccak256(abi.encodePacked(manager));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param description Human-readable description of the role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        string memory description\\n    ) internal pure returns (bytes32 role) {\\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\\n    }\\n\\n    /// @notice Derives the role using its admin role and description hash\\n    /// @dev This implies that roles adminned by the same role cannot have the\\n    /// same description\\n    /// @param adminRole Admin role\\n    /// @param descriptionHash Hash of the human-readable description of the\\n    /// role\\n    /// @return role Role\\n    function _deriveRole(\\n        bytes32 adminRole,\\n        bytes32 descriptionHash\\n    ) internal pure returns (bytes32 role) {\\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\\n    }\\n}\\n\",\"keccak256\":\"0x488adb3cb7031415d4a195230753a0ac8f9f610e6db7a571529a350e29c97ed6\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport \\\"../../utils/interfaces/IExpiringMetaTxForwarder.sol\\\";\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistry is\\n    IAccessControl,\\n    IExpiringMetaTxForwarder,\\n    ISelfMulticall\\n{\\n    event InitializedManager(\\n        bytes32 indexed rootRole,\\n        address indexed manager,\\n        address sender\\n    );\\n\\n    event InitializedRole(\\n        bytes32 indexed role,\\n        bytes32 indexed adminRole,\\n        string description,\\n        address sender\\n    );\\n\\n    function initializeManager(address manager) external;\\n\\n    function initializeRoleAndGrantToSender(\\n        bytes32 adminRole,\\n        string calldata description\\n    ) external returns (bytes32 role);\\n}\\n\",\"keccak256\":\"0xfe3f55a43a4456091ab90f4c17d4feda383587a5bbd3b7313295d87d878d843b\",\"license\":\"MIT\"},\"contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/interfaces/ISelfMulticall.sol\\\";\\n\\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\\n    function accessControlRegistry() external view returns (address);\\n\\n    function adminRoleDescription() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd71aae2566c019a9b2da5e1ec51421a62898495fa6fd08e2cc39451511dda334\",\"license\":\"MIT\"},\"contracts/authorizers/RequesterAuthorizerWithErc721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport \\\"../access-control-registry/AccessControlRegistryAdminned.sol\\\";\\nimport \\\"./interfaces/IRequesterAuthorizerWithErc721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/// @title Authorizer contract that users can deposit the ERC721 tokens\\n/// recognized by the Airnode to receive authorization for the requester\\n/// contract on the chain\\n/// @notice For an Airnode to treat an ERC721 token deposit as a valid reason\\n/// for the respective requester contract to be authorized, it needs to be\\n/// configured at deploy-time to (1) use this contract as an authorizer,\\n/// (2) recognize the respectice ERC721 token contract.\\n/// It can be expected for Airnodes to be configured to only recognize the\\n/// respective NFT keys that their operators have issued, but this is not\\n/// necessarily true, i.e., an Airnode can be configured to recognize an\\n/// arbitrary ERC721 token.\\n/// This contract allows Airnodes to block specific requester contracts. It can\\n/// be expected for Airnodes to only do this when the requester is breaking\\n/// T&C. The tokens that have been deposited to authorize requesters that have\\n/// been blocked can be revoked, which transfers them to the Airnode account.\\n/// This can be seen as a staking/slashing mechanism. Accordingly, users should\\n/// not deposit ERC721 tokens to receive authorization from Airnodes that they\\n/// suspect may abuse this mechanic.\\n/// @dev Airnode operators are strongly recommended to only use a single\\n/// instance of this contract as an authorizer. If multiple instances are used,\\n/// the state between the instances should be kept consistent. For example, if\\n/// a requester on a chain is to be blocked, all instances of this contract\\n/// that are used as authorizers for the chain should be updated. Otherwise,\\n/// the requester to be blocked can still be authorized via the instances that\\n/// have not been updated.\\ncontract RequesterAuthorizerWithErc721 is\\n    ERC2771Context,\\n    AccessControlRegistryAdminned,\\n    IRequesterAuthorizerWithErc721\\n{\\n    struct TokenDeposits {\\n        uint256 count;\\n        mapping(address => Deposit) depositorToDeposit;\\n    }\\n\\n    struct Deposit {\\n        uint256 tokenId;\\n        uint32 withdrawalLeadTime;\\n        uint32 earliestWithdrawalTime;\\n        DepositState state;\\n    }\\n\\n    /// @notice Withdrawal lead time setter role description\\n    string\\n        public constant\\n        override WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION =\\n        \\\"Withdrawal lead time setter\\\";\\n    /// @notice Requester blocker role description\\n    string public constant override REQUESTER_BLOCKER_ROLE_DESCRIPTION =\\n        \\\"Requester blocker\\\";\\n    /// @notice Depositor freezer role description\\n    string public constant override DEPOSITOR_FREEZER_ROLE_DESCRIPTION =\\n        \\\"Depositor freezer\\\";\\n\\n    bytes32 private constant WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION_HASH =\\n        keccak256(\\n            abi.encodePacked(WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION)\\n        );\\n    bytes32 private constant REQUESTER_BLOCKER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(REQUESTER_BLOCKER_ROLE_DESCRIPTION));\\n    bytes32 private constant DEPOSITOR_FREEZER_ROLE_DESCRIPTION_HASH =\\n        keccak256(abi.encodePacked(DEPOSITOR_FREEZER_ROLE_DESCRIPTION));\\n\\n    /// @notice Deposits of the token with the address made for the Airnode to\\n    /// authorize the requester address on the chain\\n    mapping(address => mapping(uint256 => mapping(address => mapping(address => TokenDeposits))))\\n        public\\n        override airnodeToChainIdToRequesterToTokenAddressToTokenDeposits;\\n\\n    /// @notice Withdrawal lead time of the Airnode. This creates the window of\\n    /// opportunity during which a requester can be blocked for breaking T&C\\n    /// and the respective token can be revoked.\\n    /// The withdrawal lead time at deposit-time will apply to a specific\\n    /// deposit.\\n    mapping(address => uint32) public override airnodeToWithdrawalLeadTime;\\n\\n    /// @notice If the Airnode has blocked the requester on the chain. In the\\n    /// context of the respective Airnode, no one can deposit for a blocked\\n    /// requester, make deposit updates that relate to a blocked requester, or\\n    /// withdraw a token deposited for a blocked requester. Anyone can revoke\\n    /// tokens that are already deposited for a blocked requester. Existing\\n    /// deposits for a blocked requester do not provide authorization.\\n    mapping(address => mapping(uint256 => mapping(address => bool)))\\n        public\\n        override airnodeToChainIdToRequesterToBlockStatus;\\n\\n    /// @notice If the Airnode has frozen the depositor. In the context of the\\n    /// respective Airnode, a frozen depositor cannot deposit, make deposit\\n    /// updates or withdraw.\\n    mapping(address => mapping(address => bool))\\n        public\\n        override airnodeToDepositorToFreezeStatus;\\n\\n    /// @param _accessControlRegistry AccessControlRegistry contract address\\n    /// @param _adminRoleDescription Admin role description\\n    constructor(\\n        address _accessControlRegistry,\\n        string memory _adminRoleDescription\\n    )\\n        ERC2771Context(_accessControlRegistry)\\n        AccessControlRegistryAdminned(\\n            _accessControlRegistry,\\n            _adminRoleDescription\\n        )\\n    {}\\n\\n    /// @notice Called by the Airnode or its withdrawal lead time setters to\\n    /// set withdrawal lead time\\n    /// @param airnode Airnode address\\n    /// @param withdrawalLeadTime Withdrawal lead time\\n    function setWithdrawalLeadTime(\\n        address airnode,\\n        uint32 withdrawalLeadTime\\n    ) external override {\\n        require(\\n            airnode == _msgSender() ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveWithdrawalLeadTimeSetterRole(airnode),\\n                    _msgSender()\\n                ),\\n            \\\"Sender cannot set lead time\\\"\\n        );\\n        require(withdrawalLeadTime <= 30 days, \\\"Lead time too long\\\");\\n        airnodeToWithdrawalLeadTime[airnode] = withdrawalLeadTime;\\n        emit SetWithdrawalLeadTime(airnode, withdrawalLeadTime, _msgSender());\\n    }\\n\\n    /// @notice Called by the Airnode or its requester blockers to set\\n    /// the block status of the requester\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param status Block status\\n    function setRequesterBlockStatus(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        bool status\\n    ) external override {\\n        require(\\n            airnode == _msgSender() ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveRequesterBlockerRole(airnode),\\n                    _msgSender()\\n                ),\\n            \\\"Sender cannot block requester\\\"\\n        );\\n        require(chainId != 0, \\\"Chain ID zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\\n            requester\\n        ] = status;\\n        emit SetRequesterBlockStatus(\\n            airnode,\\n            requester,\\n            chainId,\\n            status,\\n            _msgSender()\\n        );\\n    }\\n\\n    /// @notice Called by the Airnode or its depositor freezers to set the\\n    /// freeze status of the depositor\\n    /// @param airnode Airnode address\\n    /// @param depositor Depositor address\\n    /// @param status Freeze status\\n    function setDepositorFreezeStatus(\\n        address airnode,\\n        address depositor,\\n        bool status\\n    ) external override {\\n        require(\\n            airnode == _msgSender() ||\\n                IAccessControlRegistry(accessControlRegistry).hasRole(\\n                    deriveDepositorFreezerRole(airnode),\\n                    _msgSender()\\n                ),\\n            \\\"Sender cannot freeze depositor\\\"\\n        );\\n        require(depositor != address(0), \\\"Depositor address zero\\\");\\n        airnodeToDepositorToFreezeStatus[airnode][depositor] = status;\\n        emit SetDepositorFreezeStatus(airnode, depositor, status, _msgSender());\\n    }\\n\\n    /// @notice Called by the ERC721 contract upon `safeTransferFrom()` to this\\n    /// contract to deposit a token to authorize the requester\\n    /// @dev The first argument is the operator, which we do not need\\n    /// @param _from Account from which the token is transferred\\n    /// @param _tokenId Token ID\\n    /// @param _data Airnode address, chain ID and requester address in\\n    /// ABI-encoded form\\n    /// @return `onERC721Received()` function selector\\n    function onERC721Received(\\n        address,\\n        address _from,\\n        uint256 _tokenId,\\n        bytes calldata _data\\n    ) external override returns (bytes4) {\\n        require(_data.length == 96, \\\"Unexpected data length\\\");\\n        (address airnode, uint256 chainId, address requester) = abi.decode(\\n            _data,\\n            (address, uint256, address)\\n        );\\n        require(airnode != address(0), \\\"Airnode address zero\\\");\\n        require(chainId != 0, \\\"Chain ID zero\\\");\\n        require(requester != address(0), \\\"Requester address zero\\\");\\n        require(\\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\\n                requester\\n            ],\\n            \\\"Requester blocked\\\"\\n        );\\n        require(\\n            !airnodeToDepositorToFreezeStatus[airnode][_from],\\n            \\\"Depositor frozen\\\"\\n        );\\n        TokenDeposits\\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainId][requester][_msgSender()];\\n        uint256 tokenDepositCount;\\n        unchecked {\\n            tokenDepositCount = ++tokenDeposits.count;\\n        }\\n        require(\\n            tokenDeposits.depositorToDeposit[_from].state ==\\n                DepositState.Inactive,\\n            \\\"Token already deposited\\\"\\n        );\\n        tokenDeposits.depositorToDeposit[_from] = Deposit({\\n            tokenId: _tokenId,\\n            withdrawalLeadTime: airnodeToWithdrawalLeadTime[airnode],\\n            earliestWithdrawalTime: 0,\\n            state: DepositState.Active\\n        });\\n        emit DepositedToken(\\n            airnode,\\n            requester,\\n            _from,\\n            chainId,\\n            _msgSender(),\\n            _tokenId,\\n            tokenDepositCount\\n        );\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Called by a token depositor to update the requester for which\\n    /// they have deposited the token for\\n    /// @dev This is especially useful for not having to wait when the Airnode\\n    /// has set a non-zero withdrawal lead time\\n    /// @param airnode Airnode address\\n    /// @param chainIdPrevious Previous chain ID\\n    /// @param requesterPrevious Previous requester address\\n    /// @param chainIdNext Next chain ID\\n    /// @param requesterNext Next requester address\\n    /// @param token Token address\\n    function updateDepositRequester(\\n        address airnode,\\n        uint256 chainIdPrevious,\\n        address requesterPrevious,\\n        uint256 chainIdNext,\\n        address requesterNext,\\n        address token\\n    ) external override {\\n        require(chainIdNext != 0, \\\"Chain ID zero\\\");\\n        require(requesterNext != address(0), \\\"Requester address zero\\\");\\n        require(\\n            !(chainIdPrevious == chainIdNext &&\\n                requesterPrevious == requesterNext),\\n            \\\"Does not update requester\\\"\\n        );\\n        require(\\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainIdPrevious][\\n                requesterPrevious\\n            ],\\n            \\\"Previous requester blocked\\\"\\n        );\\n        require(\\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainIdNext][\\n                requesterNext\\n            ],\\n            \\\"Next requester blocked\\\"\\n        );\\n        require(\\n            !airnodeToDepositorToFreezeStatus[airnode][_msgSender()],\\n            \\\"Depositor frozen\\\"\\n        );\\n        TokenDeposits\\n            storage requesterPreviousTokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainIdPrevious][requesterPrevious][token];\\n        Deposit\\n            storage requesterPreviousDeposit = requesterPreviousTokenDeposits\\n                .depositorToDeposit[_msgSender()];\\n        if (requesterPreviousDeposit.state != DepositState.Active) {\\n            if (requesterPreviousDeposit.state == DepositState.Inactive) {\\n                revert(\\\"Token not deposited\\\");\\n            } else {\\n                revert(\\\"Withdrawal initiated\\\");\\n            }\\n        }\\n        TokenDeposits\\n            storage requesterNextTokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainIdNext][requesterNext][token];\\n        require(\\n            requesterNextTokenDeposits.depositorToDeposit[_msgSender()].state ==\\n                DepositState.Inactive,\\n            \\\"Token already deposited\\\"\\n        );\\n        uint256 requesterNextTokenDepositCount = ++requesterNextTokenDeposits\\n            .count;\\n        requesterNextTokenDeposits.count = requesterNextTokenDepositCount;\\n        uint256 requesterPreviousTokenDepositCount = --requesterPreviousTokenDeposits\\n                .count;\\n        requesterPreviousTokenDeposits\\n            .count = requesterPreviousTokenDepositCount;\\n        uint256 tokenId = requesterPreviousDeposit.tokenId;\\n        requesterNextTokenDeposits.depositorToDeposit[_msgSender()] = Deposit({\\n            tokenId: tokenId,\\n            withdrawalLeadTime: requesterPreviousDeposit.withdrawalLeadTime,\\n            earliestWithdrawalTime: 0,\\n            state: DepositState.Active\\n        });\\n        requesterPreviousTokenDeposits.depositorToDeposit[\\n            _msgSender()\\n        ] = Deposit({\\n            tokenId: 0,\\n            withdrawalLeadTime: 0,\\n            earliestWithdrawalTime: 0,\\n            state: DepositState.Inactive\\n        });\\n        emit UpdatedDepositRequesterTo(\\n            airnode,\\n            requesterNext,\\n            _msgSender(),\\n            chainIdNext,\\n            token,\\n            tokenId,\\n            requesterNextTokenDepositCount\\n        );\\n        emit UpdatedDepositRequesterFrom(\\n            airnode,\\n            requesterPrevious,\\n            _msgSender(),\\n            chainIdPrevious,\\n            token,\\n            tokenId,\\n            requesterPreviousTokenDepositCount\\n        );\\n    }\\n\\n    /// @notice Called by a token depositor to initiate withdrawal\\n    /// @dev The depositor is allowed to initiate a withdrawal even if the\\n    /// respective requester is blocked. However, the withdrawal will not be\\n    /// executable as long as the requester is blocked.\\n    /// Token withdrawals can be initiated even if withdrawal lead time is\\n    /// zero.\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param token Token address\\n    /// @return earliestWithdrawalTime Earliest withdrawal time\\n    function initiateTokenWithdrawal(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external override returns (uint32 earliestWithdrawalTime) {\\n        TokenDeposits\\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainId][requester][token];\\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[\\n            _msgSender()\\n        ];\\n        if (deposit.state != DepositState.Active) {\\n            if (deposit.state == DepositState.Inactive) {\\n                revert(\\\"Token not deposited\\\");\\n            } else {\\n                revert(\\\"Withdrawal already initiated\\\");\\n            }\\n        }\\n        uint256 tokenDepositCount;\\n        unchecked {\\n            tokenDepositCount = --tokenDeposits.count;\\n        }\\n        earliestWithdrawalTime = SafeCast.toUint32(\\n            block.timestamp + deposit.withdrawalLeadTime\\n        );\\n        deposit.earliestWithdrawalTime = earliestWithdrawalTime;\\n        deposit.state = DepositState.WithdrawalInitiated;\\n        emit InitiatedTokenWithdrawal(\\n            airnode,\\n            requester,\\n            _msgSender(),\\n            chainId,\\n            token,\\n            deposit.tokenId,\\n            earliestWithdrawalTime,\\n            tokenDepositCount\\n        );\\n    }\\n\\n    /// @notice Called by a token depositor to withdraw\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param token Token address\\n    function withdrawToken(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external override {\\n        require(\\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\\n                requester\\n            ],\\n            \\\"Requester blocked\\\"\\n        );\\n        require(\\n            !airnodeToDepositorToFreezeStatus[airnode][_msgSender()],\\n            \\\"Depositor frozen\\\"\\n        );\\n        TokenDeposits\\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainId][requester][token];\\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[\\n            _msgSender()\\n        ];\\n        require(deposit.state != DepositState.Inactive, \\\"Token not deposited\\\");\\n        uint256 tokenDepositCount;\\n        if (deposit.state == DepositState.Active) {\\n            require(\\n                deposit.withdrawalLeadTime == 0,\\n                \\\"Withdrawal not initiated\\\"\\n            );\\n            unchecked {\\n                tokenDepositCount = --tokenDeposits.count;\\n            }\\n        } else {\\n            require(\\n                block.timestamp >= deposit.earliestWithdrawalTime,\\n                \\\"Cannot withdraw yet\\\"\\n            );\\n            unchecked {\\n                tokenDepositCount = tokenDeposits.count;\\n            }\\n        }\\n        uint256 tokenId = deposit.tokenId;\\n        tokenDeposits.depositorToDeposit[_msgSender()] = Deposit({\\n            tokenId: 0,\\n            withdrawalLeadTime: 0,\\n            earliestWithdrawalTime: 0,\\n            state: DepositState.Inactive\\n        });\\n        emit WithdrewToken(\\n            airnode,\\n            requester,\\n            _msgSender(),\\n            chainId,\\n            token,\\n            tokenId,\\n            tokenDepositCount\\n        );\\n        IERC721(token).safeTransferFrom(address(this), _msgSender(), tokenId);\\n    }\\n\\n    /// @notice Called to revoke the token deposited to authorize a requester\\n    /// that is blocked now\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param token Token address\\n    /// @param depositor Depositor address\\n    function revokeToken(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token,\\n        address depositor\\n    ) external override {\\n        require(\\n            airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\\n                requester\\n            ],\\n            \\\"Airnode did not block requester\\\"\\n        );\\n        TokenDeposits\\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainId][requester][token];\\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[depositor];\\n        require(deposit.state != DepositState.Inactive, \\\"Token not deposited\\\");\\n        uint256 tokenDepositCount;\\n        if (deposit.state == DepositState.Active) {\\n            unchecked {\\n                tokenDepositCount = --tokenDeposits.count;\\n            }\\n        } else {\\n            unchecked {\\n                tokenDepositCount = tokenDeposits.count;\\n            }\\n        }\\n        uint256 tokenId = deposit.tokenId;\\n        tokenDeposits.depositorToDeposit[depositor] = Deposit({\\n            tokenId: 0,\\n            withdrawalLeadTime: 0,\\n            earliestWithdrawalTime: 0,\\n            state: DepositState.Inactive\\n        });\\n        emit RevokedToken(\\n            airnode,\\n            requester,\\n            depositor,\\n            chainId,\\n            token,\\n            tokenId,\\n            tokenDepositCount\\n        );\\n        IERC721(token).safeTransferFrom(address(this), airnode, tokenId);\\n    }\\n\\n    /// @notice Returns the deposit of the token with the address made by the\\n    /// depositor for the Airnode to authorize the requester address on the\\n    /// chain\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param token Token address\\n    /// @param depositor Depositor address\\n    /// @return tokenId Token ID\\n    /// @return withdrawalLeadTime Withdrawal lead time captured at\\n    /// deposit-time\\n    /// @return earliestWithdrawalTime Earliest withdrawal time\\n    function airnodeToChainIdToRequesterToTokenToDepositorToDeposit(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token,\\n        address depositor\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 tokenId,\\n            uint32 withdrawalLeadTime,\\n            uint32 earliestWithdrawalTime,\\n            DepositState state\\n        )\\n    {\\n        Deposit\\n            storage deposit = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\\n                airnode\\n            ][chainId][requester][token].depositorToDeposit[depositor];\\n        (tokenId, withdrawalLeadTime, earliestWithdrawalTime, state) = (\\n            deposit.tokenId,\\n            deposit.withdrawalLeadTime,\\n            deposit.earliestWithdrawalTime,\\n            deposit.state\\n        );\\n    }\\n\\n    /// @notice Returns if the requester on the chain is authorized for the\\n    /// Airnode due to a token with the address being deposited\\n    /// @param airnode Airnode address\\n    /// @param chainId Chain ID\\n    /// @param requester Requester address\\n    /// @param token Token address\\n    /// @return Authorization status\\n    function isAuthorized(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external view override returns (bool) {\\n        return\\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\\n                requester\\n            ] &&\\n            airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[airnode][\\n                chainId\\n            ][requester][token].count >\\n            0;\\n    }\\n\\n    /// @notice Derives the withdrawal lead time setter role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return withdrawalLeadTimeSetterRole Withdrawal lead time setter role\\n    function deriveWithdrawalLeadTimeSetterRole(\\n        address airnode\\n    ) public view override returns (bytes32 withdrawalLeadTimeSetterRole) {\\n        withdrawalLeadTimeSetterRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the requester blocker role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return requesterBlockerRole Requester blocker role\\n    function deriveRequesterBlockerRole(\\n        address airnode\\n    ) public view override returns (bytes32 requesterBlockerRole) {\\n        requesterBlockerRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            REQUESTER_BLOCKER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n\\n    /// @notice Derives the depositor freezer role for the Airnode\\n    /// @param airnode Airnode address\\n    /// @return depositorFreezerRole Depositor freezer role\\n    function deriveDepositorFreezerRole(\\n        address airnode\\n    ) public view override returns (bytes32 depositorFreezerRole) {\\n        depositorFreezerRole = _deriveRole(\\n            _deriveAdminRole(airnode),\\n            DEPOSITOR_FREEZER_ROLE_DESCRIPTION_HASH\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xbcc385f2ec8c01559b2b00c6b21184a152a024b5c66d321b33d13a48d656f385\",\"license\":\"MIT\"},\"contracts/authorizers/interfaces/IRequesterAuthorizerWithErc721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"../../access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\\\";\\n\\ninterface IRequesterAuthorizerWithErc721 is\\n    IERC721Receiver,\\n    IAccessControlRegistryAdminned\\n{\\n    enum DepositState {\\n        Inactive,\\n        Active,\\n        WithdrawalInitiated\\n    }\\n\\n    event SetWithdrawalLeadTime(\\n        address indexed airnode,\\n        uint32 withdrawalLeadTime,\\n        address sender\\n    );\\n\\n    event SetRequesterBlockStatus(\\n        address indexed airnode,\\n        address indexed requester,\\n        uint256 chainId,\\n        bool status,\\n        address sender\\n    );\\n\\n    event SetDepositorFreezeStatus(\\n        address indexed airnode,\\n        address indexed depositor,\\n        bool status,\\n        address sender\\n    );\\n\\n    event DepositedToken(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 tokenDepositCount\\n    );\\n\\n    event UpdatedDepositRequesterFrom(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 tokenDepositCount\\n    );\\n\\n    event UpdatedDepositRequesterTo(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 tokenDepositCount\\n    );\\n\\n    event InitiatedTokenWithdrawal(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint32 earliestWithdrawalTime,\\n        uint256 tokenDepositCount\\n    );\\n\\n    event WithdrewToken(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 tokenDepositCount\\n    );\\n\\n    event RevokedToken(\\n        address indexed airnode,\\n        address indexed requester,\\n        address indexed depositor,\\n        uint256 chainId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 tokenDepositCount\\n    );\\n\\n    function setWithdrawalLeadTime(\\n        address airnode,\\n        uint32 withdrawalLeadTime\\n    ) external;\\n\\n    function setRequesterBlockStatus(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        bool status\\n    ) external;\\n\\n    function setDepositorFreezeStatus(\\n        address airnode,\\n        address depositor,\\n        bool status\\n    ) external;\\n\\n    function updateDepositRequester(\\n        address airnode,\\n        uint256 chainIdPrevious,\\n        address requesterPrevious,\\n        uint256 chainIdNext,\\n        address requesterNext,\\n        address token\\n    ) external;\\n\\n    function initiateTokenWithdrawal(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external returns (uint32 earliestWithdrawalTime);\\n\\n    function withdrawToken(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external;\\n\\n    function revokeToken(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token,\\n        address depositor\\n    ) external;\\n\\n    function airnodeToChainIdToRequesterToTokenToDepositorToDeposit(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token,\\n        address depositor\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 tokenId,\\n            uint32 withdrawalLeadTime,\\n            uint32 earliestWithdrawalTime,\\n            DepositState depositState\\n        );\\n\\n    function isAuthorized(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external view returns (bool);\\n\\n    function deriveWithdrawalLeadTimeSetterRole(\\n        address airnode\\n    ) external view returns (bytes32 withdrawalLeadTimeSetterRole);\\n\\n    function deriveRequesterBlockerRole(\\n        address airnode\\n    ) external view returns (bytes32 requesterBlockerRole);\\n\\n    function deriveDepositorFreezerRole(\\n        address airnode\\n    ) external view returns (bytes32 depositorFreezerRole);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function REQUESTER_BLOCKER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DEPOSITOR_FREEZER_ROLE_DESCRIPTION()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(\\n        address airnode,\\n        uint256 chainId,\\n        address requester,\\n        address token\\n    ) external view returns (uint256 tokenDepositCount);\\n\\n    function airnodeToWithdrawalLeadTime(\\n        address airnode\\n    ) external view returns (uint32 withdrawalLeadTime);\\n\\n    function airnodeToChainIdToRequesterToBlockStatus(\\n        address airnode,\\n        uint256 chainId,\\n        address requester\\n    ) external view returns (bool isBlocked);\\n\\n    function airnodeToDepositorToFreezeStatus(\\n        address airnode,\\n        address depositor\\n    ) external view returns (bool isFrozen);\\n}\\n\",\"keccak256\":\"0xb7ef76aef8e6246717d9447c9b12030c59ee58cf77126f711b62c8cd935efc6f\",\"license\":\"MIT\"},\"contracts/utils/SelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ISelfMulticall.sol\\\";\\n\\n/// @title Contract that enables calls to the inheriting contract to be batched\\n/// @notice Implements two ways of batching, one requires none of the calls to\\n/// revert and the other tolerates individual calls reverting\\n/// @dev This implementation uses delegatecall for individual function calls.\\n/// Since delegatecall is a message call, it can only be made to functions that\\n/// are externally visible. This means that a contract cannot multicall its own\\n/// functions that use internal/private visibility modifiers.\\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\\ncontract SelfMulticall is ISelfMulticall {\\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\\n    /// one of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function multicall(\\n        bytes[] calldata data\\n    ) external override returns (bytes[] memory returndata) {\\n        uint256 callCount = data.length;\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            bool success;\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\\n            if (!success) {\\n                bytes memory returndataWithRevertData = returndata[ind];\\n                if (returndataWithRevertData.length > 0) {\\n                    // Adapted from OpenZeppelin's Address.sol\\n                    // solhint-disable-next-line no-inline-assembly\\n                    assembly {\\n                        let returndata_size := mload(returndataWithRevertData)\\n                        revert(\\n                            add(32, returndataWithRevertData),\\n                            returndata_size\\n                        )\\n                    }\\n                } else {\\n                    revert(\\\"Multicall: No revert string\\\");\\n                }\\n            }\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n\\n    /// @notice Batches calls to the inheriting contract but does not revert if\\n    /// any of the batched calls reverts\\n    /// @param data Array of calldata of batched calls\\n    /// @return successes Array of success conditions of batched calls\\n    /// @return returndata Array of returndata of batched calls\\n    function tryMulticall(\\n        bytes[] calldata data\\n    )\\n        external\\n        override\\n        returns (bool[] memory successes, bytes[] memory returndata)\\n    {\\n        uint256 callCount = data.length;\\n        successes = new bool[](callCount);\\n        returndata = new bytes[](callCount);\\n        for (uint256 ind = 0; ind < callCount; ) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\\n                data[ind]\\n            );\\n            unchecked {\\n                ind++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb466760f7b5d05a91fb168224952f29db9aa3308f0b83535fd697f3c30281740\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IExpiringMetaTxForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExpiringMetaTxForwarder {\\n    event ExecutedMetaTx(bytes32 indexed metaTxHash);\\n\\n    event CanceledMetaTx(bytes32 indexed metaTxHash);\\n\\n    struct ExpiringMetaTx {\\n        address from;\\n        address to;\\n        bytes data;\\n        uint256 expirationTimestamp;\\n    }\\n\\n    function execute(\\n        ExpiringMetaTx calldata metaTx,\\n        bytes calldata signature\\n    ) external returns (bytes memory returndata);\\n\\n    function cancel(ExpiringMetaTx calldata metaTx) external;\\n\\n    function metaTxWithHashIsExecutedOrCanceled(\\n        bytes32 metaTxHash\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x07dd88733178b59486717a0b8a2027afcf3fbb5cc475166ee75327a683c7fa45\",\"license\":\"MIT\"},\"contracts/utils/interfaces/ISelfMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISelfMulticall {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory returndata);\\n\\n    function tryMulticall(\\n        bytes[] calldata data\\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\\n}\\n\",\"keccak256\":\"0x50b27284f0d5acd8b340836c09d252138ebf059f426e5d90d3f7221e1b7d0817\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b506040516200326538038062003265833981016040819052620000349162000170565b6001600160a01b0382166080819052829082906200008c5760405162461bcd60e51b815260206004820152601060248201526f4143522061646472657373207a65726f60801b60448201526064015b60405180910390fd5b6000815111620000df5760405162461bcd60e51b815260206004820152601c60248201527f41646d696e20726f6c65206465736372697074696f6e20656d70747900000000604482015260640162000083565b6001600160a01b03821660a0526000620000fa8282620002da565b50806040516020016200010e9190620003a6565b60408051601f19818403018152919052805160209091012060c05250620003c492505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001675781810151838201526020016200014d565b50506000910152565b600080604083850312156200018457600080fd5b82516001600160a01b03811681146200019c57600080fd5b60208401519092506001600160401b0380821115620001ba57600080fd5b818501915085601f830112620001cf57600080fd5b815181811115620001e457620001e462000134565b604051601f8201601f19908116603f011681019083821181831017156200020f576200020f62000134565b816040528281528860208487010111156200022957600080fd5b6200023c8360208301602088016200014a565b80955050505050509250929050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d557600081815260208120601f850160051c81016020861015620002b05750805b601f850160051c820191505b81811015620002d157828155600101620002bc565b5050505b505050565b81516001600160401b03811115620002f657620002f662000134565b6200030e816200030784546200024b565b8462000287565b602080601f8311600181146200034657600084156200032d5750858301515b600019600386901b1c1916600185901b178555620002d1565b600085815260208120601f198616915b82811015620003775788860151825594840194600190910190840162000356565b5085821015620003965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251620003ba8184602087016200014a565b9190910192915050565b60805160a05160c051612e556200041060003960006126c801526000818161022e01528181610a7501528181610edd0152611ffc01526000818161030d01526126310152612e556000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c80636a7de695116100ee578063ac9650d811610097578063cf46678a11610071578063cf46678a1461056e578063d0e463a014610581578063ed37a52114610594578063ed56e83c146105a757600080fd5b8063ac9650d814610528578063b2fe25d114610548578063bc1d287d1461055b57600080fd5b80638a2728a1116100c85780638a2728a11461047c57806390a1a23b146104b8578063a2b7719a146104ec57600080fd5b80636a7de6951461039f5780636d8d4d891461042f5780637fcc47361461044257600080fd5b8063482f3975116101505780635eab4f9a1161012a5780635eab4f9a1461033d578063619d7fa814610350578063691376521461037e57600080fd5b8063482f3975146102ac5780634c8f1d8d146102f5578063572b6c05146102fd57600080fd5b80631ce9ae07116101815780631ce9ae071461022957806328cd8b2e14610268578063437b91161461028b57600080fd5b806310cc23ba146101a8578063150b7a02146101e85780631a126f1a14610214575b600080fd5b6101ce6101b636600461279c565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6101fb6101f63660046127c0565b6105ba565b6040516001600160e01b031990911681526020016101df565b61022761022236600461285f565b610a51565b005b6102507f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101df565b61027b6102763660046128a1565b610c46565b60405190151581526020016101df565b61029e6102993660046128f4565b610cc5565b6040516101df929190612a0e565b6102e86040518060400160405280601181526020017f4465706f7369746f7220667265657a657200000000000000000000000000000081525081565b6040516101df9190612a67565b6102e8610e2b565b61027b61030b36600461279c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61022761034b366004612a88565b610eb9565b61027b61035e366004612ad0565b600460209081526000928352604080842090915290825290205460ff1681565b61039161038c36600461279c565b6110ff565b6040519081526020016101df565b61041f6103ad366004612afe565b6001600160a01b03948516600090815260016020818152604080842097845296815286832095881683529485528582209387168252928452848120919095168552810190915291208054910154909163ffffffff80831692640100000000810490911691600160401b90910460ff1690565b6040516101df9493929190612b7c565b61039161043d36600461279c565b611197565b6103916104503660046128a1565b600160209081526000948552604080862082529385528385208152918452828420909152825290205481565b6102e86040518060400160405280601b81526020017f5769746864726177616c206c6561642074696d6520736574746572000000000081525081565b61027b6104c6366004612bc4565b600360209081526000938452604080852082529284528284209052825290205460ff1681565b6102e86040518060400160405280601181526020017f52657175657374657220626c6f636b657200000000000000000000000000000081525081565b61053b6105363660046128f4565b6111eb565b6040516101df9190612c06565b610227610556366004612c19565b61136c565b61039161056936600461279c565b611a74565b61022761057c366004612afe565b611ac8565b6101ce61058f3660046128a1565b611dbe565b6102276105a2366004612c89565b611fd8565b6102276105b53660046128a1565b6121cf565b6000606082146106115760405162461bcd60e51b815260206004820152601660248201527f556e65787065637465642064617461206c656e6774680000000000000000000060448201526064015b60405180910390fd5b6000808061062185870187612bc4565b919450925090506001600160a01b03831661067e5760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f0000000000000000000000006044820152606401610608565b816000036106be5760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b0381166107145760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b03808416600090815260036020908152604080832086845282528083209385168352929052205460ff16156107925760405162461bcd60e51b815260206004820152601160248201527f52657175657374657220626c6f636b65640000000000000000000000000000006044820152606401610608565b6001600160a01b038084166000908152600460209081526040808320938c168352929052205460ff16156107fb5760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b038084166000908152600160209081526040808320868452825280832093851683529290529081208161083361262d565b6001600160a01b03168152602081019190915260400160009081208054600101808255909250906001600160a01b038b166000908152600184810160205260409091200154600160401b900460ff16600281111561089357610893612b66565b146108e05760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c7265616479206465706f73697465640000000000000000006044820152606401610608565b604080516080810182528a81526001600160a01b0387166000908152600260209081528382205463ffffffff16908301529181019190915260608101600190526001600160a01b038b16600090815260018085016020908152604092839020845181559084015191810180549385015163ffffffff9081166401000000000267ffffffffffffffff19909516931692909217929092178082556060840151919068ff00000000000000001916600160401b8360028111156109a3576109a3612b66565b0217905550905050896001600160a01b0316836001600160a01b0316866001600160a01b03167f733c0f83c361174d76ad99d0165c72fec3f3780aed76ef16dc2733f8864fd3c4876109f361262d565b604080519283526001600160a01b03909116602083015281018e90526060810186905260800160405180910390a4507f150b7a02000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b610a5961262d565b6001600160a01b0316826001600160a01b03161480610b2157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d14854610aab846110ff565b610ab361262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190612cc9565b610b6d5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f7420736574206c6561642074696d6500000000006044820152606401610608565b62278d008163ffffffff161115610bc65760405162461bcd60e51b815260206004820152601260248201527f4c6561642074696d6520746f6f206c6f6e6700000000000000000000000000006044820152606401610608565b6001600160a01b0382166000818152600260205260409020805463ffffffff191663ffffffff84161790557f461885426a8ca6cc3a301f29008e2424cb0cc663f8a5e8da1245385521d7ca8e82610c1b61262d565b6040805163ffffffff90931683526001600160a01b0390911660208301520160405180910390a25050565b6001600160a01b038085166000908152600360209081526040808320878452825280832093861683529290529081205460ff16158015610cbc57506001600160a01b0380861660009081526001602090815260408083208884528252808320878516845282528083209386168352929052205415155b95945050505050565b606080828067ffffffffffffffff811115610ce257610ce2612ce6565b604051908082528060200260200182016040528015610d0b578160200160208202803683370190505b5092508067ffffffffffffffff811115610d2757610d27612ce6565b604051908082528060200260200182016040528015610d5a57816020015b6060815260200190600190039081610d455790505b50915060005b81811015610e225730868683818110610d7b57610d7b612cfc565b9050602002810190610d8d9190612d12565b604051610d9b929190612d60565b600060405180830381855af49150503d8060008114610dd6576040519150601f19603f3d011682016040523d82523d6000602084013e610ddb565b606091505b50858381518110610dee57610dee612cfc565b60200260200101858481518110610e0757610e07612cfc565b60209081029190910101919091529015159052600101610d60565b50509250929050565b60008054610e3890612d70565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6490612d70565b8015610eb15780601f10610e8657610100808354040283529160200191610eb1565b820191906000526020600020905b815481529060010190602001808311610e9457829003601f168201915b505050505081565b610ec161262d565b6001600160a01b0316846001600160a01b03161480610f8957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d14854610f1386611197565b610f1b61262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190612cc9565b610fd55760405162461bcd60e51b815260206004820152601d60248201527f53656e6465722063616e6e6f7420626c6f636b207265717565737465720000006044820152606401610608565b826000036110155760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b03821661106b5760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b0384811660008181526003602090815260408083208884528252808320948716808452949091529020805460ff19168415151790557ff31809ebfa88e2c0953544b9b342339317994a5e456412135c34a38f7d82359385846110d261262d565b6040805193845291151560208401526001600160a01b03169082015260600160405180910390a350505050565b600061119161110d83612671565b6040518060400160405280601b81526020017f5769746864726177616c206c6561642074696d652073657474657200000000008152506040516020016111539190612daa565b60408051601f198184030181528282528051602091820120838201949094528282019390935280518083038201815260609092019052805191012090565b92915050565b60006111916111a583612671565b6040518060400160405280601181526020017f52657175657374657220626c6f636b65720000000000000000000000000000008152506040516020016111539190612daa565b6060818067ffffffffffffffff81111561120757611207612ce6565b60405190808252806020026020018201604052801561123a57816020015b60608152602001906001900390816112255790505b50915060005b818110156113645760003086868481811061125d5761125d612cfc565b905060200281019061126f9190612d12565b60405161127d929190612d60565b600060405180830381855af49150503d80600081146112b8576040519150601f19603f3d011682016040523d82523d6000602084013e6112bd565b606091505b508584815181106112d0576112d0612cfc565b602090810291909101015290508061135b5760008483815181106112f6576112f6612cfc565b602002602001015190506000815111156113135780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610608565b50600101611240565b505092915050565b826000036113ac5760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b0382166114025760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b82851480156114225750816001600160a01b0316846001600160a01b0316145b1561146f5760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f742075706461746520726571756573746572000000000000006044820152606401610608565b6001600160a01b03808716600090815260036020908152604080832089845282528083209388168352929052205460ff16156114ed5760405162461bcd60e51b815260206004820152601a60248201527f50726576696f75732072657175657374657220626c6f636b65640000000000006044820152606401610608565b6001600160a01b03808716600090815260036020908152604080832087845282528083209386168352929052205460ff161561156b5760405162461bcd60e51b815260206004820152601660248201527f4e6578742072657175657374657220626c6f636b6564000000000000000000006044820152606401610608565b6001600160a01b03861660009081526004602052604081209061158c61262d565b6001600160a01b0316815260208101919091526040016000205460ff16156115e95760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b0380871660009081526001602081815260408084208a855282528084208986168552825280842094861684529390529181209182018161162e61262d565b6001600160a01b0316815260208101919091526040016000209050600180820154600160401b900460ff16600281111561166a5761166a612b66565b1461171c5760006001820154600160401b900460ff16600281111561169157611691612b66565b036116d45760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b60405162461bcd60e51b815260206004820152601460248201527f5769746864726177616c20696e697469617465640000000000000000000000006044820152606401610608565b6001600160a01b0388811660009081526001602081815260408084208a855282528084208986168552825280842094881684529390529181209182018161176161262d565b6001600160a01b03168152602081019190915260400160002060010154600160401b900460ff16600281111561179957611799612b66565b146117e65760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c7265616479206465706f73697465640000000000000000006044820152606401610608565b600081600001600081546117f990612ddc565b918290555080835584549091506000908590829061181690612df5565b918290555080865584546040805160808101825282815260018089015463ffffffff166020830152600092820183905260608201819052939450919286019061185d61262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b8360028111156118de576118de612b66565b021790555050604080516080810182526000808252602082018190529181018290529150606082015260018701600061191561262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b83600281111561199657611996612b66565b02179055509050506119a661262d565b604080518b81526001600160a01b038a8116602083015291810184905260608101869052918116918a8216918f16907f054e367880d46b4892f07cbf12971cc3eaf25aa0e135deb8aa39b1b1b464a10f9060800160405180910390a4611a0a61262d565b604080518d81526001600160a01b038a8116602083015291810184905260608101859052918116918c8216918f16907f1bfc51ce5c8716823ac909ee739d0faff222a753c0d6684ffe76b59383c6cf989060800160405180910390a4505050505050505050505050565b6000611191611a8283612671565b6040518060400160405280601181526020017f4465706f7369746f7220667265657a65720000000000000000000000000000008152506040516020016111539190612daa565b6001600160a01b03808616600090815260036020908152604080832088845282528083209387168352929052205460ff16611b455760405162461bcd60e51b815260206004820152601f60248201527f4169726e6f646520646964206e6f7420626c6f636b20726571756573746572006044820152606401610608565b6001600160a01b03808616600090815260016020818152604080842089855282528084208886168552825280842087861685528252808420948616845291840190528120906001820154600160401b900460ff166002811115611baa57611baa612b66565b03611bed5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b6000600180830154600160401b900460ff166002811115611c1057611c10612b66565b03611c245750815460001901808355611c28565b5081545b8154604080516080810182526000808252602082018190529181018290529060608201526001600160a01b038616600090815260018087016020908152604092839020845181559084015191810180549385015163ffffffff9081166401000000000267ffffffffffffffff19909516931692909217929092178082556060840151919068ff00000000000000001916600160401b836002811115611ccf57611ccf612b66565b021790555050604080518a81526001600160a01b038981166020830152918101849052606081018590528188169250898216918c16907f346d2ebe813e4f3cb5eca2d4ff82fdf6cb82ebbcd12a9c313616e526917c56ac9060800160405180910390a46040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038a81166024830152604482018390528716906342842e0e90606401600060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b038085166000908152600160208181526040808420888552825280842087861685528252808420948616845293905291812090918290820181611e0661262d565b6001600160a01b0316815260208101919091526040016000209050600180820154600160401b900460ff166002811115611e4257611e42612b66565b14611ef45760006001820154600160401b900460ff166002811115611e6957611e69612b66565b03611eac5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b60405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c726561647920696e69746961746564000000006044820152606401610608565b8154600019018083556001820154611f1b90611f169063ffffffff1642612e0c565b612704565b6001830180546802000000000000000068ffffffffff000000001990911668ff00000000000000001964010000000063ffffffff86160216171790559350611f6161262d565b8254604080518a81526001600160a01b0389811660208301529181019290925263ffffffff87166060830152608082018490529182169188811691908b16907f31db03120c5cd862f4acfba61b4c177545e3a506c5110f50cc6ece21586f57539060a00160405180910390a4505050949350505050565b611fe061262d565b6001600160a01b0316836001600160a01b031614806120a857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d1485461203285611a74565b61203a61262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a89190612cc9565b6120f45760405162461bcd60e51b815260206004820152601e60248201527f53656e6465722063616e6e6f7420667265657a65206465706f7369746f7200006044820152606401610608565b6001600160a01b03821661214a5760405162461bcd60e51b815260206004820152601660248201527f4465706f7369746f722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b038381166000818152600460209081526040808320948716808452949091529020805460ff19168415151790557f9eb8827fae67b31c98956fd47f8403bf132d72d483649ae3ad4f18477087e650836121a861262d565b6040805192151583526001600160a01b0390911660208301520160405180910390a3505050565b6001600160a01b03808516600090815260036020908152604080832087845282528083209386168352929052205460ff161561224d5760405162461bcd60e51b815260206004820152601160248201527f52657175657374657220626c6f636b65640000000000000000000000000000006044820152606401610608565b6001600160a01b03841660009081526004602052604081209061226e61262d565b6001600160a01b0316815260208101919091526040016000205460ff16156122cb5760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b03808516600090815260016020818152604080842088855282528084208786168552825280842094861684529390529181209182018161231061262d565b6001600160a01b031681526020810191909152604001600090812091506001820154600160401b900460ff16600281111561234d5761234d612b66565b036123905760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b6000600180830154600160401b900460ff1660028111156123b3576123b3612b66565b0361241f57600182015463ffffffff16156124105760405162461bcd60e51b815260206004820152601860248201527f5769746864726177616c206e6f7420696e6974696174656400000000000000006044820152606401610608565b50815460001901808355612485565b6001820154640100000000900463ffffffff164210156124815760405162461bcd60e51b815260206004820152601360248201527f43616e6e6f7420776974686472617720796574000000000000000000000000006044820152606401610608565b5081545b8154604080516080810182526000808252602082018190529181018290529060608201526001850160006124b761262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b83600281111561253857612538612b66565b021790555090505061254861262d565b604080518981526001600160a01b0388811660208301529181018490526060810185905291811691888216918b16907f4777af5e3e1be8181a4183502633c34680db9491e0a972afeeb45414935944fb9060800160405180910390a4846001600160a01b03166342842e0e306125bc61262d565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361266c575060131936013560601c90565b503390565b60006111916126b9836040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b604080516020808201939093527f0000000000000000000000000000000000000000000000000000000000000000818301528151808203830181526060909101909152805191012090565b600063ffffffff8211156127805760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610608565b5090565b6001600160a01b038116811461279957600080fd5b50565b6000602082840312156127ae57600080fd5b81356127b981612784565b9392505050565b6000806000806000608086880312156127d857600080fd5b85356127e381612784565b945060208601356127f381612784565b935060408601359250606086013567ffffffffffffffff8082111561281757600080fd5b818801915088601f83011261282b57600080fd5b81358181111561283a57600080fd5b89602082850101111561284c57600080fd5b9699959850939650602001949392505050565b6000806040838503121561287257600080fd5b823561287d81612784565b9150602083013563ffffffff8116811461289657600080fd5b809150509250929050565b600080600080608085870312156128b757600080fd5b84356128c281612784565b93506020850135925060408501356128d981612784565b915060608501356128e981612784565b939692955090935050565b6000806020838503121561290757600080fd5b823567ffffffffffffffff8082111561291f57600080fd5b818501915085601f83011261293357600080fd5b81358181111561294257600080fd5b8660208260051b850101111561295757600080fd5b60209290920196919550909350505050565b60005b8381101561298457818101518382015260200161296c565b50506000910152565b600081518084526129a5816020860160208601612969565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a015782840389526129ef84835161298d565b988501989350908401906001016129d7565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612a49578151151584529284019290840190600101612a2b565b50505083810382850152612a5d81866129b9565b9695505050505050565b6020815260006127b9602083018461298d565b801515811461279957600080fd5b60008060008060808587031215612a9e57600080fd5b8435612aa981612784565b9350602085013592506040850135612ac081612784565b915060608501356128e981612a7a565b60008060408385031215612ae357600080fd5b8235612aee81612784565b9150602083013561289681612784565b600080600080600060a08688031215612b1657600080fd5b8535612b2181612784565b9450602086013593506040860135612b3881612784565b92506060860135612b4881612784565b91506080860135612b5881612784565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b84815263ffffffff8481166020830152831660408201526080810160038310612bb557634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b600080600060608486031215612bd957600080fd5b8335612be481612784565b9250602084013591506040840135612bfb81612784565b809150509250925092565b6020815260006127b960208301846129b9565b60008060008060008060c08789031215612c3257600080fd5b8635612c3d81612784565b9550602087013594506040870135612c5481612784565b9350606087013592506080870135612c6b81612784565b915060a0870135612c7b81612784565b809150509295509295509295565b600080600060608486031215612c9e57600080fd5b8335612ca981612784565b92506020840135612cb981612784565b91506040840135612bfb81612a7a565b600060208284031215612cdb57600080fd5b81516127b981612a7a565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d2957600080fd5b83018035915067ffffffffffffffff821115612d4457600080fd5b602001915036819003821315612d5957600080fd5b9250929050565b8183823760009101908152919050565b600181811c90821680612d8457607f821691505b602082108103612da457634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612dbc818460208701612969565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600060018201612dee57612dee612dc6565b5060010190565b600081612e0457612e04612dc6565b506000190190565b8082018082111561119157611191612dc656fea2646970667358221220f03ccc95b90b36774e156213a313db7129e0a152e0fdeffe877114b75d48363464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a35760003560e01c80636a7de695116100ee578063ac9650d811610097578063cf46678a11610071578063cf46678a1461056e578063d0e463a014610581578063ed37a52114610594578063ed56e83c146105a757600080fd5b8063ac9650d814610528578063b2fe25d114610548578063bc1d287d1461055b57600080fd5b80638a2728a1116100c85780638a2728a11461047c57806390a1a23b146104b8578063a2b7719a146104ec57600080fd5b80636a7de6951461039f5780636d8d4d891461042f5780637fcc47361461044257600080fd5b8063482f3975116101505780635eab4f9a1161012a5780635eab4f9a1461033d578063619d7fa814610350578063691376521461037e57600080fd5b8063482f3975146102ac5780634c8f1d8d146102f5578063572b6c05146102fd57600080fd5b80631ce9ae07116101815780631ce9ae071461022957806328cd8b2e14610268578063437b91161461028b57600080fd5b806310cc23ba146101a8578063150b7a02146101e85780631a126f1a14610214575b600080fd5b6101ce6101b636600461279c565b60026020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b6101fb6101f63660046127c0565b6105ba565b6040516001600160e01b031990911681526020016101df565b61022761022236600461285f565b610a51565b005b6102507f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101df565b61027b6102763660046128a1565b610c46565b60405190151581526020016101df565b61029e6102993660046128f4565b610cc5565b6040516101df929190612a0e565b6102e86040518060400160405280601181526020017f4465706f7369746f7220667265657a657200000000000000000000000000000081525081565b6040516101df9190612a67565b6102e8610e2b565b61027b61030b36600461279c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b61022761034b366004612a88565b610eb9565b61027b61035e366004612ad0565b600460209081526000928352604080842090915290825290205460ff1681565b61039161038c36600461279c565b6110ff565b6040519081526020016101df565b61041f6103ad366004612afe565b6001600160a01b03948516600090815260016020818152604080842097845296815286832095881683529485528582209387168252928452848120919095168552810190915291208054910154909163ffffffff80831692640100000000810490911691600160401b90910460ff1690565b6040516101df9493929190612b7c565b61039161043d36600461279c565b611197565b6103916104503660046128a1565b600160209081526000948552604080862082529385528385208152918452828420909152825290205481565b6102e86040518060400160405280601b81526020017f5769746864726177616c206c6561642074696d6520736574746572000000000081525081565b61027b6104c6366004612bc4565b600360209081526000938452604080852082529284528284209052825290205460ff1681565b6102e86040518060400160405280601181526020017f52657175657374657220626c6f636b657200000000000000000000000000000081525081565b61053b6105363660046128f4565b6111eb565b6040516101df9190612c06565b610227610556366004612c19565b61136c565b61039161056936600461279c565b611a74565b61022761057c366004612afe565b611ac8565b6101ce61058f3660046128a1565b611dbe565b6102276105a2366004612c89565b611fd8565b6102276105b53660046128a1565b6121cf565b6000606082146106115760405162461bcd60e51b815260206004820152601660248201527f556e65787065637465642064617461206c656e6774680000000000000000000060448201526064015b60405180910390fd5b6000808061062185870187612bc4565b919450925090506001600160a01b03831661067e5760405162461bcd60e51b815260206004820152601460248201527f4169726e6f64652061646472657373207a65726f0000000000000000000000006044820152606401610608565b816000036106be5760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b0381166107145760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b03808416600090815260036020908152604080832086845282528083209385168352929052205460ff16156107925760405162461bcd60e51b815260206004820152601160248201527f52657175657374657220626c6f636b65640000000000000000000000000000006044820152606401610608565b6001600160a01b038084166000908152600460209081526040808320938c168352929052205460ff16156107fb5760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b038084166000908152600160209081526040808320868452825280832093851683529290529081208161083361262d565b6001600160a01b03168152602081019190915260400160009081208054600101808255909250906001600160a01b038b166000908152600184810160205260409091200154600160401b900460ff16600281111561089357610893612b66565b146108e05760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c7265616479206465706f73697465640000000000000000006044820152606401610608565b604080516080810182528a81526001600160a01b0387166000908152600260209081528382205463ffffffff16908301529181019190915260608101600190526001600160a01b038b16600090815260018085016020908152604092839020845181559084015191810180549385015163ffffffff9081166401000000000267ffffffffffffffff19909516931692909217929092178082556060840151919068ff00000000000000001916600160401b8360028111156109a3576109a3612b66565b0217905550905050896001600160a01b0316836001600160a01b0316866001600160a01b03167f733c0f83c361174d76ad99d0165c72fec3f3780aed76ef16dc2733f8864fd3c4876109f361262d565b604080519283526001600160a01b03909116602083015281018e90526060810186905260800160405180910390a4507f150b7a02000000000000000000000000000000000000000000000000000000009a9950505050505050505050565b610a5961262d565b6001600160a01b0316826001600160a01b03161480610b2157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d14854610aab846110ff565b610ab361262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190612cc9565b610b6d5760405162461bcd60e51b815260206004820152601b60248201527f53656e6465722063616e6e6f7420736574206c6561642074696d6500000000006044820152606401610608565b62278d008163ffffffff161115610bc65760405162461bcd60e51b815260206004820152601260248201527f4c6561642074696d6520746f6f206c6f6e6700000000000000000000000000006044820152606401610608565b6001600160a01b0382166000818152600260205260409020805463ffffffff191663ffffffff84161790557f461885426a8ca6cc3a301f29008e2424cb0cc663f8a5e8da1245385521d7ca8e82610c1b61262d565b6040805163ffffffff90931683526001600160a01b0390911660208301520160405180910390a25050565b6001600160a01b038085166000908152600360209081526040808320878452825280832093861683529290529081205460ff16158015610cbc57506001600160a01b0380861660009081526001602090815260408083208884528252808320878516845282528083209386168352929052205415155b95945050505050565b606080828067ffffffffffffffff811115610ce257610ce2612ce6565b604051908082528060200260200182016040528015610d0b578160200160208202803683370190505b5092508067ffffffffffffffff811115610d2757610d27612ce6565b604051908082528060200260200182016040528015610d5a57816020015b6060815260200190600190039081610d455790505b50915060005b81811015610e225730868683818110610d7b57610d7b612cfc565b9050602002810190610d8d9190612d12565b604051610d9b929190612d60565b600060405180830381855af49150503d8060008114610dd6576040519150601f19603f3d011682016040523d82523d6000602084013e610ddb565b606091505b50858381518110610dee57610dee612cfc565b60200260200101858481518110610e0757610e07612cfc565b60209081029190910101919091529015159052600101610d60565b50509250929050565b60008054610e3890612d70565b80601f0160208091040260200160405190810160405280929190818152602001828054610e6490612d70565b8015610eb15780601f10610e8657610100808354040283529160200191610eb1565b820191906000526020600020905b815481529060010190602001808311610e9457829003601f168201915b505050505081565b610ec161262d565b6001600160a01b0316846001600160a01b03161480610f8957507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d14854610f1386611197565b610f1b61262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015610f65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f899190612cc9565b610fd55760405162461bcd60e51b815260206004820152601d60248201527f53656e6465722063616e6e6f7420626c6f636b207265717565737465720000006044820152606401610608565b826000036110155760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b03821661106b5760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b0384811660008181526003602090815260408083208884528252808320948716808452949091529020805460ff19168415151790557ff31809ebfa88e2c0953544b9b342339317994a5e456412135c34a38f7d82359385846110d261262d565b6040805193845291151560208401526001600160a01b03169082015260600160405180910390a350505050565b600061119161110d83612671565b6040518060400160405280601b81526020017f5769746864726177616c206c6561642074696d652073657474657200000000008152506040516020016111539190612daa565b60408051601f198184030181528282528051602091820120838201949094528282019390935280518083038201815260609092019052805191012090565b92915050565b60006111916111a583612671565b6040518060400160405280601181526020017f52657175657374657220626c6f636b65720000000000000000000000000000008152506040516020016111539190612daa565b6060818067ffffffffffffffff81111561120757611207612ce6565b60405190808252806020026020018201604052801561123a57816020015b60608152602001906001900390816112255790505b50915060005b818110156113645760003086868481811061125d5761125d612cfc565b905060200281019061126f9190612d12565b60405161127d929190612d60565b600060405180830381855af49150503d80600081146112b8576040519150601f19603f3d011682016040523d82523d6000602084013e6112bd565b606091505b508584815181106112d0576112d0612cfc565b602090810291909101015290508061135b5760008483815181106112f6576112f6612cfc565b602002602001015190506000815111156113135780518082602001fd5b60405162461bcd60e51b815260206004820152601b60248201527f4d756c746963616c6c3a204e6f2072657665727420737472696e6700000000006044820152606401610608565b50600101611240565b505092915050565b826000036113ac5760405162461bcd60e51b815260206004820152600d60248201526c436861696e204944207a65726f60981b6044820152606401610608565b6001600160a01b0382166114025760405162461bcd60e51b815260206004820152601660248201527f5265717565737465722061646472657373207a65726f000000000000000000006044820152606401610608565b82851480156114225750816001600160a01b0316846001600160a01b0316145b1561146f5760405162461bcd60e51b815260206004820152601960248201527f446f6573206e6f742075706461746520726571756573746572000000000000006044820152606401610608565b6001600160a01b03808716600090815260036020908152604080832089845282528083209388168352929052205460ff16156114ed5760405162461bcd60e51b815260206004820152601a60248201527f50726576696f75732072657175657374657220626c6f636b65640000000000006044820152606401610608565b6001600160a01b03808716600090815260036020908152604080832087845282528083209386168352929052205460ff161561156b5760405162461bcd60e51b815260206004820152601660248201527f4e6578742072657175657374657220626c6f636b6564000000000000000000006044820152606401610608565b6001600160a01b03861660009081526004602052604081209061158c61262d565b6001600160a01b0316815260208101919091526040016000205460ff16156115e95760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b0380871660009081526001602081815260408084208a855282528084208986168552825280842094861684529390529181209182018161162e61262d565b6001600160a01b0316815260208101919091526040016000209050600180820154600160401b900460ff16600281111561166a5761166a612b66565b1461171c5760006001820154600160401b900460ff16600281111561169157611691612b66565b036116d45760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b60405162461bcd60e51b815260206004820152601460248201527f5769746864726177616c20696e697469617465640000000000000000000000006044820152606401610608565b6001600160a01b0388811660009081526001602081815260408084208a855282528084208986168552825280842094881684529390529181209182018161176161262d565b6001600160a01b03168152602081019190915260400160002060010154600160401b900460ff16600281111561179957611799612b66565b146117e65760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20616c7265616479206465706f73697465640000000000000000006044820152606401610608565b600081600001600081546117f990612ddc565b918290555080835584549091506000908590829061181690612df5565b918290555080865584546040805160808101825282815260018089015463ffffffff166020830152600092820183905260608201819052939450919286019061185d61262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b8360028111156118de576118de612b66565b021790555050604080516080810182526000808252602082018190529181018290529150606082015260018701600061191561262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b83600281111561199657611996612b66565b02179055509050506119a661262d565b604080518b81526001600160a01b038a8116602083015291810184905260608101869052918116918a8216918f16907f054e367880d46b4892f07cbf12971cc3eaf25aa0e135deb8aa39b1b1b464a10f9060800160405180910390a4611a0a61262d565b604080518d81526001600160a01b038a8116602083015291810184905260608101859052918116918c8216918f16907f1bfc51ce5c8716823ac909ee739d0faff222a753c0d6684ffe76b59383c6cf989060800160405180910390a4505050505050505050505050565b6000611191611a8283612671565b6040518060400160405280601181526020017f4465706f7369746f7220667265657a65720000000000000000000000000000008152506040516020016111539190612daa565b6001600160a01b03808616600090815260036020908152604080832088845282528083209387168352929052205460ff16611b455760405162461bcd60e51b815260206004820152601f60248201527f4169726e6f646520646964206e6f7420626c6f636b20726571756573746572006044820152606401610608565b6001600160a01b03808616600090815260016020818152604080842089855282528084208886168552825280842087861685528252808420948616845291840190528120906001820154600160401b900460ff166002811115611baa57611baa612b66565b03611bed5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b6000600180830154600160401b900460ff166002811115611c1057611c10612b66565b03611c245750815460001901808355611c28565b5081545b8154604080516080810182526000808252602082018190529181018290529060608201526001600160a01b038616600090815260018087016020908152604092839020845181559084015191810180549385015163ffffffff9081166401000000000267ffffffffffffffff19909516931692909217929092178082556060840151919068ff00000000000000001916600160401b836002811115611ccf57611ccf612b66565b021790555050604080518a81526001600160a01b038981166020830152918101849052606081018590528188169250898216918c16907f346d2ebe813e4f3cb5eca2d4ff82fdf6cb82ebbcd12a9c313616e526917c56ac9060800160405180910390a46040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038a81166024830152604482018390528716906342842e0e90606401600060405180830381600087803b158015611d9b57600080fd5b505af1158015611daf573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b038085166000908152600160208181526040808420888552825280842087861685528252808420948616845293905291812090918290820181611e0661262d565b6001600160a01b0316815260208101919091526040016000209050600180820154600160401b900460ff166002811115611e4257611e42612b66565b14611ef45760006001820154600160401b900460ff166002811115611e6957611e69612b66565b03611eac5760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b60405162461bcd60e51b815260206004820152601c60248201527f5769746864726177616c20616c726561647920696e69746961746564000000006044820152606401610608565b8154600019018083556001820154611f1b90611f169063ffffffff1642612e0c565b612704565b6001830180546802000000000000000068ffffffffff000000001990911668ff00000000000000001964010000000063ffffffff86160216171790559350611f6161262d565b8254604080518a81526001600160a01b0389811660208301529181019290925263ffffffff87166060830152608082018490529182169188811691908b16907f31db03120c5cd862f4acfba61b4c177545e3a506c5110f50cc6ece21586f57539060a00160405180910390a4505050949350505050565b611fe061262d565b6001600160a01b0316836001600160a01b031614806120a857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166391d1485461203285611a74565b61203a61262d565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b03166024820152604401602060405180830381865afa158015612084573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a89190612cc9565b6120f45760405162461bcd60e51b815260206004820152601e60248201527f53656e6465722063616e6e6f7420667265657a65206465706f7369746f7200006044820152606401610608565b6001600160a01b03821661214a5760405162461bcd60e51b815260206004820152601660248201527f4465706f7369746f722061646472657373207a65726f000000000000000000006044820152606401610608565b6001600160a01b038381166000818152600460209081526040808320948716808452949091529020805460ff19168415151790557f9eb8827fae67b31c98956fd47f8403bf132d72d483649ae3ad4f18477087e650836121a861262d565b6040805192151583526001600160a01b0390911660208301520160405180910390a3505050565b6001600160a01b03808516600090815260036020908152604080832087845282528083209386168352929052205460ff161561224d5760405162461bcd60e51b815260206004820152601160248201527f52657175657374657220626c6f636b65640000000000000000000000000000006044820152606401610608565b6001600160a01b03841660009081526004602052604081209061226e61262d565b6001600160a01b0316815260208101919091526040016000205460ff16156122cb5760405162461bcd60e51b815260206004820152601060248201526f2232b837b9b4ba37b910333937bd32b760811b6044820152606401610608565b6001600160a01b03808516600090815260016020818152604080842088855282528084208786168552825280842094861684529390529181209182018161231061262d565b6001600160a01b031681526020810191909152604001600090812091506001820154600160401b900460ff16600281111561234d5761234d612b66565b036123905760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881b9bdd0819195c1bdcda5d1959606a1b6044820152606401610608565b6000600180830154600160401b900460ff1660028111156123b3576123b3612b66565b0361241f57600182015463ffffffff16156124105760405162461bcd60e51b815260206004820152601860248201527f5769746864726177616c206e6f7420696e6974696174656400000000000000006044820152606401610608565b50815460001901808355612485565b6001820154640100000000900463ffffffff164210156124815760405162461bcd60e51b815260206004820152601360248201527f43616e6e6f7420776974686472617720796574000000000000000000000000006044820152606401610608565b5081545b8154604080516080810182526000808252602082018190529181018290529060608201526001850160006124b761262d565b6001600160a01b03168152602080820192909252604090810160002083518155918301516001830180549285015163ffffffff9081166401000000000267ffffffffffffffff19909416921691909117919091178082556060840151919068ff00000000000000001916600160401b83600281111561253857612538612b66565b021790555090505061254861262d565b604080518981526001600160a01b0388811660208301529181018490526060810185905291811691888216918b16907f4777af5e3e1be8181a4183502633c34680db9491e0a972afeeb45414935944fb9060800160405180910390a4846001600160a01b03166342842e0e306125bc61262d565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101849052606401600060405180830381600087803b15801561260b57600080fd5b505af115801561261f573d6000803e3d6000fd5b505050505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316330361266c575060131936013560601c90565b503390565b60006111916126b9836040516bffffffffffffffffffffffff19606083901b166020820152600090603401604051602081830303815290604052805190602001209050919050565b604080516020808201939093527f0000000000000000000000000000000000000000000000000000000000000000818301528151808203830181526060909101909152805191012090565b600063ffffffff8211156127805760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201527f32206269747300000000000000000000000000000000000000000000000000006064820152608401610608565b5090565b6001600160a01b038116811461279957600080fd5b50565b6000602082840312156127ae57600080fd5b81356127b981612784565b9392505050565b6000806000806000608086880312156127d857600080fd5b85356127e381612784565b945060208601356127f381612784565b935060408601359250606086013567ffffffffffffffff8082111561281757600080fd5b818801915088601f83011261282b57600080fd5b81358181111561283a57600080fd5b89602082850101111561284c57600080fd5b9699959850939650602001949392505050565b6000806040838503121561287257600080fd5b823561287d81612784565b9150602083013563ffffffff8116811461289657600080fd5b809150509250929050565b600080600080608085870312156128b757600080fd5b84356128c281612784565b93506020850135925060408501356128d981612784565b915060608501356128e981612784565b939692955090935050565b6000806020838503121561290757600080fd5b823567ffffffffffffffff8082111561291f57600080fd5b818501915085601f83011261293357600080fd5b81358181111561294257600080fd5b8660208260051b850101111561295757600080fd5b60209290920196919550909350505050565b60005b8381101561298457818101518382015260200161296c565b50506000910152565b600081518084526129a5816020860160208601612969565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612a015782840389526129ef84835161298d565b988501989350908401906001016129d7565b5091979650505050505050565b604080825283519082018190526000906020906060840190828701845b82811015612a49578151151584529284019290840190600101612a2b565b50505083810382850152612a5d81866129b9565b9695505050505050565b6020815260006127b9602083018461298d565b801515811461279957600080fd5b60008060008060808587031215612a9e57600080fd5b8435612aa981612784565b9350602085013592506040850135612ac081612784565b915060608501356128e981612a7a565b60008060408385031215612ae357600080fd5b8235612aee81612784565b9150602083013561289681612784565b600080600080600060a08688031215612b1657600080fd5b8535612b2181612784565b9450602086013593506040860135612b3881612784565b92506060860135612b4881612784565b91506080860135612b5881612784565b809150509295509295909350565b634e487b7160e01b600052602160045260246000fd5b84815263ffffffff8481166020830152831660408201526080810160038310612bb557634e487b7160e01b600052602160045260246000fd5b82606083015295945050505050565b600080600060608486031215612bd957600080fd5b8335612be481612784565b9250602084013591506040840135612bfb81612784565b809150509250925092565b6020815260006127b960208301846129b9565b60008060008060008060c08789031215612c3257600080fd5b8635612c3d81612784565b9550602087013594506040870135612c5481612784565b9350606087013592506080870135612c6b81612784565b915060a0870135612c7b81612784565b809150509295509295509295565b600080600060608486031215612c9e57600080fd5b8335612ca981612784565b92506020840135612cb981612784565b91506040840135612bfb81612a7a565b600060208284031215612cdb57600080fd5b81516127b981612a7a565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112612d2957600080fd5b83018035915067ffffffffffffffff821115612d4457600080fd5b602001915036819003821315612d5957600080fd5b9250929050565b8183823760009101908152919050565b600181811c90821680612d8457607f821691505b602082108103612da457634e487b7160e01b600052602260045260246000fd5b50919050565b60008251612dbc818460208701612969565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b600060018201612dee57612dee612dc6565b5060010190565b600081612e0457612e04612dc6565b506000190190565b8082018082111561119157611191612dc656fea2646970667358221220f03ccc95b90b36774e156213a313db7129e0a152e0fdeffe877114b75d48363464736f6c63430008110033",
  "devdoc": {
    "details": "Airnode operators are strongly recommended to only use a single instance of this contract as an authorizer. If multiple instances are used, the state between the instances should be kept consistent. For example, if a requester on a chain is to be blocked, all instances of this contract that are used as authorizers for the chain should be updated. Otherwise, the requester to be blocked can still be authorized via the instances that have not been updated.",
    "kind": "dev",
    "methods": {
      "airnodeToChainIdToRequesterToTokenToDepositorToDeposit(address,uint256,address,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "depositor": "Depositor address",
          "requester": "Requester address",
          "token": "Token address"
        },
        "returns": {
          "earliestWithdrawalTime": "Earliest withdrawal time",
          "tokenId": "Token ID",
          "withdrawalLeadTime": "Withdrawal lead time captured at deposit-time"
        }
      },
      "constructor": {
        "params": {
          "_accessControlRegistry": "AccessControlRegistry contract address",
          "_adminRoleDescription": "Admin role description"
        }
      },
      "deriveDepositorFreezerRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "depositorFreezerRole": "Depositor freezer role"
        }
      },
      "deriveRequesterBlockerRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "requesterBlockerRole": "Requester blocker role"
        }
      },
      "deriveWithdrawalLeadTimeSetterRole(address)": {
        "params": {
          "airnode": "Airnode address"
        },
        "returns": {
          "withdrawalLeadTimeSetterRole": "Withdrawal lead time setter role"
        }
      },
      "initiateTokenWithdrawal(address,uint256,address,address)": {
        "details": "The depositor is allowed to initiate a withdrawal even if the respective requester is blocked. However, the withdrawal will not be executable as long as the requester is blocked. Token withdrawals can be initiated even if withdrawal lead time is zero.",
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "requester": "Requester address",
          "token": "Token address"
        },
        "returns": {
          "earliestWithdrawalTime": "Earliest withdrawal time"
        }
      },
      "isAuthorized(address,uint256,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "requester": "Requester address",
          "token": "Token address"
        },
        "returns": {
          "_0": "Authorization status"
        }
      },
      "multicall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "The first argument is the operator, which we do not need",
        "params": {
          "_data": "Airnode address, chain ID and requester address in ABI-encoded form",
          "_from": "Account from which the token is transferred",
          "_tokenId": "Token ID"
        },
        "returns": {
          "_0": "`onERC721Received()` function selector"
        }
      },
      "revokeToken(address,uint256,address,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "depositor": "Depositor address",
          "requester": "Requester address",
          "token": "Token address"
        }
      },
      "setDepositorFreezeStatus(address,address,bool)": {
        "params": {
          "airnode": "Airnode address",
          "depositor": "Depositor address",
          "status": "Freeze status"
        }
      },
      "setRequesterBlockStatus(address,uint256,address,bool)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "requester": "Requester address",
          "status": "Block status"
        }
      },
      "setWithdrawalLeadTime(address,uint32)": {
        "params": {
          "airnode": "Airnode address",
          "withdrawalLeadTime": "Withdrawal lead time"
        }
      },
      "tryMulticall(bytes[])": {
        "params": {
          "data": "Array of calldata of batched calls"
        },
        "returns": {
          "returndata": "Array of returndata of batched calls",
          "successes": "Array of success conditions of batched calls"
        }
      },
      "updateDepositRequester(address,uint256,address,uint256,address,address)": {
        "details": "This is especially useful for not having to wait when the Airnode has set a non-zero withdrawal lead time",
        "params": {
          "airnode": "Airnode address",
          "chainIdNext": "Next chain ID",
          "chainIdPrevious": "Previous chain ID",
          "requesterNext": "Next requester address",
          "requesterPrevious": "Previous requester address",
          "token": "Token address"
        }
      },
      "withdrawToken(address,uint256,address,address)": {
        "params": {
          "airnode": "Airnode address",
          "chainId": "Chain ID",
          "requester": "Requester address",
          "token": "Token address"
        }
      }
    },
    "title": "Authorizer contract that users can deposit the ERC721 tokens recognized by the Airnode to receive authorization for the requester contract on the chain",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DEPOSITOR_FREEZER_ROLE_DESCRIPTION()": {
        "notice": "Depositor freezer role description"
      },
      "REQUESTER_BLOCKER_ROLE_DESCRIPTION()": {
        "notice": "Requester blocker role description"
      },
      "WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION()": {
        "notice": "Withdrawal lead time setter role description"
      },
      "accessControlRegistry()": {
        "notice": "AccessControlRegistry contract address"
      },
      "adminRoleDescription()": {
        "notice": "Admin role description"
      },
      "airnodeToChainIdToRequesterToBlockStatus(address,uint256,address)": {
        "notice": "If the Airnode has blocked the requester on the chain. In the context of the respective Airnode, no one can deposit for a blocked requester, make deposit updates that relate to a blocked requester, or withdraw a token deposited for a blocked requester. Anyone can revoke tokens that are already deposited for a blocked requester. Existing deposits for a blocked requester do not provide authorization."
      },
      "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(address,uint256,address,address)": {
        "notice": "Deposits of the token with the address made for the Airnode to authorize the requester address on the chain"
      },
      "airnodeToChainIdToRequesterToTokenToDepositorToDeposit(address,uint256,address,address,address)": {
        "notice": "Returns the deposit of the token with the address made by the depositor for the Airnode to authorize the requester address on the chain"
      },
      "airnodeToDepositorToFreezeStatus(address,address)": {
        "notice": "If the Airnode has frozen the depositor. In the context of the respective Airnode, a frozen depositor cannot deposit, make deposit updates or withdraw."
      },
      "airnodeToWithdrawalLeadTime(address)": {
        "notice": "Withdrawal lead time of the Airnode. This creates the window of opportunity during which a requester can be blocked for breaking T&C and the respective token can be revoked. The withdrawal lead time at deposit-time will apply to a specific deposit."
      },
      "deriveDepositorFreezerRole(address)": {
        "notice": "Derives the depositor freezer role for the Airnode"
      },
      "deriveRequesterBlockerRole(address)": {
        "notice": "Derives the requester blocker role for the Airnode"
      },
      "deriveWithdrawalLeadTimeSetterRole(address)": {
        "notice": "Derives the withdrawal lead time setter role for the Airnode"
      },
      "initiateTokenWithdrawal(address,uint256,address,address)": {
        "notice": "Called by a token depositor to initiate withdrawal"
      },
      "isAuthorized(address,uint256,address,address)": {
        "notice": "Returns if the requester on the chain is authorized for the Airnode due to a token with the address being deposited"
      },
      "multicall(bytes[])": {
        "notice": "Batches calls to the inheriting contract and reverts as soon as one of the batched calls reverts"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Called by the ERC721 contract upon `safeTransferFrom()` to this contract to deposit a token to authorize the requester"
      },
      "revokeToken(address,uint256,address,address,address)": {
        "notice": "Called to revoke the token deposited to authorize a requester that is blocked now"
      },
      "setDepositorFreezeStatus(address,address,bool)": {
        "notice": "Called by the Airnode or its depositor freezers to set the freeze status of the depositor"
      },
      "setRequesterBlockStatus(address,uint256,address,bool)": {
        "notice": "Called by the Airnode or its requester blockers to set the block status of the requester"
      },
      "setWithdrawalLeadTime(address,uint32)": {
        "notice": "Called by the Airnode or its withdrawal lead time setters to set withdrawal lead time"
      },
      "tryMulticall(bytes[])": {
        "notice": "Batches calls to the inheriting contract but does not revert if any of the batched calls reverts"
      },
      "updateDepositRequester(address,uint256,address,uint256,address,address)": {
        "notice": "Called by a token depositor to update the requester for which they have deposited the token for"
      },
      "withdrawToken(address,uint256,address,address)": {
        "notice": "Called by a token depositor to withdraw"
      }
    },
    "notice": "For an Airnode to treat an ERC721 token deposit as a valid reason for the respective requester contract to be authorized, it needs to be configured at deploy-time to (1) use this contract as an authorizer, (2) recognize the respectice ERC721 token contract. It can be expected for Airnodes to be configured to only recognize the respective NFT keys that their operators have issued, but this is not necessarily true, i.e., an Airnode can be configured to recognize an arbitrary ERC721 token. This contract allows Airnodes to block specific requester contracts. It can be expected for Airnodes to only do this when the requester is breaking T&C. The tokens that have been deposited to authorize requesters that have been blocked can be revoked, which transfers them to the Airnode account. This can be seen as a staking/slashing mechanism. Accordingly, users should not deposit ERC721 tokens to receive authorization from Airnodes that they suspect may abuse this mechanic.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6427,
        "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
        "label": "adminRoleDescription",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 13104,
        "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
        "label": "airnodeToChainIdToRequesterToTokenAddressToTokenDeposits",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage))))"
      },
      {
        "astId": 13110,
        "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
        "label": "airnodeToWithdrawalLeadTime",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 13120,
        "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
        "label": "airnodeToChainIdToRequesterToBlockStatus",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))"
      },
      {
        "astId": 13128,
        "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
        "label": "airnodeToDepositorToFreezeStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(DepositState)14691": {
        "encoding": "inplace",
        "label": "enum IRequesterAuthorizerWithErc721.DepositState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RequesterAuthorizerWithErc721.TokenDeposits))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TokenDeposits)13042_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_bool)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => bool)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(address => mapping(address => struct RequesterAuthorizerWithErc721.TokenDeposits))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage)))"
      },
      "t_mapping(t_address,t_struct(Deposit)13052_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RequesterAuthorizerWithErc721.Deposit)",
        "numberOfBytes": "32",
        "value": "t_struct(Deposit)13052_storage"
      },
      "t_mapping(t_address,t_struct(TokenDeposits)13042_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RequesterAuthorizerWithErc721.TokenDeposits)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenDeposits)13042_storage"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(address => struct RequesterAuthorizerWithErc721.TokenDeposits)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_struct(TokenDeposits)13042_storage))"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Deposit)13052_storage": {
        "encoding": "inplace",
        "label": "struct RequesterAuthorizerWithErc721.Deposit",
        "members": [
          {
            "astId": 13044,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13046,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "withdrawalLeadTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 13048,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "earliestWithdrawalTime",
            "offset": 4,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 13051,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "state",
            "offset": 8,
            "slot": "1",
            "type": "t_enum(DepositState)14691"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenDeposits)13042_storage": {
        "encoding": "inplace",
        "label": "struct RequesterAuthorizerWithErc721.TokenDeposits",
        "members": [
          {
            "astId": 13036,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "count",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13041,
            "contract": "contracts/authorizers/RequesterAuthorizerWithErc721.sol:RequesterAuthorizerWithErc721",
            "label": "depositorToDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_address,t_struct(Deposit)13052_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
