{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/metatx/ERC2771Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\n\npragma solidity ^0.8.9;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Context variant with ERC2771 support.\n */\nabstract contract ERC2771Context is Context {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\n    address private immutable _trustedForwarder;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor(address trustedForwarder) {\n        _trustedForwarder = trustedForwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function _msgSender() internal view virtual override returns (address sender) {\n        if (isTrustedForwarder(msg.sender)) {\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\n            /// @solidity memory-safe-assembly\n            assembly {\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        } else {\n            return super._msgSender();\n        }\n    }\n\n    function _msgData() internal view virtual override returns (bytes calldata) {\n        if (isTrustedForwarder(msg.sender)) {\n            return msg.data[:msg.data.length - 20];\n        } else {\n            return super._msgData();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/cryptography/EIP712.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Create2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n * `CREATE2` can be used to compute in advance the address where a smart\n * contract will be deployed, which allows for interesting new mechanisms known\n * as 'counterfactual interactions'.\n *\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n * information.\n */\nlibrary Create2 {\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(address(this).balance >= amount, \"Create2: insufficient balance\");\n        require(bytecode.length != 0, \"Create2: bytecode length is zero\");\n        /// @solidity memory-safe-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), \"Create2: Failed on deploy\");\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n     * `bytecodeHash` or `salt` will result in a new destination address.\n     */\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n        return computeAddress(salt, bytecodeHash, address(this));\n    }\n\n    /**\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n     */\n    function computeAddress(\n        bytes32 salt,\n        bytes32 bytecodeHash,\n        address deployer\n    ) internal pure returns (address addr) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40) // Get free memory pointer\n\n            // |                   | ↓ ptr ...  ↓ ptr + 0x0B (start) ...  ↓ ptr + 0x20 ...  ↓ ptr + 0x40 ...   |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\n            // | 0xFF              |            FF                                                             |\n            // |-------------------|---------------------------------------------------------------------------|\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\n            // | keccak(start, 85) |            ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ |\n\n            mstore(add(ptr, 0x40), bytecodeHash)\n            mstore(add(ptr, 0x20), salt)\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\n            mstore8(start, 0xff)\n            addr := keccak256(start, 85)\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/access-control-registry/AccessControlRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"../utils/ExpiringMetaTxForwarder.sol\";\nimport \"../utils/SelfMulticall.sol\";\nimport \"./RoleDeriver.sol\";\nimport \"./interfaces/IAccessControlRegistry.sol\";\n\n/// @title Contract that allows users to manage independent, tree-shaped access\n/// control tables\n/// @notice Multiple contracts can refer to this contract to check if their\n/// users have granted accounts specific roles. Therefore, it aims to keep all\n/// access control roles of its users in this single contract.\n/// @dev Each user is called a \"manager\", and is the only member of their root\n/// role. Starting from this root role, they can create an arbitrary tree of\n/// roles and grant these to accounts. Each role has a description, and roles\n/// adminned by the same role cannot have the same description.\ncontract AccessControlRegistry is\n    ERC2771Context,\n    AccessControl,\n    ExpiringMetaTxForwarder,\n    SelfMulticall,\n    RoleDeriver,\n    IAccessControlRegistry\n{\n    /// @dev AccessControlRegistry is its own trusted meta-tx forwarder\n    constructor() ERC2771Context(address(this)) {}\n\n    /// @notice Initializes the manager by initializing its root role and\n    /// granting it to them\n    /// @dev Anyone can initialize a manager. An uninitialized manager\n    /// attempting to initialize a role will be initialized automatically.\n    /// Once a manager is initialized, subsequent initializations have no\n    /// effect.\n    /// @param manager Manager address to be initialized\n    function initializeManager(address manager) public override {\n        require(manager != address(0), \"Manager address zero\");\n        bytes32 rootRole = _deriveRootRole(manager);\n        if (!hasRole(rootRole, manager)) {\n            _grantRole(rootRole, manager);\n            emit InitializedManager(rootRole, manager, _msgSender());\n        }\n    }\n\n    /// @notice Called by the account to renounce the role\n    /// @dev Overriden to disallow managers from renouncing their root roles.\n    /// `role` and `account` are not validated because\n    /// `AccessControl.renounceRole` will revert if either of them is zero.\n    /// @param role Role to be renounced\n    /// @param account Account to renounce the role\n    function renounceRole(\n        bytes32 role,\n        address account\n    ) public override(AccessControl, IAccessControl) {\n        require(\n            role != _deriveRootRole(account),\n            \"role is root role of account\"\n        );\n        AccessControl.renounceRole(role, account);\n    }\n\n    /// @notice Initializes a role by setting its admin role and grants it to\n    /// the sender\n    /// @dev If the sender should not have the initialized role, they should\n    /// explicitly renounce it after initializing it.\n    /// Once a role is initialized, subsequent initializations have no effect\n    /// other than granting the role to the sender.\n    /// The sender must be a member of `adminRole`. `adminRole` value is not\n    /// validated because the sender cannot have the `bytes32(0)` role.\n    /// If the sender is an uninitialized manager that is initializing a role\n    /// directly under their root role, manager initialization will happen\n    /// automatically, which will grant the sender `adminRole` and allow them\n    /// to initialize the role.\n    /// @param adminRole Admin role to be assigned to the initialized role\n    /// @param description Human-readable description of the initialized role\n    /// @return role Initialized role\n    function initializeRoleAndGrantToSender(\n        bytes32 adminRole,\n        string calldata description\n    ) external override returns (bytes32 role) {\n        require(bytes(description).length > 0, \"Role description empty\");\n        role = _deriveRole(adminRole, description);\n        // AccessControl roles have `DEFAULT_ADMIN_ROLE` (i.e., `bytes32(0)`)\n        // as their `adminRole` by default. No account in AccessControlRegistry\n        // can possibly have that role, which means all initialized roles will\n        // have non-default admin roles, and vice versa.\n        if (getRoleAdmin(role) == DEFAULT_ADMIN_ROLE) {\n            if (adminRole == _deriveRootRole(_msgSender())) {\n                initializeManager(_msgSender());\n            }\n            _setRoleAdmin(role, adminRole);\n            emit InitializedRole(role, adminRole, description, _msgSender());\n        }\n        grantRole(role, _msgSender());\n    }\n\n    /// @dev See Context.sol\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, ERC2771Context)\n        returns (address)\n    {\n        return ERC2771Context._msgSender();\n    }\n\n    /// @dev See Context.sol\n    function _msgData()\n        internal\n        view\n        virtual\n        override(Context, ERC2771Context)\n        returns (bytes calldata)\n    {\n        return ERC2771Context._msgData();\n    }\n}\n"
    },
    "contracts/access-control-registry/AccessControlRegistryAdminned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../utils/SelfMulticall.sol\";\nimport \"./RoleDeriver.sol\";\nimport \"./interfaces/IAccessControlRegistryAdminned.sol\";\nimport \"./interfaces/IAccessControlRegistry.sol\";\n\n/// @title Contract to be inherited by contracts whose adminship functionality\n/// will be implemented using AccessControlRegistry\ncontract AccessControlRegistryAdminned is\n    SelfMulticall,\n    RoleDeriver,\n    IAccessControlRegistryAdminned\n{\n    /// @notice AccessControlRegistry contract address\n    address public immutable override accessControlRegistry;\n\n    /// @notice Admin role description\n    string public override adminRoleDescription;\n\n    bytes32 internal immutable adminRoleDescriptionHash;\n\n    /// @dev Contracts deployed with the same admin role descriptions will have\n    /// the same roles, meaning that granting an account a role will authorize\n    /// it in multiple contracts. Unless you want your deployed contract to\n    /// share the role configuration of another contract, use a unique admin\n    /// role description.\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription\n    ) {\n        require(_accessControlRegistry != address(0), \"ACR address zero\");\n        require(\n            bytes(_adminRoleDescription).length > 0,\n            \"Admin role description empty\"\n        );\n        accessControlRegistry = _accessControlRegistry;\n        adminRoleDescription = _adminRoleDescription;\n        adminRoleDescriptionHash = keccak256(\n            abi.encodePacked(_adminRoleDescription)\n        );\n    }\n\n    /// @notice Derives the admin role for the specific manager address\n    /// @param manager Manager address\n    /// @return adminRole Admin role\n    function _deriveAdminRole(\n        address manager\n    ) internal view returns (bytes32 adminRole) {\n        adminRole = _deriveRole(\n            _deriveRootRole(manager),\n            adminRoleDescriptionHash\n        );\n    }\n}\n"
    },
    "contracts/access-control-registry/AccessControlRegistryAdminnedWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./AccessControlRegistryAdminned.sol\";\nimport \"./interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\n\n/// @title Contract to be inherited by contracts with manager whose adminship\n/// functionality will be implemented using AccessControlRegistry\n/// @notice The manager address here is expected to belong to an\n/// AccessControlRegistry user that is a multisig/DAO\ncontract AccessControlRegistryAdminnedWithManager is\n    AccessControlRegistryAdminned,\n    IAccessControlRegistryAdminnedWithManager\n{\n    /// @notice Address of the manager that manages the related\n    /// AccessControlRegistry roles\n    /// @dev The mutability of the manager role can be implemented by\n    /// designating an OwnableCallForwarder contract as the manager. The\n    /// ownership of this contract can then be transferred, effectively\n    /// transferring managership.\n    address public immutable override manager;\n\n    /// @notice Admin role\n    /// @dev Since `manager` is immutable, so is `adminRole`\n    bytes32 public immutable override adminRole;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    )\n        AccessControlRegistryAdminned(\n            _accessControlRegistry,\n            _adminRoleDescription\n        )\n    {\n        require(_manager != address(0), \"Manager address zero\");\n        manager = _manager;\n        adminRole = _deriveAdminRole(_manager);\n    }\n}\n"
    },
    "contracts/access-control-registry/interfaces/IAccessControlRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"../../utils/interfaces/IExpiringMetaTxForwarder.sol\";\nimport \"../../utils/interfaces/ISelfMulticall.sol\";\n\ninterface IAccessControlRegistry is\n    IAccessControl,\n    IExpiringMetaTxForwarder,\n    ISelfMulticall\n{\n    event InitializedManager(\n        bytes32 indexed rootRole,\n        address indexed manager,\n        address sender\n    );\n\n    event InitializedRole(\n        bytes32 indexed role,\n        bytes32 indexed adminRole,\n        string description,\n        address sender\n    );\n\n    function initializeManager(address manager) external;\n\n    function initializeRoleAndGrantToSender(\n        bytes32 adminRole,\n        string calldata description\n    ) external returns (bytes32 role);\n}\n"
    },
    "contracts/access-control-registry/interfaces/IAccessControlRegistryAdminned.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../utils/interfaces/ISelfMulticall.sol\";\n\ninterface IAccessControlRegistryAdminned is ISelfMulticall {\n    function accessControlRegistry() external view returns (address);\n\n    function adminRoleDescription() external view returns (string memory);\n}\n"
    },
    "contracts/access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlRegistryAdminned.sol\";\n\ninterface IAccessControlRegistryAdminnedWithManager is\n    IAccessControlRegistryAdminned\n{\n    function manager() external view returns (address);\n\n    function adminRole() external view returns (bytes32);\n}\n"
    },
    "contracts/access-control-registry/RoleDeriver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contract to be inherited by contracts that will derive\n/// AccessControlRegistry roles\n/// @notice If a contract interfaces with AccessControlRegistry and needs to\n/// derive roles, it should inherit this contract instead of re-implementing\n/// the logic\ncontract RoleDeriver {\n    /// @notice Derives the root role of the manager\n    /// @param manager Manager address\n    /// @return rootRole Root role\n    function _deriveRootRole(\n        address manager\n    ) internal pure returns (bytes32 rootRole) {\n        rootRole = keccak256(abi.encodePacked(manager));\n    }\n\n    /// @notice Derives the role using its admin role and description\n    /// @dev This implies that roles adminned by the same role cannot have the\n    /// same description\n    /// @param adminRole Admin role\n    /// @param description Human-readable description of the role\n    /// @return role Role\n    function _deriveRole(\n        bytes32 adminRole,\n        string memory description\n    ) internal pure returns (bytes32 role) {\n        role = _deriveRole(adminRole, keccak256(abi.encodePacked(description)));\n    }\n\n    /// @notice Derives the role using its admin role and description hash\n    /// @dev This implies that roles adminned by the same role cannot have the\n    /// same description\n    /// @param adminRole Admin role\n    /// @param descriptionHash Hash of the human-readable description of the\n    /// role\n    /// @return role Role\n    function _deriveRole(\n        bytes32 adminRole,\n        bytes32 descriptionHash\n    ) internal pure returns (bytes32 role) {\n        role = keccak256(abi.encodePacked(adminRole, descriptionHash));\n    }\n}\n"
    },
    "contracts/allocators/Allocator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAllocator.sol\";\n\n/// @title Abstract contract that temporarily allocates subscription slots for\n/// Airnodes\n/// @dev Airnodes that support PSP can be configured to periodically call\n/// multiple Allocators to fetch information about multiple slots from each.\n/// The Airnode must not serve expired slots or subscriptions with invalid IDs.\n/// The Airnode operator is expected to communicate the required information to\n/// the users through off-chain channels.\nabstract contract Allocator is IAllocator {\n    struct Slot {\n        bytes32 subscriptionId;\n        address setter;\n        uint32 expirationTimestamp;\n    }\n\n    /// @notice Slot setter role description\n    string public constant override SLOT_SETTER_ROLE_DESCRIPTION =\n        \"Slot setter\";\n\n    /// @notice Subscription slot of an Airnode addressed by the index\n    mapping(address => mapping(uint256 => Slot))\n        public\n        override airnodeToSlotIndexToSlot;\n\n    /// @notice Resets the slot\n    /// @dev This will revert if the slot has been set before, and the sender\n    /// is not the setter of the slot, and the slot has not expired and the\n    /// setter of the slot is still authorized to set slots.\n    /// The sender does not have to be authorized to set slots to use this.\n    /// @param airnode Airnode address\n    /// @param slotIndex Index of the subscription slot to be set\n    function resetSlot(address airnode, uint256 slotIndex) external override {\n        if (\n            airnodeToSlotIndexToSlot[airnode][slotIndex].subscriptionId !=\n            bytes32(0)\n        ) {\n            _resetSlot(airnode, slotIndex);\n            emit ResetSlot(airnode, slotIndex, _msgSender());\n        }\n    }\n\n    function slotCanBeResetByAccount(\n        address airnode,\n        uint256 slotIndex,\n        address account\n    ) public view virtual override returns (bool);\n\n    /// @notice Called internally to set the slot with the given parameters\n    /// @dev The set slot can be reset by its setter, or when it has expired,\n    /// or when its setter is no longer authorized to set slots\n    /// @param airnode Airnode address\n    /// @param slotIndex Index of the subscription slot to be set\n    /// @param subscriptionId Subscription ID\n    /// @param expirationTimestamp Timestamp at which the slot allocation will\n    /// expire\n    function _setSlot(\n        address airnode,\n        uint256 slotIndex,\n        bytes32 subscriptionId,\n        uint32 expirationTimestamp\n    ) internal {\n        require(\n            expirationTimestamp > block.timestamp,\n            \"Expiration not in future\"\n        );\n        _resetSlot(airnode, slotIndex);\n        airnodeToSlotIndexToSlot[airnode][slotIndex] = Slot({\n            subscriptionId: subscriptionId,\n            setter: _msgSender(),\n            expirationTimestamp: expirationTimestamp\n        });\n        emit SetSlot(\n            airnode,\n            slotIndex,\n            subscriptionId,\n            expirationTimestamp,\n            _msgSender()\n        );\n    }\n\n    /// @notice Called privately to reset a slot\n    /// @param airnode Airnode address\n    /// @param slotIndex Index of the subscription slot to be reset\n    function _resetSlot(address airnode, uint256 slotIndex) private {\n        require(\n            slotCanBeResetByAccount(airnode, slotIndex, _msgSender()),\n            \"Cannot reset slot\"\n        );\n        delete airnodeToSlotIndexToSlot[airnode][slotIndex];\n    }\n\n    /// @dev See Context.sol\n    function _msgSender() internal view virtual returns (address sender);\n}\n"
    },
    "contracts/allocators/AllocatorWithAirnode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../access-control-registry/AccessControlRegistryAdminned.sol\";\nimport \"./Allocator.sol\";\nimport \"./interfaces/IAllocatorWithAirnode.sol\";\n\n/// @title Contract that Airnode operators can use to temporarily\n/// allocate subscription slots for the respective Airnodes\ncontract AllocatorWithAirnode is\n    ERC2771Context,\n    AccessControlRegistryAdminned,\n    Allocator,\n    IAllocatorWithAirnode\n{\n    bytes32 private constant SLOT_SETTER_ROLE_DESCRIPTION_HASH =\n        keccak256(abi.encodePacked(SLOT_SETTER_ROLE_DESCRIPTION));\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription\n    )\n        ERC2771Context(_accessControlRegistry)\n        AccessControlRegistryAdminned(\n            _accessControlRegistry,\n            _adminRoleDescription\n        )\n    {}\n\n    /// @notice Sets a slot with the given parameters\n    /// @param airnode Airnode address\n    /// @param slotIndex Index of the subscription slot to be set\n    /// @param subscriptionId Subscription ID\n    /// @param expirationTimestamp Timestamp at which the slot allocation will\n    /// expire\n    function setSlot(\n        address airnode,\n        uint256 slotIndex,\n        bytes32 subscriptionId,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasSlotSetterRoleOrIsAirnode(airnode, _msgSender()),\n            \"Sender cannot set slot\"\n        );\n        _setSlot(airnode, slotIndex, subscriptionId, expirationTimestamp);\n    }\n\n    /// @notice Returns if the account has the slot setter role or has the\n    /// respective Airnode address\n    /// @param airnode Airnode address\n    /// @param account Account address\n    function hasSlotSetterRoleOrIsAirnode(\n        address airnode,\n        address account\n    ) public view override returns (bool) {\n        return\n            airnode == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                deriveSlotSetterRole(airnode),\n                account\n            );\n    }\n\n    /// @notice Derives the admin role for the specific Airnode address\n    /// @param airnode Airnode address\n    /// @return adminRole Admin role\n    function deriveAdminRole(\n        address airnode\n    ) public view override returns (bytes32 adminRole) {\n        adminRole = _deriveAdminRole(airnode);\n    }\n\n    /// @notice Derives the slot setter role for the specific Airnode address\n    /// @param airnode Airnode address\n    /// @return slotSetterRole Slot setter role\n    function deriveSlotSetterRole(\n        address airnode\n    ) public view override returns (bytes32 slotSetterRole) {\n        slotSetterRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            SLOT_SETTER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    function slotCanBeResetByAccount(\n        address airnode,\n        uint256 slotIndex,\n        address account\n    ) public view override(IAllocator, Allocator) returns (bool) {\n        Slot storage slot = airnodeToSlotIndexToSlot[airnode][slotIndex];\n        return\n            slot.setter == account ||\n            slot.expirationTimestamp <= block.timestamp ||\n            !hasSlotSetterRoleOrIsAirnode(\n                airnode,\n                airnodeToSlotIndexToSlot[airnode][slotIndex].setter\n            );\n    }\n\n    /// @dev See Context.sol\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Allocator, ERC2771Context)\n        returns (address)\n    {\n        return ERC2771Context._msgSender();\n    }\n}\n"
    },
    "contracts/allocators/AllocatorWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\";\nimport \"./Allocator.sol\";\nimport \"./interfaces/IAllocatorWithManager.sol\";\n\n/// @title Contract that Airnode operators can use to temporarily\n/// allocate subscription slots for Airnodes\ncontract AllocatorWithManager is\n    ERC2771Context,\n    AccessControlRegistryAdminnedWithManager,\n    Allocator,\n    IAllocatorWithManager\n{\n    /// @notice Slot setter role\n    bytes32 public immutable override slotSetterRole;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    )\n        ERC2771Context(_accessControlRegistry)\n        AccessControlRegistryAdminnedWithManager(\n            _accessControlRegistry,\n            _adminRoleDescription,\n            _manager\n        )\n    {\n        slotSetterRole = _deriveRole(\n            adminRole,\n            keccak256(abi.encodePacked(SLOT_SETTER_ROLE_DESCRIPTION))\n        );\n    }\n\n    /// @notice Sets a slot with the given parameters\n    /// @param airnode Airnode address\n    /// @param slotIndex Index of the subscription slot to be set\n    /// @param subscriptionId Subscription ID\n    /// @param expirationTimestamp Timestamp at which the slot allocation will\n    /// expire\n    function setSlot(\n        address airnode,\n        uint256 slotIndex,\n        bytes32 subscriptionId,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasSlotSetterRoleOrIsManager(_msgSender()),\n            \"Sender cannot set slot\"\n        );\n        _setSlot(airnode, slotIndex, subscriptionId, expirationTimestamp);\n    }\n\n    /// @notice Returns if the account has the slot setter role or is the\n    /// manager\n    /// @param account Account address\n    function hasSlotSetterRoleOrIsManager(\n        address account\n    ) public view override returns (bool) {\n        return\n            manager == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                slotSetterRole,\n                account\n            );\n    }\n\n    function slotCanBeResetByAccount(\n        address airnode,\n        uint256 slotIndex,\n        address account\n    ) public view override(IAllocator, Allocator) returns (bool) {\n        Slot storage slot = airnodeToSlotIndexToSlot[airnode][slotIndex];\n        return\n            slot.setter == account ||\n            slot.expirationTimestamp <= block.timestamp ||\n            !hasSlotSetterRoleOrIsManager(\n                airnodeToSlotIndexToSlot[airnode][slotIndex].setter\n            );\n    }\n\n    /// @dev See Context.sol\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Allocator, ERC2771Context)\n        returns (address)\n    {\n        return ERC2771Context._msgSender();\n    }\n}\n"
    },
    "contracts/allocators/interfaces/IAllocator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAllocator {\n    event SetSlot(\n        address indexed airnode,\n        uint256 indexed slotIndex,\n        bytes32 subscriptionId,\n        uint32 expirationTimestamp,\n        address sender\n    );\n\n    event ResetSlot(\n        address indexed airnode,\n        uint256 indexed slotIndex,\n        address sender\n    );\n\n    function setSlot(\n        address airnode,\n        uint256 slotIndex,\n        bytes32 subscriptionId,\n        uint32 expirationTimestamp\n    ) external;\n\n    function resetSlot(address airnode, uint256 slotIndex) external;\n\n    function slotCanBeResetByAccount(\n        address airnode,\n        uint256 slotIndex,\n        address account\n    ) external view returns (bool);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function SLOT_SETTER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    function airnodeToSlotIndexToSlot(\n        address airnode,\n        uint256 slotIndex\n    )\n        external\n        view\n        returns (\n            bytes32 subscriptionId,\n            address setter,\n            uint32 expirationTimestamp\n        );\n}\n"
    },
    "contracts/allocators/interfaces/IAllocatorWithAirnode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\";\nimport \"./IAllocator.sol\";\n\ninterface IAllocatorWithAirnode is IAccessControlRegistryAdminned, IAllocator {\n    function hasSlotSetterRoleOrIsAirnode(\n        address airnode,\n        address account\n    ) external view returns (bool);\n\n    function deriveAdminRole(\n        address airnode\n    ) external view returns (bytes32 adminRole);\n\n    function deriveSlotSetterRole(\n        address airnode\n    ) external view returns (bytes32 slotSetterRole);\n}\n"
    },
    "contracts/allocators/interfaces/IAllocatorWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\nimport \"./IAllocator.sol\";\n\ninterface IAllocatorWithManager is\n    IAccessControlRegistryAdminnedWithManager,\n    IAllocator\n{\n    function hasSlotSetterRoleOrIsManager(\n        address account\n    ) external view returns (bool);\n\n    function slotSetterRole() external view returns (bytes32);\n}\n"
    },
    "contracts/api3-server-v1/aggregation/Median.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Sort.sol\";\nimport \"./QuickSelect.sol\";\n\n/// @title Contract to be inherited by contracts that will calculate the median\n/// of an array\n/// @notice The operation will be in-place, i.e., the array provided as the\n/// argument will be modified.\ncontract Median is Sort, Quickselect {\n    /// @notice Returns the median of the array\n    /// @dev Uses an unrolled sorting implementation for shorter arrays and\n    /// quickselect for longer arrays for gas cost efficiency\n    /// @param array Array whose median is to be calculated\n    /// @return Median of the array\n    function median(int256[] memory array) internal pure returns (int256) {\n        uint256 arrayLength = array.length;\n        if (arrayLength <= MAX_SORT_LENGTH) {\n            sort(array);\n            if (arrayLength % 2 == 1) {\n                return array[arrayLength / 2];\n            } else {\n                assert(arrayLength != 0);\n                unchecked {\n                    return\n                        average(\n                            array[arrayLength / 2 - 1],\n                            array[arrayLength / 2]\n                        );\n                }\n            }\n        } else {\n            if (arrayLength % 2 == 1) {\n                return array[quickselectK(array, arrayLength / 2)];\n            } else {\n                uint256 mid1;\n                uint256 mid2;\n                unchecked {\n                    (mid1, mid2) = quickselectKPlusOne(\n                        array,\n                        arrayLength / 2 - 1\n                    );\n                }\n                return average(array[mid1], array[mid2]);\n            }\n        }\n    }\n\n    /// @notice Averages two signed integers without overflowing\n    /// @param x Integer x\n    /// @param y Integer y\n    /// @return Average of integers x and y\n    function average(int256 x, int256 y) private pure returns (int256) {\n        unchecked {\n            int256 averageRoundedDownToNegativeInfinity = (x >> 1) +\n                (y >> 1) +\n                (x & y & 1);\n            // If the average rounded down to negative infinity is negative\n            // (i.e., its 256th sign bit is set), and one of (x, y) is even and\n            // the other one is odd (i.e., the 1st bit of their xor is set),\n            // add 1 to round the average down to zero instead.\n            // We will typecast the signed integer to unsigned to logical-shift\n            // int256(uint256(signedInt)) >> 255 ~= signedInt >>> 255\n            return\n                averageRoundedDownToNegativeInfinity +\n                (int256(\n                    (uint256(averageRoundedDownToNegativeInfinity) >> 255)\n                ) & (x ^ y));\n        }\n    }\n}\n"
    },
    "contracts/api3-server-v1/aggregation/mock/MockMedian.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Median.sol\";\n\ncontract MockMedian is Median {\n    function exposedMedian(\n        int256[] memory array\n    ) external pure returns (int256) {\n        return median(array);\n    }\n\n    function exposedAverage(int256 x, int256 y) external pure returns (int256) {\n        int256[] memory array = new int256[](2);\n        if (x < y) {\n            array[0] = x;\n            array[1] = y;\n        } else {\n            array[0] = y;\n            array[1] = x;\n        }\n        return median(array);\n    }\n}\n"
    },
    "contracts/api3-server-v1/aggregation/mock/MockSort.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../Median.sol\";\n\ncontract MockSort is Sort {\n    function exposedSort(\n        int256[] memory array\n    ) external pure returns (int256[] memory) {\n        sort(array);\n        return array;\n    }\n}\n"
    },
    "contracts/api3-server-v1/aggregation/QuickSelect.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contract to be inherited by contracts that will calculate the index\n/// of the k-th and optionally (k+1)-th largest elements in the array\n/// @notice Uses quickselect, which operates in-place, i.e., the array provided\n/// as the argument will be modified.\ncontract Quickselect {\n    /// @notice Returns the index of the k-th largest element in the array\n    /// @param array Array in which k-th largest element will be searched\n    /// @param k K\n    /// @return indK Index of the k-th largest element\n    function quickselectK(\n        int256[] memory array,\n        uint256 k\n    ) internal pure returns (uint256 indK) {\n        uint256 arrayLength = array.length;\n        assert(arrayLength > 0);\n        unchecked {\n            (indK, ) = quickselect(array, 0, arrayLength - 1, k, false);\n        }\n    }\n\n    /// @notice Returns the index of the k-th and (k+1)-th largest elements in\n    /// the array\n    /// @param array Array in which k-th and (k+1)-th largest elements will be\n    /// searched\n    /// @param k K\n    /// @return indK Index of the k-th largest element\n    /// @return indKPlusOne Index of the (k+1)-th largest element\n    function quickselectKPlusOne(\n        int256[] memory array,\n        uint256 k\n    ) internal pure returns (uint256 indK, uint256 indKPlusOne) {\n        uint256 arrayLength = array.length;\n        assert(arrayLength > 1);\n        unchecked {\n            (indK, indKPlusOne) = quickselect(\n                array,\n                0,\n                arrayLength - 1,\n                k,\n                true\n            );\n        }\n    }\n\n    /// @notice Returns the index of the k-th largest element in the specified\n    /// section of the (potentially unsorted) array\n    /// @param array Array in which K will be searched for\n    /// @param lo Starting index of the section of the array that K will be\n    /// searched in\n    /// @param hi Last index of the section of the array that K will be\n    /// searched in\n    /// @param k K\n    /// @param selectKPlusOne If the index of the (k+1)-th largest element is\n    /// to be returned\n    /// @return indK Index of the k-th largest element\n    /// @return indKPlusOne Index of the (k+1)-th largest element (only set if\n    /// `selectKPlusOne` is `true`)\n    function quickselect(\n        int256[] memory array,\n        uint256 lo,\n        uint256 hi,\n        uint256 k,\n        bool selectKPlusOne\n    ) private pure returns (uint256 indK, uint256 indKPlusOne) {\n        if (lo == hi) {\n            return (k, 0);\n        }\n        uint256 indPivot = partition(array, lo, hi);\n        if (k < indPivot) {\n            unchecked {\n                (indK, ) = quickselect(array, lo, indPivot - 1, k, false);\n            }\n        } else if (k > indPivot) {\n            unchecked {\n                (indK, ) = quickselect(array, indPivot + 1, hi, k, false);\n            }\n        } else {\n            indK = indPivot;\n        }\n        // Since Quickselect ends in the array being partitioned around the\n        // k-th largest element, we can continue searching towards right for\n        // the (k+1)-th largest element, which is useful in calculating the\n        // median of an array with even length\n        if (selectKPlusOne) {\n            unchecked {\n                indKPlusOne = indK + 1;\n            }\n            uint256 i;\n            unchecked {\n                i = indKPlusOne + 1;\n            }\n            uint256 arrayLength = array.length;\n            for (; i < arrayLength; ) {\n                if (array[i] < array[indKPlusOne]) {\n                    indKPlusOne = i;\n                }\n                unchecked {\n                    i++;\n                }\n            }\n        }\n    }\n\n    /// @notice Partitions the array into two around a pivot\n    /// @param array Array that will be partitioned\n    /// @param lo Starting index of the section of the array that will be\n    /// partitioned\n    /// @param hi Last index of the section of the array that will be\n    /// partitioned\n    /// @return pivotInd Pivot index\n    function partition(\n        int256[] memory array,\n        uint256 lo,\n        uint256 hi\n    ) private pure returns (uint256 pivotInd) {\n        if (lo == hi) {\n            return lo;\n        }\n        int256 pivot = array[lo];\n        uint256 i = lo;\n        unchecked {\n            pivotInd = hi + 1;\n        }\n        while (true) {\n            do {\n                unchecked {\n                    i++;\n                }\n            } while (i < array.length && array[i] < pivot);\n            do {\n                unchecked {\n                    pivotInd--;\n                }\n            } while (array[pivotInd] > pivot);\n            if (i >= pivotInd) {\n                (array[lo], array[pivotInd]) = (array[pivotInd], array[lo]);\n                return pivotInd;\n            }\n            (array[i], array[pivotInd]) = (array[pivotInd], array[i]);\n        }\n    }\n}\n"
    },
    "contracts/api3-server-v1/aggregation/Sort.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contract to be inherited by contracts that will sort an array using\n/// an unrolled implementation\n/// @notice The operation will be in-place, i.e., the array provided as the\n/// argument will be modified.\ncontract Sort {\n    uint256 internal constant MAX_SORT_LENGTH = 9;\n\n    /// @notice Sorts the array\n    /// @param array Array to be sorted\n    function sort(int256[] memory array) internal pure {\n        uint256 arrayLength = array.length;\n        require(arrayLength <= MAX_SORT_LENGTH, \"Array too long to sort\");\n        // Do a binary search\n        if (arrayLength < 6) {\n            // Possible lengths: 1, 2, 3, 4, 5\n            if (arrayLength < 4) {\n                // Possible lengths: 1, 2, 3\n                if (arrayLength == 3) {\n                    // Length: 3\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 0, 1);\n                } else if (arrayLength == 2) {\n                    // Length: 2\n                    swapIfFirstIsLarger(array, 0, 1);\n                }\n                // Do nothing for Length: 1\n            } else {\n                // Possible lengths: 4, 5\n                if (arrayLength == 5) {\n                    // Length: 5\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 0, 2);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 0, 3);\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 1, 2);\n                } else {\n                    // Length: 4\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 0, 2);\n                    swapIfFirstIsLarger(array, 1, 2);\n                }\n            }\n        } else {\n            // Possible lengths: 6, 7, 8, 9\n            if (arrayLength < 8) {\n                // Possible lengths: 6, 7\n                if (arrayLength == 7) {\n                    // Length: 7\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 5, 6);\n                    swapIfFirstIsLarger(array, 0, 2);\n                    swapIfFirstIsLarger(array, 4, 6);\n                    swapIfFirstIsLarger(array, 3, 5);\n                    swapIfFirstIsLarger(array, 2, 6);\n                    swapIfFirstIsLarger(array, 1, 5);\n                    swapIfFirstIsLarger(array, 0, 4);\n                    swapIfFirstIsLarger(array, 2, 5);\n                    swapIfFirstIsLarger(array, 0, 3);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                } else {\n                    // Length: 6\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 3, 5);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 0, 2);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 2, 3);\n                }\n            } else {\n                // Possible lengths: 8, 9\n                if (arrayLength == 9) {\n                    // Length: 9\n                    swapIfFirstIsLarger(array, 1, 8);\n                    swapIfFirstIsLarger(array, 2, 7);\n                    swapIfFirstIsLarger(array, 3, 6);\n                    swapIfFirstIsLarger(array, 4, 5);\n                    swapIfFirstIsLarger(array, 1, 4);\n                    swapIfFirstIsLarger(array, 5, 8);\n                    swapIfFirstIsLarger(array, 0, 2);\n                    swapIfFirstIsLarger(array, 6, 7);\n                    swapIfFirstIsLarger(array, 2, 6);\n                    swapIfFirstIsLarger(array, 7, 8);\n                    swapIfFirstIsLarger(array, 0, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 3, 5);\n                    swapIfFirstIsLarger(array, 6, 7);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 1, 3);\n                    swapIfFirstIsLarger(array, 5, 7);\n                    swapIfFirstIsLarger(array, 4, 6);\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 5, 6);\n                    swapIfFirstIsLarger(array, 7, 8);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                } else {\n                    // Length: 8\n                    swapIfFirstIsLarger(array, 0, 7);\n                    swapIfFirstIsLarger(array, 1, 6);\n                    swapIfFirstIsLarger(array, 2, 5);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 0, 3);\n                    swapIfFirstIsLarger(array, 4, 7);\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 5, 6);\n                    swapIfFirstIsLarger(array, 0, 1);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                    swapIfFirstIsLarger(array, 6, 7);\n                    swapIfFirstIsLarger(array, 3, 5);\n                    swapIfFirstIsLarger(array, 2, 4);\n                    swapIfFirstIsLarger(array, 1, 2);\n                    swapIfFirstIsLarger(array, 3, 4);\n                    swapIfFirstIsLarger(array, 5, 6);\n                    swapIfFirstIsLarger(array, 2, 3);\n                    swapIfFirstIsLarger(array, 4, 5);\n                    swapIfFirstIsLarger(array, 3, 4);\n                }\n            }\n        }\n    }\n\n    /// @notice Swaps two elements of an array if the first element is greater\n    /// than the second\n    /// @param array Array whose elements are to be swapped\n    /// @param ind1 Index of the first element\n    /// @param ind2 Index of the second element\n    function swapIfFirstIsLarger(\n        int256[] memory array,\n        uint256 ind1,\n        uint256 ind2\n    ) private pure {\n        if (array[ind1] > array[ind2]) {\n            (array[ind1], array[ind2]) = (array[ind2], array[ind1]);\n        }\n    }\n}\n"
    },
    "contracts/api3-server-v1/Api3ServerV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./OevDapiServer.sol\";\nimport \"./BeaconUpdatesWithSignedData.sol\";\nimport \"./interfaces/IApi3ServerV1.sol\";\n\n/// @title First version of the contract that API3 uses to serve data feeds\n/// @notice Api3ServerV1 serves data feeds in the form of Beacons, Beacon sets,\n/// dAPIs, with optional OEV support for all of these.\n/// The base Beacons are only updateable using signed data, and the Beacon sets\n/// are updateable based on the Beacons, optionally using PSP. OEV proxy\n/// Beacons and Beacon sets are updateable using OEV-signed data.\n/// Api3ServerV1 does not support Beacons to be updated using RRP or PSP.\ncontract Api3ServerV1 is\n    OevDapiServer,\n    BeaconUpdatesWithSignedData,\n    IApi3ServerV1\n{\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    ) OevDapiServer(_accessControlRegistry, _adminRoleDescription, _manager) {}\n\n    /// @notice Reads the data feed with ID\n    /// @param dataFeedId Data feed ID\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function readDataFeedWithId(\n        bytes32 dataFeedId\n    ) external view override returns (int224 value, uint32 timestamp) {\n        return _readDataFeedWithId(dataFeedId);\n    }\n\n    /// @notice Reads the data feed with dAPI name hash\n    /// @param dapiNameHash dAPI name hash\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function readDataFeedWithDapiNameHash(\n        bytes32 dapiNameHash\n    ) external view override returns (int224 value, uint32 timestamp) {\n        return _readDataFeedWithDapiNameHash(dapiNameHash);\n    }\n\n    /// @notice Reads the data feed as the OEV proxy with ID\n    /// @param dataFeedId Data feed ID\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function readDataFeedWithIdAsOevProxy(\n        bytes32 dataFeedId\n    ) external view override returns (int224 value, uint32 timestamp) {\n        return _readDataFeedWithIdAsOevProxy(dataFeedId);\n    }\n\n    /// @notice Reads the data feed as the OEV proxy with dAPI name hash\n    /// @param dapiNameHash dAPI name hash\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function readDataFeedWithDapiNameHashAsOevProxy(\n        bytes32 dapiNameHash\n    ) external view override returns (int224 value, uint32 timestamp) {\n        return _readDataFeedWithDapiNameHashAsOevProxy(dapiNameHash);\n    }\n\n    function dataFeeds(\n        bytes32 dataFeedId\n    ) external view override returns (int224 value, uint32 timestamp) {\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n    }\n\n    function oevProxyToIdToDataFeed(\n        address proxy,\n        bytes32 dataFeedId\n    ) external view override returns (int224 value, uint32 timestamp) {\n        DataFeed storage dataFeed = _oevProxyToIdToDataFeed[proxy][dataFeedId];\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n    }\n}\n"
    },
    "contracts/api3-server-v1/BeaconUpdatesWithSignedData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./DataFeedServer.sol\";\nimport \"./interfaces/IBeaconUpdatesWithSignedData.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title Contract that updates Beacons using signed data\ncontract BeaconUpdatesWithSignedData is\n    DataFeedServer,\n    IBeaconUpdatesWithSignedData\n{\n    using ECDSA for bytes32;\n\n    /// @notice Updates a Beacon using data signed by the Airnode\n    /// @dev The signed data here is intentionally very general for practical\n    /// reasons. It is less demanding on the signer to have data signed once\n    /// and use that everywhere.\n    /// @param airnode Airnode address\n    /// @param templateId Template ID\n    /// @param timestamp Signature timestamp\n    /// @param data Update data (an `int256` encoded in contract ABI)\n    /// @param signature Template ID, timestamp and the update data signed by\n    /// the Airnode\n    /// @return beaconId Updated Beacon ID\n    function updateBeaconWithSignedData(\n        address airnode,\n        bytes32 templateId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external override returns (bytes32 beaconId) {\n        require(\n            (\n                keccak256(abi.encodePacked(templateId, timestamp, data))\n                    .toEthSignedMessageHash()\n            ).recover(signature) == airnode,\n            \"Signature mismatch\"\n        );\n        beaconId = deriveBeaconId(airnode, templateId);\n        int224 updatedValue = processBeaconUpdate(beaconId, timestamp, data);\n        emit UpdatedBeaconWithSignedData(\n            beaconId,\n            updatedValue,\n            uint32(timestamp)\n        );\n    }\n}\n"
    },
    "contracts/api3-server-v1/DapiServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\";\nimport \"./DataFeedServer.sol\";\nimport \"./interfaces/IDapiServer.sol\";\n\n/// @title Contract that serves dAPIs mapped to Beacons and Beacon sets\n/// @notice Beacons and Beacon sets are addressed by immutable IDs. Although\n/// this is trust-minimized, it requires users to manage the ID of the data\n/// feed they are using. For when the user does not want to do this, dAPIs can\n/// be used as an abstraction layer. By using a dAPI, the user delegates this\n/// responsibility to dAPI management. It is important for dAPI management to\n/// be restricted by consensus rules (by using a multisig or a DAO) and similar\n/// trustless security mechanisms.\ncontract DapiServer is\n    AccessControlRegistryAdminnedWithManager,\n    DataFeedServer,\n    IDapiServer\n{\n    /// @notice dAPI name setter role description\n    string public constant override DAPI_NAME_SETTER_ROLE_DESCRIPTION =\n        \"dAPI name setter\";\n\n    /// @notice dAPI name setter role\n    bytes32 public immutable override dapiNameSetterRole;\n\n    /// @notice dAPI name hash mapped to the data feed ID\n    mapping(bytes32 => bytes32) public override dapiNameHashToDataFeedId;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    )\n        AccessControlRegistryAdminnedWithManager(\n            _accessControlRegistry,\n            _adminRoleDescription,\n            _manager\n        )\n    {\n        dapiNameSetterRole = _deriveRole(\n            _deriveAdminRole(manager),\n            DAPI_NAME_SETTER_ROLE_DESCRIPTION\n        );\n    }\n\n    /// @notice Sets the data feed ID the dAPI name points to\n    /// @dev While a data feed ID refers to a specific Beacon or Beacon set,\n    /// dAPI names provide a more abstract interface for convenience. This\n    /// means a dAPI name that was pointing to a Beacon can be pointed to a\n    /// Beacon set, then another Beacon set, etc.\n    /// @param dapiName Human-readable dAPI name\n    /// @param dataFeedId Data feed ID the dAPI name will point to\n    function setDapiName(\n        bytes32 dapiName,\n        bytes32 dataFeedId\n    ) external override {\n        require(dapiName != bytes32(0), \"dAPI name zero\");\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    dapiNameSetterRole,\n                    msg.sender\n                ),\n            \"Sender cannot set dAPI name\"\n        );\n        dapiNameHashToDataFeedId[\n            keccak256(abi.encodePacked(dapiName))\n        ] = dataFeedId;\n        emit SetDapiName(dataFeedId, dapiName, msg.sender);\n    }\n\n    /// @notice Returns the data feed ID the dAPI name is set to\n    /// @param dapiName dAPI name\n    /// @return Data feed ID\n    function dapiNameToDataFeedId(\n        bytes32 dapiName\n    ) external view override returns (bytes32) {\n        return dapiNameHashToDataFeedId[keccak256(abi.encodePacked(dapiName))];\n    }\n\n    /// @notice Reads the data feed with dAPI name hash\n    /// @param dapiNameHash dAPI name hash\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function _readDataFeedWithDapiNameHash(\n        bytes32 dapiNameHash\n    ) internal view returns (int224 value, uint32 timestamp) {\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\n        require(dataFeedId != bytes32(0), \"dAPI name not set\");\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n        require(timestamp > 0, \"Data feed not initialized\");\n    }\n}\n"
    },
    "contracts/api3-server-v1/DataFeedServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../utils/ExtendedSelfMulticall.sol\";\nimport \"./aggregation/Median.sol\";\nimport \"./interfaces/IDataFeedServer.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title Contract that serves Beacons and Beacon sets\n/// @notice A Beacon is a live data feed addressed by an ID, which is derived\n/// from an Airnode address and a template ID. This is suitable where the more\n/// recent data point is always more favorable, e.g., in the context of an\n/// asset price data feed. Beacons can also be seen as one-Airnode data feeds\n/// that can be used individually or combined to build Beacon sets.\ncontract DataFeedServer is ExtendedSelfMulticall, Median, IDataFeedServer {\n    using ECDSA for bytes32;\n\n    // Airnodes serve their fulfillment data along with timestamps. This\n    // contract casts the reported data to `int224` and the timestamp to\n    // `uint32`, which works until year 2106.\n    struct DataFeed {\n        int224 value;\n        uint32 timestamp;\n    }\n\n    /// @notice Data feed with ID\n    mapping(bytes32 => DataFeed) internal _dataFeeds;\n\n    /// @dev Reverts if the timestamp is from more than 1 hour in the future\n    modifier onlyValidTimestamp(uint256 timestamp) virtual {\n        unchecked {\n            require(\n                timestamp < block.timestamp + 1 hours,\n                \"Timestamp not valid\"\n            );\n        }\n        _;\n    }\n\n    /// @notice Updates the Beacon set using the current values of its Beacons\n    /// @dev As an oddity, this function still works if some of the IDs in\n    /// `beaconIds` belong to Beacon sets rather than Beacons. This can be used\n    /// to implement hierarchical Beacon sets.\n    /// @param beaconIds Beacon IDs\n    /// @return beaconSetId Beacon set ID\n    function updateBeaconSetWithBeacons(\n        bytes32[] memory beaconIds\n    ) public override returns (bytes32 beaconSetId) {\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\n            beaconIds\n        );\n        beaconSetId = deriveBeaconSetId(beaconIds);\n        DataFeed storage beaconSet = _dataFeeds[beaconSetId];\n        if (beaconSet.timestamp == updatedTimestamp) {\n            require(\n                beaconSet.value != updatedValue,\n                \"Does not update Beacon set\"\n            );\n        }\n        _dataFeeds[beaconSetId] = DataFeed({\n            value: updatedValue,\n            timestamp: updatedTimestamp\n        });\n        emit UpdatedBeaconSetWithBeacons(\n            beaconSetId,\n            updatedValue,\n            updatedTimestamp\n        );\n    }\n\n    /// @notice Reads the data feed with ID\n    /// @param dataFeedId Data feed ID\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function _readDataFeedWithId(\n        bytes32 dataFeedId\n    ) internal view returns (int224 value, uint32 timestamp) {\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n        require(timestamp > 0, \"Data feed not initialized\");\n    }\n\n    /// @notice Derives the Beacon ID from the Airnode address and template ID\n    /// @param airnode Airnode address\n    /// @param templateId Template ID\n    /// @return beaconId Beacon ID\n    function deriveBeaconId(\n        address airnode,\n        bytes32 templateId\n    ) internal pure returns (bytes32 beaconId) {\n        beaconId = keccak256(abi.encodePacked(airnode, templateId));\n    }\n\n    /// @notice Derives the Beacon set ID from the Beacon IDs\n    /// @dev Notice that `abi.encode()` is used over `abi.encodePacked()`\n    /// @param beaconIds Beacon IDs\n    /// @return beaconSetId Beacon set ID\n    function deriveBeaconSetId(\n        bytes32[] memory beaconIds\n    ) internal pure returns (bytes32 beaconSetId) {\n        beaconSetId = keccak256(abi.encode(beaconIds));\n    }\n\n    /// @notice Called privately to process the Beacon update\n    /// @param beaconId Beacon ID\n    /// @param timestamp Timestamp used in the signature\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\n    /// @return updatedBeaconValue Updated Beacon value\n    function processBeaconUpdate(\n        bytes32 beaconId,\n        uint256 timestamp,\n        bytes calldata data\n    )\n        internal\n        onlyValidTimestamp(timestamp)\n        returns (int224 updatedBeaconValue)\n    {\n        updatedBeaconValue = decodeFulfillmentData(data);\n        require(\n            timestamp > _dataFeeds[beaconId].timestamp,\n            \"Does not update timestamp\"\n        );\n        _dataFeeds[beaconId] = DataFeed({\n            value: updatedBeaconValue,\n            timestamp: uint32(timestamp)\n        });\n    }\n\n    /// @notice Called privately to decode the fulfillment data\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\n    /// @return decodedData Decoded fulfillment data\n    function decodeFulfillmentData(\n        bytes memory data\n    ) internal pure returns (int224) {\n        require(data.length == 32, \"Data length not correct\");\n        int256 decodedData = abi.decode(data, (int256));\n        require(\n            decodedData >= type(int224).min && decodedData <= type(int224).max,\n            \"Value typecasting error\"\n        );\n        return int224(decodedData);\n    }\n\n    /// @notice Called privately to aggregate the Beacons and return the result\n    /// @param beaconIds Beacon IDs\n    /// @return value Aggregation value\n    /// @return timestamp Aggregation timestamp\n    function aggregateBeacons(\n        bytes32[] memory beaconIds\n    ) internal view returns (int224 value, uint32 timestamp) {\n        uint256 beaconCount = beaconIds.length;\n        require(beaconCount > 1, \"Specified less than two Beacons\");\n        int256[] memory values = new int256[](beaconCount);\n        int256[] memory timestamps = new int256[](beaconCount);\n        for (uint256 ind = 0; ind < beaconCount; ) {\n            DataFeed storage dataFeed = _dataFeeds[beaconIds[ind]];\n            values[ind] = dataFeed.value;\n            timestamps[ind] = int256(uint256(dataFeed.timestamp));\n            unchecked {\n                ind++;\n            }\n        }\n        value = int224(median(values));\n        timestamp = uint32(uint256(median(timestamps)));\n    }\n}\n"
    },
    "contracts/api3-server-v1/extensions/BeaconSetUpdatesWithPsp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../DataFeedServer.sol\";\nimport \"./interfaces/IDataFeedUpdatesWithPsp.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title Contract that updates Beacon sets using regular and relayed PSP\n/// @dev BeaconSetUpdatesWithPsp is a PSP requester contract. Unlike RRP, which\n/// is implemented as a central contract, PSP implementation is built into the\n/// requester for optimization. Accordingly, the checks that are not required\n/// are omitted. Some examples:\n/// - PSP Beacon set update subscription IDs are not verified, as the\n/// Airnode/relayer cannot be made to \"misreport a Beacon set update\" by\n/// spoofing a subscription ID.\n/// - While executing a PSP Beacon set update, even the signature is not\n/// checked because this is a purely keeper job that does not require off-chain\n/// data. Similar to Beacon updates, any Beacon set update is welcome.\ncontract BeaconSetUpdatesWithPsp is DataFeedServer, IBeaconSetUpdatesWithPsp {\n    using ECDSA for bytes32;\n\n    /// @notice Number that represents 100%\n    /// @dev 10^8 (and not a larger number) is chosen to avoid overflows in\n    /// `calculateUpdateInPercentage()`. Since the reported data needs to fit\n    /// into 224 bits, its multiplication by 10^8 is guaranteed not to\n    /// overflow.\n    uint256 public constant override HUNDRED_PERCENT = 1e8;\n\n    /// @notice Returns if the respective Beacon set needs to be updated based\n    /// on the condition parameters\n    /// @dev `endpointOrTemplateId` in the respective Subscription is expected\n    /// to be zero, which means the `parameters` field of the Subscription will\n    /// be forwarded to this function as `data`. This field should be the\n    /// Beacon ID array encoded in contract ABI.\n    /// Even if this function returns `true`, the respective Subscription\n    /// fulfillment will fail if will not update the Beacon set value or\n    /// timestamp.\n    /// @param // subscriptionId Subscription ID\n    /// @param data Fulfillment data (array of Beacon IDs, i.e., `bytes32[]`\n    /// encoded in contract ABI)\n    /// @param conditionParameters Subscription condition parameters. This\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\n    /// @return If the Beacon set update subscription should be fulfilled\n    function conditionPspBeaconSetUpdate(\n        bytes32 /* subscriptionId */,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) public view virtual override returns (bool) {\n        bytes32[] memory beaconIds = abi.decode(data, (bytes32[]));\n        require(\n            keccak256(abi.encode(beaconIds)) == keccak256(data),\n            \"Data length not correct\"\n        );\n        (int224 updatedValue, uint32 updatedTimestamp) = aggregateBeacons(\n            beaconIds\n        );\n        return\n            checkUpdateCondition(\n                deriveBeaconSetId(beaconIds),\n                updatedValue,\n                updatedTimestamp,\n                conditionParameters\n            );\n    }\n\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\n    /// fulfill the Beacon set update subscription\n    /// @dev Similar to `conditionPspBeaconSetUpdate()`, if\n    /// `endpointOrTemplateId` of the Subscription is zero, its `parameters`\n    /// field will be forwarded to `data` here, which is expect to be contract\n    /// ABI-encoded array of Beacon IDs.\n    /// It does not make sense for this subscription to be relayed, as there is\n    /// no external data being delivered. Nevertheless, this is allowed for the\n    /// lack of a reason to prevent it.\n    /// Even though the consistency of the arguments are not being checked, if\n    /// a standard implementation of Airnode is being used, these can be\n    /// expected to be correct. Either way, the assumption is that it does not\n    /// matter for the purposes of a Beacon set update subscription.\n    /// @param // subscriptionId Subscription ID\n    /// @param // airnode Airnode address\n    /// @param // relayer Relayer address\n    /// @param // sponsor Sponsor address\n    /// @param // timestamp Timestamp used in the signature\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\n    /// @param // signature Subscription ID, timestamp, sponsor wallet address\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\n    /// Airnode wallet\n    function fulfillPspBeaconSetUpdate(\n        bytes32 /* subscriptionId */,\n        address /* airnode */,\n        address /* relayer */,\n        address /* sponsor */,\n        uint256 /* timestamp */,\n        bytes calldata data,\n        bytes calldata /* signature */\n    ) external override {\n        require(\n            keccak256(data) ==\n                updateBeaconSetWithBeacons(abi.decode(data, (bytes32[]))),\n            \"Data length not correct\"\n        );\n    }\n\n    /// @notice Called privately to check the update condition\n    /// @param dataFeedId Data feed ID\n    /// @param updatedValue Value the data feed will be updated with\n    /// @param updatedTimestamp Timestamp the data feed will be updated with\n    /// @param conditionParameters Subscription condition parameters. This\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\n    /// @return If the update should be executed\n    function checkUpdateCondition(\n        bytes32 dataFeedId,\n        int224 updatedValue,\n        uint32 updatedTimestamp,\n        bytes calldata conditionParameters\n    ) internal view returns (bool) {\n        require(conditionParameters.length == 96, \"Incorrect parameter length\");\n        (\n            uint256 deviationThresholdInPercentage,\n            int224 deviationReference,\n            uint256 heartbeatInterval\n        ) = abi.decode(conditionParameters, (uint256, int224, uint256));\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        unchecked {\n            return\n                (dataFeed.timestamp == 0 && updatedTimestamp != 0) ||\n                (deviationThresholdInPercentage != 0 &&\n                    calculateUpdateInPercentage(\n                        dataFeed.value,\n                        updatedValue,\n                        deviationReference\n                    ) >=\n                    deviationThresholdInPercentage) ||\n                (heartbeatInterval != 0 &&\n                    dataFeed.timestamp + heartbeatInterval <= updatedTimestamp);\n        }\n    }\n\n    /// @notice Called privately to calculate the update magnitude in\n    /// percentages where 100% is represented as `HUNDRED_PERCENT`\n    /// @dev The percentage changes will be more pronounced when the initial\n    /// value is closer to the deviation reference. Therefore, while deciding\n    /// on the subscription conditions, one should choose a deviation reference\n    /// that will produce the desired update behavior. In general, the\n    /// deviation reference should not be close to the operational range of the\n    /// data feed (e.g., if the value is expected to change between -10 and 10,\n    /// a deviation reference of -30 may be suitable.)\n    /// @param initialValue Initial value\n    /// @param updatedValue Updated value\n    /// @param deviationReference Reference value that deviation will be\n    /// calculated against\n    /// @return updateInPercentage Update in percentage\n    function calculateUpdateInPercentage(\n        int224 initialValue,\n        int224 updatedValue,\n        int224 deviationReference\n    ) private pure returns (uint256 updateInPercentage) {\n        int256 delta;\n        unchecked {\n            delta = int256(updatedValue) - int256(initialValue);\n        }\n        if (delta == 0) {\n            return 0;\n        }\n        uint256 absoluteInitialValue;\n        unchecked {\n            absoluteInitialValue = initialValue > deviationReference\n                ? uint256(int256(initialValue) - int256(deviationReference))\n                : uint256(int256(deviationReference) - int256(initialValue));\n        }\n        if (absoluteInitialValue == 0) {\n            return type(uint256).max;\n        }\n        uint256 absoluteDelta = delta > 0 ? uint256(delta) : uint256(-delta);\n        updateInPercentage =\n            (absoluteDelta * HUNDRED_PERCENT) /\n            absoluteInitialValue;\n    }\n}\n"
    },
    "contracts/api3-server-v1/extensions/BeaconUpdatesWithRrp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../DataFeedServer.sol\";\nimport \"./interfaces/IBeaconUpdatesWithRrp.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../../protocol/interfaces/IAirnodeProtocol.sol\";\n\n/// @title Contract that updates Beacons using regular and relayed RRP\ncontract BeaconUpdatesWithRrp is DataFeedServer, IBeaconUpdatesWithRrp {\n    using ECDSA for bytes32;\n\n    /// @notice AirnodeProtocol contract address\n    address public immutable override airnodeProtocol;\n\n    /// @notice If a sponsor has permitted an account to request RRP-based\n    /// updates at this contract\n    mapping(address => mapping(address => bool))\n        public\n        override sponsorToRrpBeaconUpdateRequesterToPermissionStatus;\n\n    mapping(bytes32 => bytes32) private requestIdToBeaconId;\n\n    /// @dev Reverts if the sender is not the AirnodeProtocol contract\n    modifier onlyAirnodeProtocol() {\n        require(\n            msg.sender == address(airnodeProtocol),\n            \"Sender not Airnode protocol\"\n        );\n        _;\n    }\n\n    /// @dev Reverts if the sender is not permitted to request an RRP-based\n    /// update with the sponsor and is not the sponsor\n    /// @param sponsor Sponsor address\n    modifier onlyPermittedUpdateRequester(address sponsor) {\n        require(\n            sponsor == msg.sender ||\n                sponsorToRrpBeaconUpdateRequesterToPermissionStatus[sponsor][\n                    msg.sender\n                ],\n            \"Sender not permitted\"\n        );\n        _;\n    }\n\n    /// @param _airnodeProtocol AirnodeProtocol contract address\n    constructor(address _airnodeProtocol) {\n        require(_airnodeProtocol != address(0), \"AirnodeProtocol address zero\");\n        airnodeProtocol = _airnodeProtocol;\n    }\n\n    /// @notice Called by the sponsor to set the update request permission\n    /// status of an account\n    /// @param rrpBeaconUpdateRequester RRP-based Beacon update requester\n    /// address\n    /// @param status Permission status\n    function setRrpBeaconUpdatePermissionStatus(\n        address rrpBeaconUpdateRequester,\n        bool status\n    ) external override {\n        require(\n            rrpBeaconUpdateRequester != address(0),\n            \"Update requester zero\"\n        );\n        sponsorToRrpBeaconUpdateRequesterToPermissionStatus[msg.sender][\n            rrpBeaconUpdateRequester\n        ] = status;\n        emit SetRrpBeaconUpdatePermissionStatus(\n            msg.sender,\n            rrpBeaconUpdateRequester,\n            status\n        );\n    }\n\n    /// @notice Creates an RRP request for the Beacon to be updated\n    /// @dev In addition to the sponsor sponsoring this contract (by calling\n    /// `setRrpSponsorshipStatus()`), the sponsor must also give update request\n    /// permission to the sender (by calling\n    /// `setRrpBeaconUpdatePermissionStatus()`) before this method is called.\n    /// The template must specify a single point of data of type `int256` to be\n    /// returned and for it to be small enough to be castable to `int224`\n    /// because this is what `fulfillRrpBeaconUpdate()` expects.\n    /// @param airnode Airnode address\n    /// @param templateId Template ID\n    /// @param sponsor Sponsor address\n    /// @return requestId Request ID\n    function requestRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address sponsor\n    )\n        external\n        override\n        onlyPermittedUpdateRequester(sponsor)\n        returns (bytes32 requestId)\n    {\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\n            airnode,\n            templateId,\n            \"\",\n            sponsor,\n            this.fulfillRrpBeaconUpdate.selector\n        );\n        requestIdToBeaconId[requestId] = beaconId;\n        emit RequestedRrpBeaconUpdate(\n            beaconId,\n            airnode,\n            templateId,\n            sponsor,\n            requestId,\n            msg.sender\n        );\n    }\n\n    /// @notice Creates an RRP request for the Beacon to be updated\n    /// @param airnode Airnode address\n    /// @param endpointId Endpoint ID\n    /// @param parameters Parameters\n    /// @param sponsor Sponsor address\n    /// @return requestId Request ID\n    function requestRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address sponsor\n    )\n        external\n        override\n        onlyPermittedUpdateRequester(sponsor)\n        returns (bytes32 requestId)\n    {\n        bytes32 templateId = keccak256(\n            abi.encodePacked(endpointId, parameters)\n        );\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\n            airnode,\n            endpointId,\n            parameters,\n            sponsor,\n            this.fulfillRrpBeaconUpdate.selector\n        );\n        requestIdToBeaconId[requestId] = beaconId;\n        emit RequestedRrpBeaconUpdate(\n            beaconId,\n            airnode,\n            templateId,\n            sponsor,\n            requestId,\n            msg.sender\n        );\n    }\n\n    /// @notice Creates an RRP request for the Beacon to be updated by the relayer\n    /// @param airnode Airnode address\n    /// @param templateId Template ID\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @return requestId Request ID\n    function requestRelayedRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address relayer,\n        address sponsor\n    )\n        external\n        override\n        onlyPermittedUpdateRequester(sponsor)\n        returns (bytes32 requestId)\n    {\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\n            airnode,\n            templateId,\n            \"\",\n            relayer,\n            sponsor,\n            this.fulfillRrpBeaconUpdate.selector\n        );\n        requestIdToBeaconId[requestId] = beaconId;\n        emit RequestedRelayedRrpBeaconUpdate(\n            beaconId,\n            airnode,\n            templateId,\n            relayer,\n            sponsor,\n            requestId,\n            msg.sender\n        );\n    }\n\n    /// @notice Creates an RRP request for the Beacon to be updated by the relayer\n    /// @param airnode Airnode address\n    /// @param endpointId Endpoint ID\n    /// @param parameters Parameters\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @return requestId Request ID\n    function requestRelayedRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor\n    )\n        external\n        override\n        onlyPermittedUpdateRequester(sponsor)\n        returns (bytes32 requestId)\n    {\n        bytes32 templateId = keccak256(\n            abi.encodePacked(endpointId, parameters)\n        );\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\n            airnode,\n            endpointId,\n            parameters,\n            relayer,\n            sponsor,\n            this.fulfillRrpBeaconUpdate.selector\n        );\n        requestIdToBeaconId[requestId] = beaconId;\n        emit RequestedRelayedRrpBeaconUpdate(\n            beaconId,\n            airnode,\n            templateId,\n            relayer,\n            sponsor,\n            requestId,\n            msg.sender\n        );\n    }\n\n    /// @notice Called by the Airnode/relayer using the sponsor wallet through\n    /// AirnodeProtocol to fulfill the request\n    /// @param requestId Request ID\n    /// @param timestamp Timestamp used in the signature\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\n    function fulfillRrpBeaconUpdate(\n        bytes32 requestId,\n        uint256 timestamp,\n        bytes calldata data\n    ) external override onlyAirnodeProtocol {\n        bytes32 beaconId = requestIdToBeaconId[requestId];\n        delete requestIdToBeaconId[requestId];\n        int224 updatedValue = processBeaconUpdate(beaconId, timestamp, data);\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\n        // means it will be small enough to be typecast into `uint32`\n        emit UpdatedBeaconWithRrp(\n            beaconId,\n            requestId,\n            updatedValue,\n            uint32(timestamp)\n        );\n    }\n}\n"
    },
    "contracts/api3-server-v1/extensions/DataFeedUpdatesWithPsp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./BeaconSetUpdatesWithPsp.sol\";\nimport \"./interfaces/IDataFeedUpdatesWithPsp.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n/// @title Contract that updates Beacons and Beacon sets using regular and\n/// relayed PSP\n/// @dev DataFeedUpdatesWithPsp is a PSP requester contract. Unlike RRP, which\n/// is implemented as a central contract, PSP implementation is built into the\n/// requester for optimization. Accordingly, the checks that are not required\n/// are omitted. An example:\n/// - While executing a PSP Beacon update, the condition is not verified\n/// because Beacon updates where the condition returns `false` (e.g., the\n/// on-chain value is already close to the actual value) are not harmful, and\n/// are even desirable (\"any update is a good update\").\ncontract DataFeedUpdatesWithPsp is\n    BeaconSetUpdatesWithPsp,\n    IDataFeedUpdatesWithPsp\n{\n    using ECDSA for bytes32;\n\n    /// @notice ID of the Beacon that the subscription is registered to update\n    mapping(bytes32 => bytes32) public override subscriptionIdToBeaconId;\n\n    mapping(bytes32 => bytes32) private subscriptionIdToHash;\n\n    /// @notice Registers the Beacon update subscription\n    /// @dev Similar to how one needs to call `requestRrpBeaconUpdate()` for\n    /// this contract to recognize the incoming RRP fulfillment, this needs to\n    /// be called before the subscription fulfillments.\n    /// In addition to the subscription being registered, the sponsor must use\n    /// `setPspSponsorshipStatus()` to give permission for its sponsor wallet\n    /// to be used for the specific subscription.\n    /// @param airnode Airnode address\n    /// @param templateId Template ID\n    /// @param conditions Conditions under which the subscription is requested\n    /// to be fulfilled\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @return subscriptionId Subscription ID\n    function registerBeaconUpdateSubscription(\n        address airnode,\n        bytes32 templateId,\n        bytes calldata conditions,\n        address relayer,\n        address sponsor\n    ) external override returns (bytes32 subscriptionId) {\n        require(relayer != address(0), \"Relayer address zero\");\n        require(sponsor != address(0), \"Sponsor address zero\");\n        subscriptionId = keccak256(\n            abi.encode(\n                block.chainid,\n                airnode,\n                templateId,\n                \"\",\n                conditions,\n                relayer,\n                sponsor,\n                address(this),\n                this.fulfillPspBeaconUpdate.selector\n            )\n        );\n        require(\n            subscriptionIdToHash[subscriptionId] == bytes32(0),\n            \"Subscription already registered\"\n        );\n        subscriptionIdToHash[subscriptionId] = keccak256(\n            abi.encodePacked(airnode, relayer, sponsor)\n        );\n        bytes32 beaconId = deriveBeaconId(airnode, templateId);\n        subscriptionIdToBeaconId[subscriptionId] = beaconId;\n        emit RegisteredBeaconUpdateSubscription(\n            beaconId,\n            subscriptionId,\n            airnode,\n            templateId,\n            conditions,\n            relayer,\n            sponsor\n        );\n    }\n\n    /// @notice Returns if the respective Beacon needs to be updated based on\n    /// the fulfillment data and the condition parameters\n    /// @dev `conditionParameters` are specified within the `conditions` field\n    /// of a Subscription.\n    /// Even if this function returns `true`, the respective Subscription\n    /// fulfillment will fail if the Beacon is updated with a larger timestamp\n    /// in the meantime.\n    /// @param subscriptionId Subscription ID\n    /// @param data Fulfillment data (an `int256` encoded in contract ABI)\n    /// @param conditionParameters Subscription condition parameters. This\n    /// includes multiple ABI-encoded values, see `checkUpdateCondition()`.\n    /// @return If the Beacon update subscription should be fulfilled\n    function conditionPspBeaconUpdate(\n        bytes32 subscriptionId,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) public view virtual override returns (bool) {\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\n        require(beaconId != bytes32(0), \"Subscription not registered\");\n        return\n            checkUpdateCondition(\n                beaconId,\n                decodeFulfillmentData(data),\n                uint32(block.timestamp),\n                conditionParameters\n            );\n    }\n\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\n    /// fulfill the Beacon update subscription\n    /// @dev There is no need to verify that `conditionPspBeaconUpdate()`\n    /// returns `true` because any Beacon update is a good Beacon update as\n    /// long as it increases the timestamp\n    /// @param subscriptionId Subscription ID\n    /// @param airnode Airnode address\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @param timestamp Timestamp used in the signature\n    /// @param data Fulfillment data (a single `int256` encoded in contract\n    /// ABI)\n    /// @param signature Subscription ID, timestamp, sponsor wallet address\n    /// (and fulfillment data if the relayer is not the Airnode) signed by the\n    /// Airnode wallet\n    function fulfillPspBeaconUpdate(\n        bytes32 subscriptionId,\n        address airnode,\n        address relayer,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external override {\n        require(\n            subscriptionIdToHash[subscriptionId] ==\n                keccak256(abi.encodePacked(airnode, relayer, sponsor)),\n            \"Subscription not registered\"\n        );\n        if (airnode == relayer) {\n            require(\n                (\n                    keccak256(\n                        abi.encodePacked(subscriptionId, timestamp, msg.sender)\n                    ).toEthSignedMessageHash()\n                ).recover(signature) == airnode,\n                \"Signature mismatch\"\n            );\n        } else {\n            require(\n                (\n                    keccak256(\n                        abi.encodePacked(\n                            subscriptionId,\n                            timestamp,\n                            msg.sender,\n                            data\n                        )\n                    ).toEthSignedMessageHash()\n                ).recover(signature) == airnode,\n                \"Signature mismatch\"\n            );\n        }\n        bytes32 beaconId = subscriptionIdToBeaconId[subscriptionId];\n        // Beacon ID is guaranteed to not be zero because the subscription is\n        // registered\n        int224 updatedValue = processBeaconUpdate(beaconId, timestamp, data);\n        // Timestamp validity is already checked by `onlyValidTimestamp`, which\n        // means it will be small enough to be typecast into `uint32`\n        emit UpdatedBeaconWithPsp(\n            beaconId,\n            subscriptionId,\n            updatedValue,\n            uint32(timestamp)\n        );\n    }\n}\n"
    },
    "contracts/api3-server-v1/extensions/interfaces/IBeaconSetUpdatesWithPsp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IDataFeedServer.sol\";\n\ninterface IBeaconSetUpdatesWithPsp is IDataFeedServer {\n    function conditionPspBeaconSetUpdate(\n        bytes32 subscriptionId,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) external view returns (bool);\n\n    function fulfillPspBeaconSetUpdate(\n        bytes32 subscriptionId,\n        address airnode,\n        address relayer,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function HUNDRED_PERCENT() external view returns (uint256);\n}\n"
    },
    "contracts/api3-server-v1/extensions/interfaces/IBeaconUpdatesWithRrp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/IDataFeedServer.sol\";\n\ninterface IBeaconUpdatesWithRrp is IDataFeedServer {\n    event SetRrpBeaconUpdatePermissionStatus(\n        address indexed sponsor,\n        address indexed requester,\n        bool status\n    );\n\n    event RequestedRrpBeaconUpdate(\n        bytes32 indexed beaconId,\n        address airnode,\n        bytes32 templateId,\n        address sponsor,\n        bytes32 requestId,\n        address requester\n    );\n\n    event RequestedRelayedRrpBeaconUpdate(\n        bytes32 indexed beaconId,\n        address airnode,\n        bytes32 templateId,\n        address relayer,\n        address sponsor,\n        bytes32 requestId,\n        address requester\n    );\n\n    event UpdatedBeaconWithRrp(\n        bytes32 indexed beaconId,\n        bytes32 requestId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    function setRrpBeaconUpdatePermissionStatus(\n        address rrpBeaconUpdateRequester,\n        bool status\n    ) external;\n\n    function requestRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRelayedRrpBeaconUpdateWithTemplate(\n        address airnode,\n        bytes32 templateId,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function requestRelayedRrpBeaconUpdateWithEndpoint(\n        address airnode,\n        bytes32 endpointId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 requestId);\n\n    function fulfillRrpBeaconUpdate(\n        bytes32 requestId,\n        uint256 timestamp,\n        bytes calldata data\n    ) external;\n\n    function airnodeProtocol() external view returns (address);\n\n    function sponsorToRrpBeaconUpdateRequesterToPermissionStatus(\n        address sponsor,\n        address updateRequester\n    ) external view returns (bool);\n}\n"
    },
    "contracts/api3-server-v1/extensions/interfaces/IDataFeedUpdatesWithPsp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IBeaconSetUpdatesWithPsp.sol\";\n\ninterface IDataFeedUpdatesWithPsp is IBeaconSetUpdatesWithPsp {\n    event RegisteredBeaconUpdateSubscription(\n        bytes32 indexed beaconId,\n        bytes32 subscriptionId,\n        address airnode,\n        bytes32 templateId,\n        bytes conditions,\n        address relayer,\n        address sponsor\n    );\n\n    event UpdatedBeaconWithPsp(\n        bytes32 indexed beaconId,\n        bytes32 subscriptionId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    function registerBeaconUpdateSubscription(\n        address airnode,\n        bytes32 templateId,\n        bytes memory conditions,\n        address relayer,\n        address sponsor\n    ) external returns (bytes32 subscriptionId);\n\n    function conditionPspBeaconUpdate(\n        bytes32 subscriptionId,\n        bytes calldata data,\n        bytes calldata conditionParameters\n    ) external view returns (bool);\n\n    function fulfillPspBeaconUpdate(\n        bytes32 subscriptionId,\n        address airnode,\n        address relayer,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external;\n\n    function subscriptionIdToBeaconId(\n        bytes32 subscriptionId\n    ) external view returns (bytes32);\n}\n"
    },
    "contracts/api3-server-v1/extensions/mock/DataFeedServerFull.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../../Api3ServerV1.sol\";\nimport \"../BeaconUpdatesWithRrp.sol\";\nimport \"../DataFeedUpdatesWithPsp.sol\";\n\ncontract DataFeedServerFull is\n    Api3ServerV1,\n    BeaconUpdatesWithRrp,\n    DataFeedUpdatesWithPsp\n{\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager,\n        address _airnodeProtocol\n    )\n        Api3ServerV1(_accessControlRegistry, _adminRoleDescription, _manager)\n        BeaconUpdatesWithRrp(_airnodeProtocol)\n    {}\n}\n"
    },
    "contracts/api3-server-v1/interfaces/IApi3ServerV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IOevDapiServer.sol\";\nimport \"./IBeaconUpdatesWithSignedData.sol\";\n\ninterface IApi3ServerV1 is IOevDapiServer, IBeaconUpdatesWithSignedData {\n    function readDataFeedWithId(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithDapiNameHash(\n        bytes32 dapiNameHash\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithIdAsOevProxy(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function readDataFeedWithDapiNameHashAsOevProxy(\n        bytes32 dapiNameHash\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function dataFeeds(\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n\n    function oevProxyToIdToDataFeed(\n        address proxy,\n        bytes32 dataFeedId\n    ) external view returns (int224 value, uint32 timestamp);\n}\n"
    },
    "contracts/api3-server-v1/interfaces/IBeaconUpdatesWithSignedData.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IDataFeedServer.sol\";\n\ninterface IBeaconUpdatesWithSignedData is IDataFeedServer {\n    function updateBeaconWithSignedData(\n        address airnode,\n        bytes32 templateId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external returns (bytes32 beaconId);\n}\n"
    },
    "contracts/api3-server-v1/interfaces/IDapiServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\nimport \"./IDataFeedServer.sol\";\n\ninterface IDapiServer is\n    IAccessControlRegistryAdminnedWithManager,\n    IDataFeedServer\n{\n    event SetDapiName(\n        bytes32 indexed dataFeedId,\n        bytes32 indexed dapiName,\n        address sender\n    );\n\n    function setDapiName(bytes32 dapiName, bytes32 dataFeedId) external;\n\n    function dapiNameToDataFeedId(\n        bytes32 dapiName\n    ) external view returns (bytes32);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DAPI_NAME_SETTER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    function dapiNameSetterRole() external view returns (bytes32);\n\n    function dapiNameHashToDataFeedId(\n        bytes32 dapiNameHash\n    ) external view returns (bytes32 dataFeedId);\n}\n"
    },
    "contracts/api3-server-v1/interfaces/IDataFeedServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../utils/interfaces/IExtendedSelfMulticall.sol\";\n\ninterface IDataFeedServer is IExtendedSelfMulticall {\n    event UpdatedBeaconWithSignedData(\n        bytes32 indexed beaconId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedBeaconSetWithBeacons(\n        bytes32 indexed beaconSetId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    function updateBeaconSetWithBeacons(\n        bytes32[] memory beaconIds\n    ) external returns (bytes32 beaconSetId);\n}\n"
    },
    "contracts/api3-server-v1/interfaces/IOevDapiServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IOevDataFeedServer.sol\";\nimport \"./IDapiServer.sol\";\n\ninterface IOevDapiServer is IOevDataFeedServer, IDapiServer {}\n"
    },
    "contracts/api3-server-v1/interfaces/IOevDataFeedServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IDataFeedServer.sol\";\n\ninterface IOevDataFeedServer is IDataFeedServer {\n    event UpdatedOevProxyBeaconWithSignedData(\n        bytes32 indexed beaconId,\n        address indexed proxy,\n        bytes32 indexed updateId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event UpdatedOevProxyBeaconSetWithSignedData(\n        bytes32 indexed beaconSetId,\n        address indexed proxy,\n        bytes32 indexed updateId,\n        int224 value,\n        uint32 timestamp\n    );\n\n    event Withdrew(\n        address indexed oevProxy,\n        address oevBeneficiary,\n        uint256 amount\n    );\n\n    function updateOevProxyDataFeedWithSignedData(\n        address oevProxy,\n        bytes32 dataFeedId,\n        bytes32 updateId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes[] calldata packedOevUpdateSignatures\n    ) external payable;\n\n    function withdraw(address oevProxy) external;\n\n    function oevProxyToBalance(\n        address oevProxy\n    ) external view returns (uint256 balance);\n}\n"
    },
    "contracts/api3-server-v1/OevDapiServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./OevDataFeedServer.sol\";\nimport \"./DapiServer.sol\";\nimport \"./interfaces/IOevDapiServer.sol\";\n\n/// @title Contract that serves OEV dAPIs\ncontract OevDapiServer is OevDataFeedServer, DapiServer, IOevDapiServer {\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    ) DapiServer(_accessControlRegistry, _adminRoleDescription, _manager) {}\n\n    /// @notice Reads the data feed as the OEV proxy with dAPI name hash\n    /// @param dapiNameHash dAPI name hash\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function _readDataFeedWithDapiNameHashAsOevProxy(\n        bytes32 dapiNameHash\n    ) internal view returns (int224 value, uint32 timestamp) {\n        bytes32 dataFeedId = dapiNameHashToDataFeedId[dapiNameHash];\n        require(dataFeedId != bytes32(0), \"dAPI name not set\");\n        DataFeed storage oevDataFeed = _oevProxyToIdToDataFeed[msg.sender][\n            dataFeedId\n        ];\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\n        } else {\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n        }\n        require(timestamp > 0, \"Data feed not initialized\");\n    }\n}\n"
    },
    "contracts/api3-server-v1/OevDataFeedServer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./DataFeedServer.sol\";\nimport \"./interfaces/IOevDataFeedServer.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./proxies/interfaces/IOevProxy.sol\";\n\n/// @title Contract that serves OEV Beacons and Beacon sets\n/// @notice OEV Beacons and Beacon sets can be updated by the winner of the\n/// respective OEV auctions. The beneficiary can withdraw the proceeds from\n/// this contract.\ncontract OevDataFeedServer is DataFeedServer, IOevDataFeedServer {\n    using ECDSA for bytes32;\n\n    /// @notice Data feed with ID specific to the OEV proxy\n    /// @dev This implies that an update as a result of an OEV auction only\n    /// affects contracts that read through the respective proxy that the\n    /// auction was being held for\n    mapping(address => mapping(bytes32 => DataFeed))\n        internal _oevProxyToIdToDataFeed;\n\n    /// @notice Accumulated OEV auction proceeds for the specific proxy\n    mapping(address => uint256) public override oevProxyToBalance;\n\n    /// @notice Updates a data feed that the OEV proxy reads using the\n    /// aggregation signed by the absolute majority of the respective Airnodes\n    /// for the specific bid\n    /// @dev For when the data feed being updated is a Beacon set, an absolute\n    /// majority of the Airnodes that power the respective Beacons must sign\n    /// the aggregated value and timestamp. While doing so, the Airnodes should\n    /// refer to data signed to update an absolute majority of the respective\n    /// Beacons. The Airnodes should require the data to be fresh enough (e.g.,\n    /// at most 2 minutes-old), and tightly distributed around the resulting\n    /// aggregation (e.g., within 1% deviation), and reject to provide an OEV\n    /// proxy data feed update signature if these are not satisfied.\n    /// @param oevProxy OEV proxy that reads the data feed\n    /// @param dataFeedId Data feed ID\n    /// @param updateId Update ID\n    /// @param timestamp Signature timestamp\n    /// @param data Update data (an `int256` encoded in contract ABI)\n    /// @param packedOevUpdateSignatures Packed OEV update signatures, which\n    /// include the Airnode address, template ID and these signed with the OEV\n    /// update hash\n    function updateOevProxyDataFeedWithSignedData(\n        address oevProxy,\n        bytes32 dataFeedId,\n        bytes32 updateId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes[] calldata packedOevUpdateSignatures\n    ) external payable override onlyValidTimestamp(timestamp) {\n        require(\n            timestamp > _oevProxyToIdToDataFeed[oevProxy][dataFeedId].timestamp,\n            \"Does not update timestamp\"\n        );\n        bytes32 oevUpdateHash = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                oevProxy,\n                dataFeedId,\n                updateId,\n                timestamp,\n                data,\n                msg.sender,\n                msg.value\n            )\n        );\n        int224 updatedValue = decodeFulfillmentData(data);\n        uint32 updatedTimestamp = uint32(timestamp);\n        uint256 beaconCount = packedOevUpdateSignatures.length;\n        if (beaconCount > 1) {\n            bytes32[] memory beaconIds = new bytes32[](beaconCount);\n            uint256 validSignatureCount;\n            for (uint256 ind = 0; ind < beaconCount; ) {\n                bool signatureIsNotOmitted;\n                (\n                    signatureIsNotOmitted,\n                    beaconIds[ind]\n                ) = unpackAndValidateOevUpdateSignature(\n                    oevUpdateHash,\n                    packedOevUpdateSignatures[ind]\n                );\n                if (signatureIsNotOmitted) {\n                    unchecked {\n                        validSignatureCount++;\n                    }\n                }\n                unchecked {\n                    ind++;\n                }\n            }\n            // \"Greater than or equal to\" is not enough because full control\n            // of aggregation requires an absolute majority\n            require(\n                validSignatureCount > beaconCount / 2,\n                \"Not enough signatures\"\n            );\n            require(\n                dataFeedId == deriveBeaconSetId(beaconIds),\n                \"Beacon set ID mismatch\"\n            );\n            emit UpdatedOevProxyBeaconSetWithSignedData(\n                dataFeedId,\n                oevProxy,\n                updateId,\n                updatedValue,\n                updatedTimestamp\n            );\n        } else if (beaconCount == 1) {\n            {\n                (\n                    bool signatureIsNotOmitted,\n                    bytes32 beaconId\n                ) = unpackAndValidateOevUpdateSignature(\n                        oevUpdateHash,\n                        packedOevUpdateSignatures[0]\n                    );\n                require(signatureIsNotOmitted, \"Missing signature\");\n                require(dataFeedId == beaconId, \"Beacon ID mismatch\");\n            }\n            emit UpdatedOevProxyBeaconWithSignedData(\n                dataFeedId,\n                oevProxy,\n                updateId,\n                updatedValue,\n                updatedTimestamp\n            );\n        } else {\n            revert(\"Did not specify any Beacons\");\n        }\n        _oevProxyToIdToDataFeed[oevProxy][dataFeedId] = DataFeed({\n            value: updatedValue,\n            timestamp: updatedTimestamp\n        });\n        oevProxyToBalance[oevProxy] += msg.value;\n    }\n\n    /// @notice Withdraws the balance of the OEV proxy to the respective\n    /// beneficiary account\n    /// @dev This does not require the caller to be the beneficiary because we\n    /// expect that in most cases, the OEV beneficiary will be a contract that\n    /// will not be able to make arbitrary calls. Our choice can be worked\n    /// around by implementing a beneficiary proxy.\n    /// @param oevProxy OEV proxy\n    function withdraw(address oevProxy) external override {\n        address oevBeneficiary = IOevProxy(oevProxy).oevBeneficiary();\n        require(oevBeneficiary != address(0), \"Beneficiary address zero\");\n        uint256 balance = oevProxyToBalance[oevProxy];\n        require(balance != 0, \"OEV proxy balance zero\");\n        oevProxyToBalance[oevProxy] = 0;\n        emit Withdrew(oevProxy, oevBeneficiary, balance);\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = oevBeneficiary.call{value: balance}(\"\");\n        require(success, \"Withdrawal reverted\");\n    }\n\n    /// @notice Reads the data feed as the OEV proxy with ID\n    /// @param dataFeedId Data feed ID\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function _readDataFeedWithIdAsOevProxy(\n        bytes32 dataFeedId\n    ) internal view returns (int224 value, uint32 timestamp) {\n        DataFeed storage oevDataFeed = _oevProxyToIdToDataFeed[msg.sender][\n            dataFeedId\n        ];\n        DataFeed storage dataFeed = _dataFeeds[dataFeedId];\n        if (oevDataFeed.timestamp > dataFeed.timestamp) {\n            (value, timestamp) = (oevDataFeed.value, oevDataFeed.timestamp);\n        } else {\n            (value, timestamp) = (dataFeed.value, dataFeed.timestamp);\n        }\n        require(timestamp > 0, \"Data feed not initialized\");\n    }\n\n    /// @notice Called privately to unpack and validate the OEV update\n    /// signature\n    /// @param oevUpdateHash OEV update hash\n    /// @param packedOevUpdateSignature Packed OEV update signature, which\n    /// includes the Airnode address, template ID and these signed with the OEV\n    /// update hash\n    /// @return signatureIsNotOmitted If the signature is omitted in\n    /// `packedOevUpdateSignature`\n    /// @return beaconId Beacon ID\n    function unpackAndValidateOevUpdateSignature(\n        bytes32 oevUpdateHash,\n        bytes calldata packedOevUpdateSignature\n    ) private pure returns (bool signatureIsNotOmitted, bytes32 beaconId) {\n        (address airnode, bytes32 templateId, bytes memory signature) = abi\n            .decode(packedOevUpdateSignature, (address, bytes32, bytes));\n        beaconId = deriveBeaconId(airnode, templateId);\n        if (signature.length != 0) {\n            require(\n                (\n                    keccak256(abi.encodePacked(oevUpdateHash, templateId))\n                        .toEthSignedMessageHash()\n                ).recover(signature) == airnode,\n                \"Signature mismatch\"\n            );\n            signatureIsNotOmitted = true;\n        }\n    }\n}\n"
    },
    "contracts/api3-server-v1/proxies/DapiProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IDapiProxy.sol\";\nimport \"../interfaces/IApi3ServerV1.sol\";\n\n/// @title An immutable proxy contract that is used to read a specific dAPI of\n/// a specific Api3ServerV1 contract\n/// @notice In an effort to reduce the bytecode of this contract, its\n/// constructor arguments are validated by ProxyFactory, rather than\n/// internally. If you intend to deploy this contract without using\n/// ProxyFactory, you are recommended to implement an equivalent validation.\n/// @dev The proxy contracts are generalized to support most types of numerical\n/// data feeds. This means that the user of this proxy is expected to validate\n/// the read values according to the specific use-case. For example, `value` is\n/// a signed integer, yet it being negative may not make sense in the case that\n/// the data feed represents the spot price of an asset. In that case, the user\n/// is responsible with ensuring that `value` is not negative.\n/// In the case that the data feed is from a single source, `timestamp` is the\n/// system time of the Airnode when it signed the data. In the case that the\n/// data feed is from multiple sources, `timestamp` is the median of system\n/// times of the Airnodes when they signed the respective data. There are two\n/// points to consider while using `timestamp` in your contract logic: (1) It\n/// is based on the system time of the Airnodes, and not the block timestamp.\n/// This may be relevant when either of them drifts. (2) `timestamp` is an\n/// off-chain value that is being reported, similar to `value`. Both should\n/// only be trusted as much as the Airnode(s) that report them.\ncontract DapiProxy is IDapiProxy {\n    /// @notice Api3ServerV1 address\n    address public immutable override api3ServerV1;\n    /// @notice Hash of the dAPI name\n    bytes32 public immutable override dapiNameHash;\n\n    /// @param _api3ServerV1 Api3ServerV1 address\n    /// @param _dapiNameHash Hash of the dAPI name\n    constructor(address _api3ServerV1, bytes32 _dapiNameHash) {\n        api3ServerV1 = _api3ServerV1;\n        dapiNameHash = _dapiNameHash;\n    }\n\n    /// @notice Reads the dAPI that this proxy maps to\n    /// @return value dAPI value\n    /// @return timestamp dAPI timestamp\n    function read()\n        external\n        view\n        virtual\n        override\n        returns (int224 value, uint32 timestamp)\n    {\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\n            .readDataFeedWithDapiNameHash(dapiNameHash);\n    }\n}\n"
    },
    "contracts/api3-server-v1/proxies/DapiProxyWithOev.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DapiProxy.sol\";\nimport \"./interfaces/IOevProxy.sol\";\n\n/// @title An immutable proxy contract that is used to read a specific dAPI of\n/// a specific Api3ServerV1 contract and inform Api3ServerV1 about the\n/// beneficiary of the respective OEV proceeds\n/// @notice In an effort to reduce the bytecode of this contract, its\n/// constructor arguments are validated by ProxyFactory, rather than\n/// internally. If you intend to deploy this contract without using\n/// ProxyFactory, you are recommended to implement an equivalent validation.\n/// @dev See DapiProxy.sol for comments about usage\ncontract DapiProxyWithOev is DapiProxy, IOevProxy {\n    /// @notice OEV beneficiary address\n    address public immutable override oevBeneficiary;\n\n    /// @param _api3ServerV1 Api3ServerV1 address\n    /// @param _dapiNameHash Hash of the dAPI name\n    /// @param _oevBeneficiary OEV beneficiary\n    constructor(\n        address _api3ServerV1,\n        bytes32 _dapiNameHash,\n        address _oevBeneficiary\n    ) DapiProxy(_api3ServerV1, _dapiNameHash) {\n        oevBeneficiary = _oevBeneficiary;\n    }\n\n    /// @notice Reads the dAPI that this proxy maps to\n    /// @return value dAPI value\n    /// @return timestamp dAPI timestamp\n    function read()\n        external\n        view\n        virtual\n        override\n        returns (int224 value, uint32 timestamp)\n    {\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\n            .readDataFeedWithDapiNameHashAsOevProxy(dapiNameHash);\n    }\n}\n"
    },
    "contracts/api3-server-v1/proxies/DataFeedProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IDataFeedProxy.sol\";\nimport \"../interfaces/IApi3ServerV1.sol\";\n\n/// @title An immutable proxy contract that is used to read a specific data\n/// feed (Beacon or Beacon set) of a specific Api3ServerV1 contract\n/// @notice In an effort to reduce the bytecode of this contract, its\n/// constructor arguments are validated by ProxyFactory, rather than\n/// internally. If you intend to deploy this contract without using\n/// ProxyFactory, you are recommended to implement an equivalent validation.\n/// @dev See DapiProxy.sol for comments about usage\ncontract DataFeedProxy is IDataFeedProxy {\n    /// @notice Api3ServerV1 address\n    address public immutable override api3ServerV1;\n    /// @notice Data feed ID\n    bytes32 public immutable override dataFeedId;\n\n    /// @param _api3ServerV1 Api3ServerV1 address\n    /// @param _dataFeedId Data feed (Beacon or Beacon set) ID\n    constructor(address _api3ServerV1, bytes32 _dataFeedId) {\n        api3ServerV1 = _api3ServerV1;\n        dataFeedId = _dataFeedId;\n    }\n\n    /// @notice Reads the data feed that this proxy maps to\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function read()\n        external\n        view\n        virtual\n        override\n        returns (int224 value, uint32 timestamp)\n    {\n        (value, timestamp) = IApi3ServerV1(api3ServerV1).readDataFeedWithId(\n            dataFeedId\n        );\n    }\n}\n"
    },
    "contracts/api3-server-v1/proxies/DataFeedProxyWithOev.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DataFeedProxy.sol\";\nimport \"./interfaces/IOevProxy.sol\";\n\n/// @title An immutable proxy contract that is used to read a specific data\n/// feed (Beacon or Beacon set) of a specific Api3ServerV1 contract and inform\n/// Api3ServerV1 about the beneficiary of the respective OEV proceeds\n/// @notice In an effort to reduce the bytecode of this contract, its\n/// constructor arguments are validated by ProxyFactory, rather than\n/// internally. If you intend to deploy this contract without using\n/// ProxyFactory, you are recommended to implement an equivalent validation.\n/// @dev See DapiProxy.sol for comments about usage\ncontract DataFeedProxyWithOev is DataFeedProxy, IOevProxy {\n    /// @notice OEV beneficiary address\n    address public immutable override oevBeneficiary;\n\n    /// @param _api3ServerV1 Api3ServerV1 address\n    /// @param _dataFeedId Data feed (Beacon or Beacon set) ID\n    /// @param _oevBeneficiary OEV beneficiary\n    constructor(\n        address _api3ServerV1,\n        bytes32 _dataFeedId,\n        address _oevBeneficiary\n    ) DataFeedProxy(_api3ServerV1, _dataFeedId) {\n        oevBeneficiary = _oevBeneficiary;\n    }\n\n    /// @notice Reads the data feed that this proxy maps to\n    /// @return value Data feed value\n    /// @return timestamp Data feed timestamp\n    function read()\n        external\n        view\n        virtual\n        override\n        returns (int224 value, uint32 timestamp)\n    {\n        (value, timestamp) = IApi3ServerV1(api3ServerV1)\n            .readDataFeedWithIdAsOevProxy(dataFeedId);\n    }\n}\n"
    },
    "contracts/api3-server-v1/proxies/interfaces/IDapiProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IProxy.sol\";\n\ninterface IDapiProxy is IProxy {\n    function dapiNameHash() external view returns (bytes32);\n}\n"
    },
    "contracts/api3-server-v1/proxies/interfaces/IDataFeedProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IProxy.sol\";\n\ninterface IDataFeedProxy is IProxy {\n    function dataFeedId() external view returns (bytes32);\n}\n"
    },
    "contracts/api3-server-v1/proxies/interfaces/IOevProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOevProxy {\n    function oevBeneficiary() external view returns (address);\n}\n"
    },
    "contracts/api3-server-v1/proxies/interfaces/IProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @dev See DapiProxy.sol for comments about usage\ninterface IProxy {\n    function read() external view returns (int224 value, uint32 timestamp);\n\n    function api3ServerV1() external view returns (address);\n}\n"
    },
    "contracts/api3-server-v1/proxies/interfaces/IProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IProxyFactory {\n    event DeployedDataFeedProxy(\n        address indexed proxyAddress,\n        bytes32 indexed dataFeedId,\n        bytes metadata\n    );\n\n    event DeployedDapiProxy(\n        address indexed proxyAddress,\n        bytes32 indexed dapiName,\n        bytes metadata\n    );\n\n    event DeployedDataFeedProxyWithOev(\n        address indexed proxyAddress,\n        bytes32 indexed dataFeedId,\n        address oevBeneficiary,\n        bytes metadata\n    );\n\n    event DeployedDapiProxyWithOev(\n        address indexed proxyAddress,\n        bytes32 indexed dapiName,\n        address oevBeneficiary,\n        bytes metadata\n    );\n\n    function deployDataFeedProxy(\n        bytes32 dataFeedId,\n        bytes calldata metadata\n    ) external returns (address proxyAddress);\n\n    function deployDapiProxy(\n        bytes32 dapiName,\n        bytes calldata metadata\n    ) external returns (address proxyAddress);\n\n    function deployDataFeedProxyWithOev(\n        bytes32 dataFeedId,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external returns (address proxyAddress);\n\n    function deployDapiProxyWithOev(\n        bytes32 dapiName,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external returns (address proxyAddress);\n\n    function computeDataFeedProxyAddress(\n        bytes32 dataFeedId,\n        bytes calldata metadata\n    ) external view returns (address proxyAddress);\n\n    function computeDapiProxyAddress(\n        bytes32 dapiName,\n        bytes calldata metadata\n    ) external view returns (address proxyAddress);\n\n    function computeDataFeedProxyWithOevAddress(\n        bytes32 dataFeedId,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external view returns (address proxyAddress);\n\n    function computeDapiProxyWithOevAddress(\n        bytes32 dapiName,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external view returns (address proxyAddress);\n\n    function api3ServerV1() external view returns (address);\n}\n"
    },
    "contracts/api3-server-v1/proxies/ProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./DataFeedProxy.sol\";\nimport \"./DapiProxy.sol\";\nimport \"./DataFeedProxyWithOev.sol\";\nimport \"./DapiProxyWithOev.sol\";\nimport \"./interfaces/IProxyFactory.sol\";\nimport \"@openzeppelin/contracts/utils/Create2.sol\";\n\n/// @title Contract factory that deterministically deploys proxies that read\n/// data feeds (Beacons or Beacon sets) or dAPIs, along with optional OEV\n/// support\n/// @dev The proxies are deployed normally and not cloned to minimize the gas\n/// cost overhead while using them to read data feed values\ncontract ProxyFactory is IProxyFactory {\n    /// @notice Api3ServerV1 address\n    address public immutable override api3ServerV1;\n\n    /// @param _api3ServerV1 Api3ServerV1 address\n    constructor(address _api3ServerV1) {\n        require(_api3ServerV1 != address(0), \"Api3ServerV1 address zero\");\n        api3ServerV1 = _api3ServerV1;\n    }\n\n    /// @notice Deterministically deploys a data feed proxy\n    /// @param dataFeedId Data feed ID\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function deployDataFeedProxy(\n        bytes32 dataFeedId,\n        bytes calldata metadata\n    ) external override returns (address proxyAddress) {\n        require(dataFeedId != bytes32(0), \"Data feed ID zero\");\n        proxyAddress = address(\n            new DataFeedProxy{salt: keccak256(metadata)}(\n                api3ServerV1,\n                dataFeedId\n            )\n        );\n        emit DeployedDataFeedProxy(proxyAddress, dataFeedId, metadata);\n    }\n\n    /// @notice Deterministically deploys a dAPI proxy\n    /// @param dapiName dAPI name\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function deployDapiProxy(\n        bytes32 dapiName,\n        bytes calldata metadata\n    ) external override returns (address proxyAddress) {\n        require(dapiName != bytes32(0), \"dAPI name zero\");\n        proxyAddress = address(\n            new DapiProxy{salt: keccak256(metadata)}(\n                api3ServerV1,\n                keccak256(abi.encodePacked(dapiName))\n            )\n        );\n        emit DeployedDapiProxy(proxyAddress, dapiName, metadata);\n    }\n\n    /// @notice Deterministically deploys a data feed proxy with OEV support\n    /// @param dataFeedId Data feed ID\n    /// @param oevBeneficiary OEV beneficiary\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function deployDataFeedProxyWithOev(\n        bytes32 dataFeedId,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external override returns (address proxyAddress) {\n        require(dataFeedId != bytes32(0), \"Data feed ID zero\");\n        require(oevBeneficiary != address(0), \"OEV beneficiary zero\");\n        proxyAddress = address(\n            new DataFeedProxyWithOev{salt: keccak256(metadata)}(\n                api3ServerV1,\n                dataFeedId,\n                oevBeneficiary\n            )\n        );\n        emit DeployedDataFeedProxyWithOev(\n            proxyAddress,\n            dataFeedId,\n            oevBeneficiary,\n            metadata\n        );\n    }\n\n    /// @notice Deterministically deploys a dAPI proxy with OEV support\n    /// @param dapiName dAPI name\n    /// @param oevBeneficiary OEV beneficiary\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function deployDapiProxyWithOev(\n        bytes32 dapiName,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external override returns (address proxyAddress) {\n        require(dapiName != bytes32(0), \"dAPI name zero\");\n        require(oevBeneficiary != address(0), \"OEV beneficiary zero\");\n        proxyAddress = address(\n            new DapiProxyWithOev{salt: keccak256(metadata)}(\n                api3ServerV1,\n                keccak256(abi.encodePacked(dapiName)),\n                oevBeneficiary\n            )\n        );\n        emit DeployedDapiProxyWithOev(\n            proxyAddress,\n            dapiName,\n            oevBeneficiary,\n            metadata\n        );\n    }\n\n    /// @notice Computes the address of the data feed proxy\n    /// @param dataFeedId Data feed ID\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function computeDataFeedProxyAddress(\n        bytes32 dataFeedId,\n        bytes calldata metadata\n    ) external view override returns (address proxyAddress) {\n        require(dataFeedId != bytes32(0), \"Data feed ID zero\");\n        proxyAddress = Create2.computeAddress(\n            keccak256(metadata),\n            keccak256(\n                abi.encodePacked(\n                    type(DataFeedProxy).creationCode,\n                    abi.encode(api3ServerV1, dataFeedId)\n                )\n            )\n        );\n    }\n\n    /// @notice Computes the address of the dAPI proxy\n    /// @param dapiName dAPI name\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function computeDapiProxyAddress(\n        bytes32 dapiName,\n        bytes calldata metadata\n    ) external view override returns (address proxyAddress) {\n        require(dapiName != bytes32(0), \"dAPI name zero\");\n        proxyAddress = Create2.computeAddress(\n            keccak256(metadata),\n            keccak256(\n                abi.encodePacked(\n                    type(DapiProxy).creationCode,\n                    abi.encode(\n                        api3ServerV1,\n                        keccak256(abi.encodePacked(dapiName))\n                    )\n                )\n            )\n        );\n    }\n\n    /// @notice Computes the address of the data feed proxy with OEV support\n    /// @param dataFeedId Data feed ID\n    /// @param oevBeneficiary OEV beneficiary\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function computeDataFeedProxyWithOevAddress(\n        bytes32 dataFeedId,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external view override returns (address proxyAddress) {\n        require(dataFeedId != bytes32(0), \"Data feed ID zero\");\n        require(oevBeneficiary != address(0), \"OEV beneficiary zero\");\n        proxyAddress = Create2.computeAddress(\n            keccak256(metadata),\n            keccak256(\n                abi.encodePacked(\n                    type(DataFeedProxyWithOev).creationCode,\n                    abi.encode(api3ServerV1, dataFeedId, oevBeneficiary)\n                )\n            )\n        );\n    }\n\n    /// @notice Computes the address of the dAPI proxy with OEV support\n    /// @param dapiName dAPI name\n    /// @param oevBeneficiary OEV beneficiary\n    /// @param metadata Metadata associated with the proxy\n    /// @return proxyAddress Proxy address\n    function computeDapiProxyWithOevAddress(\n        bytes32 dapiName,\n        address oevBeneficiary,\n        bytes calldata metadata\n    ) external view override returns (address proxyAddress) {\n        require(dapiName != bytes32(0), \"dAPI name zero\");\n        require(oevBeneficiary != address(0), \"OEV beneficiary zero\");\n        proxyAddress = Create2.computeAddress(\n            keccak256(metadata),\n            keccak256(\n                abi.encodePacked(\n                    type(DapiProxyWithOev).creationCode,\n                    abi.encode(\n                        api3ServerV1,\n                        keccak256(abi.encodePacked(dapiName)),\n                        oevBeneficiary\n                    )\n                )\n            )\n        );\n    }\n}\n"
    },
    "contracts/authorizers/interfaces/IRequesterAuthorizer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRequesterAuthorizer {\n    event ExtendedAuthorizationExpiration(\n        address indexed airnode,\n        address indexed requester,\n        uint32 expirationTimestamp,\n        address sender\n    );\n\n    event SetAuthorizationExpiration(\n        address indexed airnode,\n        address indexed requester,\n        uint32 expirationTimestamp,\n        address sender\n    );\n\n    event SetIndefiniteAuthorizationStatus(\n        address indexed airnode,\n        address indexed requester,\n        bool status,\n        uint224 indefiniteAuthorizationCount,\n        address sender\n    );\n\n    event RevokedIndefiniteAuthorizationStatus(\n        address indexed airnode,\n        address indexed requester,\n        address setter,\n        uint224 indefiniteAuthorizationCount,\n        address sender\n    );\n\n    function extendAuthorizerExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external;\n\n    function setAuthorizationExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external;\n\n    function setIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        bool status\n    ) external;\n\n    function revokeIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        address setter\n    ) external;\n\n    function isAuthorized(\n        address airnode,\n        address requester\n    ) external view returns (bool);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    function airnodeToRequesterToAuthorizationStatus(\n        address airnode,\n        address requester\n    )\n        external\n        view\n        returns (\n            uint32 expirationTimestamp,\n            uint224 indefiniteAuthorizationCount\n        );\n\n    function airnodeToRequesterToSetterToIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        address setter\n    ) external view returns (bool indefiniteAuthorizationStatus);\n}\n"
    },
    "contracts/authorizers/interfaces/IRequesterAuthorizerWithAirnode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\";\nimport \"./IRequesterAuthorizer.sol\";\n\ninterface IRequesterAuthorizerWithAirnode is\n    IAccessControlRegistryAdminned,\n    IRequesterAuthorizer\n{\n    function deriveAdminRole(\n        address airnode\n    ) external view returns (bytes32 role);\n\n    function deriveAuthorizationExpirationExtenderRole(\n        address airnode\n    ) external view returns (bytes32 role);\n\n    function deriveAuthorizationExpirationSetterRole(\n        address airnode\n    ) external view returns (bytes32 role);\n\n    function deriveIndefiniteAuthorizerRole(\n        address airnode\n    ) external view returns (bytes32 role);\n}\n"
    },
    "contracts/authorizers/interfaces/IRequesterAuthorizerWithErc721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminned.sol\";\n\ninterface IRequesterAuthorizerWithErc721 is\n    IERC721Receiver,\n    IAccessControlRegistryAdminned\n{\n    enum DepositState {\n        Inactive,\n        Active,\n        WithdrawalInitiated\n    }\n\n    event SetWithdrawalLeadTime(\n        address indexed airnode,\n        uint32 withdrawalLeadTime,\n        address sender\n    );\n\n    event SetRequesterBlockStatus(\n        address indexed airnode,\n        address indexed requester,\n        uint256 chainId,\n        bool status,\n        address sender\n    );\n\n    event SetDepositorFreezeStatus(\n        address indexed airnode,\n        address indexed depositor,\n        bool status,\n        address sender\n    );\n\n    event DepositedToken(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint256 tokenDepositCount\n    );\n\n    event UpdatedDepositRequesterFrom(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint256 tokenDepositCount\n    );\n\n    event UpdatedDepositRequesterTo(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint256 tokenDepositCount\n    );\n\n    event InitiatedTokenWithdrawal(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint32 earliestWithdrawalTime,\n        uint256 tokenDepositCount\n    );\n\n    event WithdrewToken(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint256 tokenDepositCount\n    );\n\n    event RevokedToken(\n        address indexed airnode,\n        address indexed requester,\n        address indexed depositor,\n        uint256 chainId,\n        address token,\n        uint256 tokenId,\n        uint256 tokenDepositCount\n    );\n\n    function setWithdrawalLeadTime(\n        address airnode,\n        uint32 withdrawalLeadTime\n    ) external;\n\n    function setRequesterBlockStatus(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        bool status\n    ) external;\n\n    function setDepositorFreezeStatus(\n        address airnode,\n        address depositor,\n        bool status\n    ) external;\n\n    function updateDepositRequester(\n        address airnode,\n        uint256 chainIdPrevious,\n        address requesterPrevious,\n        uint256 chainIdNext,\n        address requesterNext,\n        address token\n    ) external;\n\n    function initiateTokenWithdrawal(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external returns (uint32 earliestWithdrawalTime);\n\n    function withdrawToken(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external;\n\n    function revokeToken(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token,\n        address depositor\n    ) external;\n\n    function airnodeToChainIdToRequesterToTokenToDepositorToDeposit(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token,\n        address depositor\n    )\n        external\n        view\n        returns (\n            uint256 tokenId,\n            uint32 withdrawalLeadTime,\n            uint32 earliestWithdrawalTime,\n            DepositState depositState\n        );\n\n    function isAuthorized(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external view returns (bool);\n\n    function deriveWithdrawalLeadTimeSetterRole(\n        address airnode\n    ) external view returns (bytes32 withdrawalLeadTimeSetterRole);\n\n    function deriveRequesterBlockerRole(\n        address airnode\n    ) external view returns (bytes32 requesterBlockerRole);\n\n    function deriveDepositorFreezerRole(\n        address airnode\n    ) external view returns (bytes32 depositorFreezerRole);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function REQUESTER_BLOCKER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DEPOSITOR_FREEZER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    function airnodeToChainIdToRequesterToTokenAddressToTokenDeposits(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external view returns (uint256 tokenDepositCount);\n\n    function airnodeToWithdrawalLeadTime(\n        address airnode\n    ) external view returns (uint32 withdrawalLeadTime);\n\n    function airnodeToChainIdToRequesterToBlockStatus(\n        address airnode,\n        uint256 chainId,\n        address requester\n    ) external view returns (bool isBlocked);\n\n    function airnodeToDepositorToFreezeStatus(\n        address airnode,\n        address depositor\n    ) external view returns (bool isFrozen);\n}\n"
    },
    "contracts/authorizers/interfaces/IRequesterAuthorizerWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\nimport \"./IRequesterAuthorizer.sol\";\n\ninterface IRequesterAuthorizerWithManager is\n    IAccessControlRegistryAdminnedWithManager,\n    IRequesterAuthorizer\n{\n    function authorizationExpirationExtenderRole()\n        external\n        view\n        returns (bytes32);\n\n    function authorizationExpirationSetterRole()\n        external\n        view\n        returns (bytes32);\n\n    function indefiniteAuthorizerRole() external view returns (bytes32);\n}\n"
    },
    "contracts/authorizers/mock/MockErc721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockErc721 is ERC721 {\n    constructor() ERC721(\"Token\", \"TKN\") {\n        for (uint256 tokenId = 0; tokenId < 10; tokenId++) {\n            _mint(msg.sender, tokenId);\n        }\n    }\n}\n"
    },
    "contracts/authorizers/RequesterAuthorizer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IRequesterAuthorizer.sol\";\n\n/// @title Abstract contract that temporarily or indefinitely authorizes\n/// requesters for Airnodes\n/// @dev Airnodes can be configured to use multiple Authorizers, and one of\n/// them returning `true` means the request should be responded to. The Airnode\n/// operator is expected to communicate the required information to the users\n/// through off-chain channels.\nabstract contract RequesterAuthorizer is IRequesterAuthorizer {\n    struct AuthorizationStatus {\n        uint32 expirationTimestamp;\n        uint224 indefiniteAuthorizationCount;\n    }\n\n    /// @notice Authorization expiration extender role description\n    string\n        public constant\n        override AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION =\n        \"Authorization expiration extender\";\n\n    /// @notice Authorization expiration setter role description\n    string\n        public constant\n        override AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION =\n        \"Authorization expiration setter\";\n\n    /// @notice Indefinite authorizer role description\n    string public constant override INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION =\n        \"Indefinite authorizer\";\n\n    mapping(address => mapping(address => AuthorizationStatus))\n        public\n        override airnodeToRequesterToAuthorizationStatus;\n\n    mapping(address => mapping(address => mapping(address => bool)))\n        public\n        override airnodeToRequesterToSetterToIndefiniteAuthorizationStatus;\n\n    /// @notice Extends the expiration of the temporary authorization of\n    /// the requester` for the Airnode\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function _extendAuthorizationExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) internal {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(requester != address(0), \"Requester address zero\");\n        require(\n            expirationTimestamp >\n                airnodeToRequesterToAuthorizationStatus[airnode][requester]\n                    .expirationTimestamp,\n            \"Does not extend expiration\"\n        );\n        airnodeToRequesterToAuthorizationStatus[airnode][requester]\n            .expirationTimestamp = expirationTimestamp;\n        emit ExtendedAuthorizationExpiration(\n            airnode,\n            requester,\n            expirationTimestamp,\n            _msgSender()\n        );\n    }\n\n    /// @notice Sets the expiration of the temporary authorization of\n    /// the requester for  the Airnode\n    /// @dev Unlike `_extendAuthorizerExpiration()`, this can hasten expiration\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function _setAuthorizationExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) internal {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(requester != address(0), \"Requester address zero\");\n        airnodeToRequesterToAuthorizationStatus[airnode][requester]\n            .expirationTimestamp = expirationTimestamp;\n        emit SetAuthorizationExpiration(\n            airnode,\n            requester,\n            expirationTimestamp,\n            _msgSender()\n        );\n    }\n\n    /// @notice Sets the indefinite authorization status of the requester for\n    /// the Airnode\n    /// @dev Emits the event even if it does not change the state\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param status Indefinite authorization status\n    function _setIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        bool status\n    ) internal {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(requester != address(0), \"Requester address zero\");\n        uint224 indefiniteAuthorizationCount = airnodeToRequesterToAuthorizationStatus[\n                airnode\n            ][requester].indefiniteAuthorizationCount;\n        if (\n            status &&\n            !airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][_msgSender()]\n        ) {\n            airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][_msgSender()] = true;\n            unchecked {\n                indefiniteAuthorizationCount++;\n            }\n            airnodeToRequesterToAuthorizationStatus[airnode][requester]\n                .indefiniteAuthorizationCount = indefiniteAuthorizationCount;\n        } else if (\n            !status &&\n            airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][_msgSender()]\n        ) {\n            airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][_msgSender()] = false;\n            unchecked {\n                indefiniteAuthorizationCount--;\n            }\n            airnodeToRequesterToAuthorizationStatus[airnode][requester]\n                .indefiniteAuthorizationCount = indefiniteAuthorizationCount;\n        }\n        emit SetIndefiniteAuthorizationStatus(\n            airnode,\n            requester,\n            status,\n            indefiniteAuthorizationCount,\n            _msgSender()\n        );\n    }\n\n    /// @notice Revokes the indefinite authorization status granted to the\n    /// requester for the Airnode by a specific account\n    /// @dev Only emits the event if it changes the state\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param setter Setter of the indefinite authorization status\n    function _revokeIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        address setter\n    ) internal {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(requester != address(0), \"Requester address zero\");\n        require(setter != address(0), \"Setter address zero\");\n        uint224 indefiniteAuthorizationCount = airnodeToRequesterToAuthorizationStatus[\n                airnode\n            ][requester].indefiniteAuthorizationCount;\n        if (\n            airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][setter]\n        ) {\n            airnodeToRequesterToSetterToIndefiniteAuthorizationStatus[airnode][\n                requester\n            ][setter] = false;\n            unchecked {\n                indefiniteAuthorizationCount--;\n            }\n            airnodeToRequesterToAuthorizationStatus[airnode][requester]\n                .indefiniteAuthorizationCount = indefiniteAuthorizationCount;\n            emit RevokedIndefiniteAuthorizationStatus(\n                airnode,\n                requester,\n                setter,\n                indefiniteAuthorizationCount,\n                _msgSender()\n            );\n        }\n    }\n\n    /// @notice Verifies the authorization status of the requester for the\n    /// Airnode\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @return Authorization status of the request\n    function isAuthorized(\n        address airnode,\n        address requester\n    ) public view override returns (bool) {\n        AuthorizationStatus\n            storage authorizationStatus = airnodeToRequesterToAuthorizationStatus[\n                airnode\n            ][requester];\n        return\n            authorizationStatus.indefiniteAuthorizationCount > 0 ||\n            authorizationStatus.expirationTimestamp > block.timestamp;\n    }\n\n    /// @dev See Context.sol\n    function _msgSender() internal view virtual returns (address sender);\n}\n"
    },
    "contracts/authorizers/RequesterAuthorizerWithAirnode.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../access-control-registry/AccessControlRegistryAdminned.sol\";\nimport \"./RequesterAuthorizer.sol\";\nimport \"./interfaces/IRequesterAuthorizerWithAirnode.sol\";\n\n/// @title Authorizer contract that Airnode operators can use to temporarily or\n/// indefinitely authorize requesters for the respective Airnodes\ncontract RequesterAuthorizerWithAirnode is\n    ERC2771Context,\n    AccessControlRegistryAdminned,\n    RequesterAuthorizer,\n    IRequesterAuthorizerWithAirnode\n{\n    bytes32\n        private constant AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH =\n        keccak256(\n            abi.encodePacked(AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION)\n        );\n\n    bytes32\n        private constant AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH =\n        keccak256(\n            abi.encodePacked(AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION)\n        );\n\n    bytes32 private constant INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION_HASH =\n        keccak256(abi.encodePacked(INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION));\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription\n    )\n        ERC2771Context(_accessControlRegistry)\n        AccessControlRegistryAdminned(\n            _accessControlRegistry,\n            _adminRoleDescription\n        )\n    {}\n\n    /// @notice Extends the expiration of the temporary authorization of\n    /// `requester` for `airnode` if the sender is allowed to extend\n    /// authorization expiration\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function extendAuthorizerExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasAuthorizationExpirationExtenderRoleOrIsAirnode(\n                airnode,\n                _msgSender()\n            ),\n            \"Cannot extend expiration\"\n        );\n        _extendAuthorizationExpiration(airnode, requester, expirationTimestamp);\n    }\n\n    /// @notice Sets the expiration of the temporary authorization of\n    /// `requester` for `airnode` if the sender is allowed to set expiration\n    /// @dev Unlike `extendAuthorizerExpiration()`, this can hasten expiration\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function setAuthorizationExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasAuthorizationExpirationSetterRoleOrIsAirnode(\n                airnode,\n                _msgSender()\n            ),\n            \"Cannot set expiration\"\n        );\n        _setAuthorizationExpiration(airnode, requester, expirationTimestamp);\n    }\n\n    /// @notice Sets the indefinite authorization status of `requester` for\n    /// `airnode` if the sender is allowed to authorize indefinitely\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param status Indefinite authorization status\n    function setIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        bool status\n    ) external override {\n        require(\n            hasIndefiniteAuthorizerRoleOrIsAirnode(airnode, _msgSender()),\n            \"Cannot set indefinite status\"\n        );\n        _setIndefiniteAuthorizationStatus(airnode, requester, status);\n    }\n\n    /// @notice Revokes the indefinite authorization status granted by a\n    /// specific account that no longer has the indefinite authorizer role\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param setter Setter of the indefinite authorization status\n    function revokeIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        address setter\n    ) external override {\n        require(\n            !hasIndefiniteAuthorizerRoleOrIsAirnode(airnode, setter),\n            \"setter can set indefinite status\"\n        );\n        _revokeIndefiniteAuthorizationStatus(airnode, requester, setter);\n    }\n\n    /// @notice Derives the admin role for the Airnode\n    /// @param airnode Airnode address\n    /// @return adminRole Admin role\n    function deriveAdminRole(\n        address airnode\n    ) external view override returns (bytes32 adminRole) {\n        adminRole = _deriveAdminRole(airnode);\n    }\n\n    /// @notice Derives the authorization expiration extender role for the\n    /// Airnode\n    /// @param airnode Airnode address\n    /// @return authorizationExpirationExtenderRole Authorization expiration\n    /// extender role\n    function deriveAuthorizationExpirationExtenderRole(\n        address airnode\n    )\n        public\n        view\n        override\n        returns (bytes32 authorizationExpirationExtenderRole)\n    {\n        authorizationExpirationExtenderRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    /// @notice Derives the authorization expiration setter role for the\n    /// Airnode\n    /// @param airnode Airnode address\n    /// @return authorizationExpirationSetterRole Authorization expiration\n    /// setter role\n    function deriveAuthorizationExpirationSetterRole(\n        address airnode\n    ) public view override returns (bytes32 authorizationExpirationSetterRole) {\n        authorizationExpirationSetterRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    /// @notice Derives the indefinite authorizer role for the Airnode\n    /// @param airnode Airnode address\n    /// @return indefiniteAuthorizerRole Indefinite authorizer role\n    function deriveIndefiniteAuthorizerRole(\n        address airnode\n    ) public view override returns (bytes32 indefiniteAuthorizerRole) {\n        indefiniteAuthorizerRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    /// @dev Returns if the account has the authorization expiration extender\n    /// role or is the Airnode address\n    /// @param airnode Airnode address\n    /// @param account Account address\n    /// @return If the account has the authorization extender role or is the\n    /// Airnode address\n    function hasAuthorizationExpirationExtenderRoleOrIsAirnode(\n        address airnode,\n        address account\n    ) private view returns (bool) {\n        return\n            airnode == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                deriveAuthorizationExpirationExtenderRole(airnode),\n                account\n            );\n    }\n\n    /// @dev Returns if the account has the authorization expriation setter\n    /// role or is the Airnode address\n    /// @param airnode Airnode address\n    /// @param account Account address\n    /// @return If the account has the authorization expiration setter role or\n    /// is the Airnode address\n    function hasAuthorizationExpirationSetterRoleOrIsAirnode(\n        address airnode,\n        address account\n    ) private view returns (bool) {\n        return\n            airnode == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                deriveAuthorizationExpirationSetterRole(airnode),\n                account\n            );\n    }\n\n    /// @dev Returns if the account has the indefinite authorizer role or is\n    /// the Airnode address\n    /// @param airnode Airnode address\n    /// @param account Account address\n    /// @return If the account has the indefinite authorizer role or is the\n    /// Airnode addrss\n    function hasIndefiniteAuthorizerRoleOrIsAirnode(\n        address airnode,\n        address account\n    ) private view returns (bool) {\n        return\n            airnode == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                deriveIndefiniteAuthorizerRole(airnode),\n                account\n            );\n    }\n\n    /// @dev See Context.sol\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(RequesterAuthorizer, ERC2771Context)\n        returns (address)\n    {\n        return ERC2771Context._msgSender();\n    }\n}\n"
    },
    "contracts/authorizers/RequesterAuthorizerWithErc721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../access-control-registry/AccessControlRegistryAdminned.sol\";\nimport \"./interfaces/IRequesterAuthorizerWithErc721.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/// @title Authorizer contract that users can deposit the ERC721 tokens\n/// recognized by the Airnode to receive authorization for the requester\n/// contract on the chain\n/// @notice For an Airnode to treat an ERC721 token deposit as a valid reason\n/// for the respective requester contract to be authorized, it needs to be\n/// configured at deploy-time to (1) use this contract as an authorizer,\n/// (2) recognize the respectice ERC721 token contract.\n/// It can be expected for Airnodes to be configured to only recognize the\n/// respective NFT keys that their operators have issued, but this is not\n/// necessarily true, i.e., an Airnode can be configured to recognize an\n/// arbitrary ERC721 token.\n/// This contract allows Airnodes to block specific requester contracts. It can\n/// be expected for Airnodes to only do this when the requester is breaking\n/// T&C. The tokens that have been deposited to authorize requesters that have\n/// been blocked can be revoked, which transfers them to the Airnode account.\n/// This can be seen as a staking/slashing mechanism. Accordingly, users should\n/// not deposit ERC721 tokens to receive authorization from Airnodes that they\n/// suspect may abuse this mechanic.\n/// @dev Airnode operators are strongly recommended to only use a single\n/// instance of this contract as an authorizer. If multiple instances are used,\n/// the state between the instances should be kept consistent. For example, if\n/// a requester on a chain is to be blocked, all instances of this contract\n/// that are used as authorizers for the chain should be updated. Otherwise,\n/// the requester to be blocked can still be authorized via the instances that\n/// have not been updated.\ncontract RequesterAuthorizerWithErc721 is\n    ERC2771Context,\n    AccessControlRegistryAdminned,\n    IRequesterAuthorizerWithErc721\n{\n    struct TokenDeposits {\n        uint256 count;\n        mapping(address => Deposit) depositorToDeposit;\n    }\n\n    struct Deposit {\n        uint256 tokenId;\n        uint32 withdrawalLeadTime;\n        uint32 earliestWithdrawalTime;\n        DepositState state;\n    }\n\n    /// @notice Withdrawal lead time setter role description\n    string\n        public constant\n        override WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION =\n        \"Withdrawal lead time setter\";\n    /// @notice Requester blocker role description\n    string public constant override REQUESTER_BLOCKER_ROLE_DESCRIPTION =\n        \"Requester blocker\";\n    /// @notice Depositor freezer role description\n    string public constant override DEPOSITOR_FREEZER_ROLE_DESCRIPTION =\n        \"Depositor freezer\";\n\n    bytes32 private constant WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION_HASH =\n        keccak256(\n            abi.encodePacked(WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION)\n        );\n    bytes32 private constant REQUESTER_BLOCKER_ROLE_DESCRIPTION_HASH =\n        keccak256(abi.encodePacked(REQUESTER_BLOCKER_ROLE_DESCRIPTION));\n    bytes32 private constant DEPOSITOR_FREEZER_ROLE_DESCRIPTION_HASH =\n        keccak256(abi.encodePacked(DEPOSITOR_FREEZER_ROLE_DESCRIPTION));\n\n    /// @notice Deposits of the token with the address made for the Airnode to\n    /// authorize the requester address on the chain\n    mapping(address => mapping(uint256 => mapping(address => mapping(address => TokenDeposits))))\n        public\n        override airnodeToChainIdToRequesterToTokenAddressToTokenDeposits;\n\n    /// @notice Withdrawal lead time of the Airnode. This creates the window of\n    /// opportunity during which a requester can be blocked for breaking T&C\n    /// and the respective token can be revoked.\n    /// The withdrawal lead time at deposit-time will apply to a specific\n    /// deposit.\n    mapping(address => uint32) public override airnodeToWithdrawalLeadTime;\n\n    /// @notice If the Airnode has blocked the requester on the chain. In the\n    /// context of the respective Airnode, no one can deposit for a blocked\n    /// requester, make deposit updates that relate to a blocked requester, or\n    /// withdraw a token deposited for a blocked requester. Anyone can revoke\n    /// tokens that are already deposited for a blocked requester. Existing\n    /// deposits for a blocked requester do not provide authorization.\n    mapping(address => mapping(uint256 => mapping(address => bool)))\n        public\n        override airnodeToChainIdToRequesterToBlockStatus;\n\n    /// @notice If the Airnode has frozen the depositor. In the context of the\n    /// respective Airnode, a frozen depositor cannot deposit, make deposit\n    /// updates or withdraw.\n    mapping(address => mapping(address => bool))\n        public\n        override airnodeToDepositorToFreezeStatus;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription\n    )\n        ERC2771Context(_accessControlRegistry)\n        AccessControlRegistryAdminned(\n            _accessControlRegistry,\n            _adminRoleDescription\n        )\n    {}\n\n    /// @notice Called by the Airnode or its withdrawal lead time setters to\n    /// set withdrawal lead time\n    /// @param airnode Airnode address\n    /// @param withdrawalLeadTime Withdrawal lead time\n    function setWithdrawalLeadTime(\n        address airnode,\n        uint32 withdrawalLeadTime\n    ) external override {\n        require(\n            airnode == _msgSender() ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    deriveWithdrawalLeadTimeSetterRole(airnode),\n                    _msgSender()\n                ),\n            \"Sender cannot set lead time\"\n        );\n        require(withdrawalLeadTime <= 30 days, \"Lead time too long\");\n        airnodeToWithdrawalLeadTime[airnode] = withdrawalLeadTime;\n        emit SetWithdrawalLeadTime(airnode, withdrawalLeadTime, _msgSender());\n    }\n\n    /// @notice Called by the Airnode or its requester blockers to set\n    /// the block status of the requester\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param status Block status\n    function setRequesterBlockStatus(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        bool status\n    ) external override {\n        require(\n            airnode == _msgSender() ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    deriveRequesterBlockerRole(airnode),\n                    _msgSender()\n                ),\n            \"Sender cannot block requester\"\n        );\n        require(chainId != 0, \"Chain ID zero\");\n        require(requester != address(0), \"Requester address zero\");\n        airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\n            requester\n        ] = status;\n        emit SetRequesterBlockStatus(\n            airnode,\n            requester,\n            chainId,\n            status,\n            _msgSender()\n        );\n    }\n\n    /// @notice Called by the Airnode or its depositor freezers to set the\n    /// freeze status of the depositor\n    /// @param airnode Airnode address\n    /// @param depositor Depositor address\n    /// @param status Freeze status\n    function setDepositorFreezeStatus(\n        address airnode,\n        address depositor,\n        bool status\n    ) external override {\n        require(\n            airnode == _msgSender() ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    deriveDepositorFreezerRole(airnode),\n                    _msgSender()\n                ),\n            \"Sender cannot freeze depositor\"\n        );\n        require(depositor != address(0), \"Depositor address zero\");\n        airnodeToDepositorToFreezeStatus[airnode][depositor] = status;\n        emit SetDepositorFreezeStatus(airnode, depositor, status, _msgSender());\n    }\n\n    /// @notice Called by the ERC721 contract upon `safeTransferFrom()` to this\n    /// contract to deposit a token to authorize the requester\n    /// @dev The first argument is the operator, which we do not need\n    /// @param _from Account from which the token is transferred\n    /// @param _tokenId Token ID\n    /// @param _data Airnode address, chain ID and requester address in\n    /// ABI-encoded form\n    /// @return `onERC721Received()` function selector\n    function onERC721Received(\n        address,\n        address _from,\n        uint256 _tokenId,\n        bytes calldata _data\n    ) external override returns (bytes4) {\n        require(_data.length == 96, \"Unexpected data length\");\n        (address airnode, uint256 chainId, address requester) = abi.decode(\n            _data,\n            (address, uint256, address)\n        );\n        require(airnode != address(0), \"Airnode address zero\");\n        require(chainId != 0, \"Chain ID zero\");\n        require(requester != address(0), \"Requester address zero\");\n        require(\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\n                requester\n            ],\n            \"Requester blocked\"\n        );\n        require(\n            !airnodeToDepositorToFreezeStatus[airnode][_from],\n            \"Depositor frozen\"\n        );\n        TokenDeposits\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainId][requester][_msgSender()];\n        uint256 tokenDepositCount;\n        unchecked {\n            tokenDepositCount = ++tokenDeposits.count;\n        }\n        require(\n            tokenDeposits.depositorToDeposit[_from].state ==\n                DepositState.Inactive,\n            \"Token already deposited\"\n        );\n        tokenDeposits.depositorToDeposit[_from] = Deposit({\n            tokenId: _tokenId,\n            withdrawalLeadTime: airnodeToWithdrawalLeadTime[airnode],\n            earliestWithdrawalTime: 0,\n            state: DepositState.Active\n        });\n        emit DepositedToken(\n            airnode,\n            requester,\n            _from,\n            chainId,\n            _msgSender(),\n            _tokenId,\n            tokenDepositCount\n        );\n        return this.onERC721Received.selector;\n    }\n\n    /// @notice Called by a token depositor to update the requester for which\n    /// they have deposited the token for\n    /// @dev This is especially useful for not having to wait when the Airnode\n    /// has set a non-zero withdrawal lead time\n    /// @param airnode Airnode address\n    /// @param chainIdPrevious Previous chain ID\n    /// @param requesterPrevious Previous requester address\n    /// @param chainIdNext Next chain ID\n    /// @param requesterNext Next requester address\n    /// @param token Token address\n    function updateDepositRequester(\n        address airnode,\n        uint256 chainIdPrevious,\n        address requesterPrevious,\n        uint256 chainIdNext,\n        address requesterNext,\n        address token\n    ) external override {\n        require(chainIdNext != 0, \"Chain ID zero\");\n        require(requesterNext != address(0), \"Requester address zero\");\n        require(\n            !(chainIdPrevious == chainIdNext &&\n                requesterPrevious == requesterNext),\n            \"Does not update requester\"\n        );\n        require(\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainIdPrevious][\n                requesterPrevious\n            ],\n            \"Previous requester blocked\"\n        );\n        require(\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainIdNext][\n                requesterNext\n            ],\n            \"Next requester blocked\"\n        );\n        require(\n            !airnodeToDepositorToFreezeStatus[airnode][_msgSender()],\n            \"Depositor frozen\"\n        );\n        TokenDeposits\n            storage requesterPreviousTokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainIdPrevious][requesterPrevious][token];\n        Deposit\n            storage requesterPreviousDeposit = requesterPreviousTokenDeposits\n                .depositorToDeposit[_msgSender()];\n        if (requesterPreviousDeposit.state != DepositState.Active) {\n            if (requesterPreviousDeposit.state == DepositState.Inactive) {\n                revert(\"Token not deposited\");\n            } else {\n                revert(\"Withdrawal initiated\");\n            }\n        }\n        TokenDeposits\n            storage requesterNextTokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainIdNext][requesterNext][token];\n        require(\n            requesterNextTokenDeposits.depositorToDeposit[_msgSender()].state ==\n                DepositState.Inactive,\n            \"Token already deposited\"\n        );\n        uint256 requesterNextTokenDepositCount = ++requesterNextTokenDeposits\n            .count;\n        requesterNextTokenDeposits.count = requesterNextTokenDepositCount;\n        uint256 requesterPreviousTokenDepositCount = --requesterPreviousTokenDeposits\n                .count;\n        requesterPreviousTokenDeposits\n            .count = requesterPreviousTokenDepositCount;\n        uint256 tokenId = requesterPreviousDeposit.tokenId;\n        requesterNextTokenDeposits.depositorToDeposit[_msgSender()] = Deposit({\n            tokenId: tokenId,\n            withdrawalLeadTime: requesterPreviousDeposit.withdrawalLeadTime,\n            earliestWithdrawalTime: 0,\n            state: DepositState.Active\n        });\n        requesterPreviousTokenDeposits.depositorToDeposit[\n            _msgSender()\n        ] = Deposit({\n            tokenId: 0,\n            withdrawalLeadTime: 0,\n            earliestWithdrawalTime: 0,\n            state: DepositState.Inactive\n        });\n        emit UpdatedDepositRequesterTo(\n            airnode,\n            requesterNext,\n            _msgSender(),\n            chainIdNext,\n            token,\n            tokenId,\n            requesterNextTokenDepositCount\n        );\n        emit UpdatedDepositRequesterFrom(\n            airnode,\n            requesterPrevious,\n            _msgSender(),\n            chainIdPrevious,\n            token,\n            tokenId,\n            requesterPreviousTokenDepositCount\n        );\n    }\n\n    /// @notice Called by a token depositor to initiate withdrawal\n    /// @dev The depositor is allowed to initiate a withdrawal even if the\n    /// respective requester is blocked. However, the withdrawal will not be\n    /// executable as long as the requester is blocked.\n    /// Token withdrawals can be initiated even if withdrawal lead time is\n    /// zero.\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param token Token address\n    /// @return earliestWithdrawalTime Earliest withdrawal time\n    function initiateTokenWithdrawal(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external override returns (uint32 earliestWithdrawalTime) {\n        TokenDeposits\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainId][requester][token];\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[\n            _msgSender()\n        ];\n        if (deposit.state != DepositState.Active) {\n            if (deposit.state == DepositState.Inactive) {\n                revert(\"Token not deposited\");\n            } else {\n                revert(\"Withdrawal already initiated\");\n            }\n        }\n        uint256 tokenDepositCount;\n        unchecked {\n            tokenDepositCount = --tokenDeposits.count;\n        }\n        earliestWithdrawalTime = SafeCast.toUint32(\n            block.timestamp + deposit.withdrawalLeadTime\n        );\n        deposit.earliestWithdrawalTime = earliestWithdrawalTime;\n        deposit.state = DepositState.WithdrawalInitiated;\n        emit InitiatedTokenWithdrawal(\n            airnode,\n            requester,\n            _msgSender(),\n            chainId,\n            token,\n            deposit.tokenId,\n            earliestWithdrawalTime,\n            tokenDepositCount\n        );\n    }\n\n    /// @notice Called by a token depositor to withdraw\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param token Token address\n    function withdrawToken(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external override {\n        require(\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\n                requester\n            ],\n            \"Requester blocked\"\n        );\n        require(\n            !airnodeToDepositorToFreezeStatus[airnode][_msgSender()],\n            \"Depositor frozen\"\n        );\n        TokenDeposits\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainId][requester][token];\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[\n            _msgSender()\n        ];\n        require(deposit.state != DepositState.Inactive, \"Token not deposited\");\n        uint256 tokenDepositCount;\n        if (deposit.state == DepositState.Active) {\n            require(\n                deposit.withdrawalLeadTime == 0,\n                \"Withdrawal not initiated\"\n            );\n            unchecked {\n                tokenDepositCount = --tokenDeposits.count;\n            }\n        } else {\n            require(\n                block.timestamp >= deposit.earliestWithdrawalTime,\n                \"Cannot withdraw yet\"\n            );\n            unchecked {\n                tokenDepositCount = tokenDeposits.count;\n            }\n        }\n        uint256 tokenId = deposit.tokenId;\n        tokenDeposits.depositorToDeposit[_msgSender()] = Deposit({\n            tokenId: 0,\n            withdrawalLeadTime: 0,\n            earliestWithdrawalTime: 0,\n            state: DepositState.Inactive\n        });\n        emit WithdrewToken(\n            airnode,\n            requester,\n            _msgSender(),\n            chainId,\n            token,\n            tokenId,\n            tokenDepositCount\n        );\n        IERC721(token).safeTransferFrom(address(this), _msgSender(), tokenId);\n    }\n\n    /// @notice Called to revoke the token deposited to authorize a requester\n    /// that is blocked now\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param token Token address\n    /// @param depositor Depositor address\n    function revokeToken(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token,\n        address depositor\n    ) external override {\n        require(\n            airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\n                requester\n            ],\n            \"Airnode did not block requester\"\n        );\n        TokenDeposits\n            storage tokenDeposits = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainId][requester][token];\n        Deposit storage deposit = tokenDeposits.depositorToDeposit[depositor];\n        require(deposit.state != DepositState.Inactive, \"Token not deposited\");\n        uint256 tokenDepositCount;\n        if (deposit.state == DepositState.Active) {\n            unchecked {\n                tokenDepositCount = --tokenDeposits.count;\n            }\n        } else {\n            unchecked {\n                tokenDepositCount = tokenDeposits.count;\n            }\n        }\n        uint256 tokenId = deposit.tokenId;\n        tokenDeposits.depositorToDeposit[depositor] = Deposit({\n            tokenId: 0,\n            withdrawalLeadTime: 0,\n            earliestWithdrawalTime: 0,\n            state: DepositState.Inactive\n        });\n        emit RevokedToken(\n            airnode,\n            requester,\n            depositor,\n            chainId,\n            token,\n            tokenId,\n            tokenDepositCount\n        );\n        IERC721(token).safeTransferFrom(address(this), airnode, tokenId);\n    }\n\n    /// @notice Returns the deposit of the token with the address made by the\n    /// depositor for the Airnode to authorize the requester address on the\n    /// chain\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param token Token address\n    /// @param depositor Depositor address\n    /// @return tokenId Token ID\n    /// @return withdrawalLeadTime Withdrawal lead time captured at\n    /// deposit-time\n    /// @return earliestWithdrawalTime Earliest withdrawal time\n    function airnodeToChainIdToRequesterToTokenToDepositorToDeposit(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token,\n        address depositor\n    )\n        external\n        view\n        override\n        returns (\n            uint256 tokenId,\n            uint32 withdrawalLeadTime,\n            uint32 earliestWithdrawalTime,\n            DepositState state\n        )\n    {\n        Deposit\n            storage deposit = airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[\n                airnode\n            ][chainId][requester][token].depositorToDeposit[depositor];\n        (tokenId, withdrawalLeadTime, earliestWithdrawalTime, state) = (\n            deposit.tokenId,\n            deposit.withdrawalLeadTime,\n            deposit.earliestWithdrawalTime,\n            deposit.state\n        );\n    }\n\n    /// @notice Returns if the requester on the chain is authorized for the\n    /// Airnode due to a token with the address being deposited\n    /// @param airnode Airnode address\n    /// @param chainId Chain ID\n    /// @param requester Requester address\n    /// @param token Token address\n    /// @return Authorization status\n    function isAuthorized(\n        address airnode,\n        uint256 chainId,\n        address requester,\n        address token\n    ) external view override returns (bool) {\n        return\n            !airnodeToChainIdToRequesterToBlockStatus[airnode][chainId][\n                requester\n            ] &&\n            airnodeToChainIdToRequesterToTokenAddressToTokenDeposits[airnode][\n                chainId\n            ][requester][token].count >\n            0;\n    }\n\n    /// @notice Derives the withdrawal lead time setter role for the Airnode\n    /// @param airnode Airnode address\n    /// @return withdrawalLeadTimeSetterRole Withdrawal lead time setter role\n    function deriveWithdrawalLeadTimeSetterRole(\n        address airnode\n    ) public view override returns (bytes32 withdrawalLeadTimeSetterRole) {\n        withdrawalLeadTimeSetterRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            WITHDRAWAL_LEAD_TIME_SETTER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    /// @notice Derives the requester blocker role for the Airnode\n    /// @param airnode Airnode address\n    /// @return requesterBlockerRole Requester blocker role\n    function deriveRequesterBlockerRole(\n        address airnode\n    ) public view override returns (bytes32 requesterBlockerRole) {\n        requesterBlockerRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            REQUESTER_BLOCKER_ROLE_DESCRIPTION_HASH\n        );\n    }\n\n    /// @notice Derives the depositor freezer role for the Airnode\n    /// @param airnode Airnode address\n    /// @return depositorFreezerRole Depositor freezer role\n    function deriveDepositorFreezerRole(\n        address airnode\n    ) public view override returns (bytes32 depositorFreezerRole) {\n        depositorFreezerRole = _deriveRole(\n            _deriveAdminRole(airnode),\n            DEPOSITOR_FREEZER_ROLE_DESCRIPTION_HASH\n        );\n    }\n}\n"
    },
    "contracts/authorizers/RequesterAuthorizerWithManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\";\nimport \"./RequesterAuthorizer.sol\";\nimport \"./interfaces/IRequesterAuthorizerWithManager.sol\";\n\n/// @title Authorizer contract that the manager can use to temporarily or\n/// indefinitely authorize requesters for Airnodes\ncontract RequesterAuthorizerWithManager is\n    ERC2771Context,\n    AccessControlRegistryAdminnedWithManager,\n    RequesterAuthorizer,\n    IRequesterAuthorizerWithManager\n{\n    /// @notice Authorization expiration extender role\n    bytes32 public immutable override authorizationExpirationExtenderRole;\n\n    /// @notice Authorization expiration setter role\n    bytes32 public immutable override authorizationExpirationSetterRole;\n\n    /// @notice Indefinite authorizer role\n    bytes32 public immutable override indefiniteAuthorizerRole;\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager\n    )\n        ERC2771Context(_accessControlRegistry)\n        AccessControlRegistryAdminnedWithManager(\n            _accessControlRegistry,\n            _adminRoleDescription,\n            _manager\n        )\n    {\n        authorizationExpirationExtenderRole = _deriveRole(\n            adminRole,\n            keccak256(\n                abi.encodePacked(\n                    AUTHORIZATION_EXPIRATION_EXTENDER_ROLE_DESCRIPTION\n                )\n            )\n        );\n        authorizationExpirationSetterRole = _deriveRole(\n            adminRole,\n            keccak256(\n                abi.encodePacked(\n                    AUTHORIZATION_EXPIRATION_SETTER_ROLE_DESCRIPTION\n                )\n            )\n        );\n        indefiniteAuthorizerRole = _deriveRole(\n            adminRole,\n            keccak256(abi.encodePacked(INDEFINITE_AUTHORIZER_ROLE_DESCRIPTION))\n        );\n    }\n\n    /// @notice Extends the expiration of the temporary authoriztion of the\n    /// requester for  the Airnode if the sender is allowed to extend\n    /// authorization expiration\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function extendAuthorizerExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasAuthorizationExpirationExtenderRoleOrIsManager(_msgSender()),\n            \"Cannot extend expiration\"\n        );\n        _extendAuthorizationExpiration(airnode, requester, expirationTimestamp);\n    }\n\n    /// @notice Sets the expiration of the temporary authorization of the\n    /// requester for the Airnode if the sender is allowed to set expiration\n    /// @dev Unlike `extendAuthorizerExpiration()`, this can hasten expiration\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param expirationTimestamp Timestamp at which the temporary\n    /// authorization will expire\n    function setAuthorizationExpiration(\n        address airnode,\n        address requester,\n        uint32 expirationTimestamp\n    ) external override {\n        require(\n            hasAuthorizationExpirationSetterRoleOrIsManager(_msgSender()),\n            \"Cannot set expiration\"\n        );\n        _setAuthorizationExpiration(airnode, requester, expirationTimestamp);\n    }\n\n    /// @notice Sets the indefinite authorizer status of the requester for the\n    /// Airnode if the sender is allowed to authorize indefinitely\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param status Indefinite authorizer status\n    function setIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        bool status\n    ) external override {\n        require(\n            hasIndefiniteAuthorizerRoleOrIsManager(_msgSender()),\n            \"Cannot set indefinite status\"\n        );\n        _setIndefiniteAuthorizationStatus(airnode, requester, status);\n    }\n\n    /// @notice Revokes the indefinite authorization status granted by a\n    /// specific account that no longer has the indefinite authorizer role\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param setter Setter of the indefinite authorization status\n    function revokeIndefiniteAuthorizationStatus(\n        address airnode,\n        address requester,\n        address setter\n    ) external override {\n        require(\n            !hasIndefiniteAuthorizerRoleOrIsManager(setter),\n            \"setter can set indefinite status\"\n        );\n        _revokeIndefiniteAuthorizationStatus(airnode, requester, setter);\n    }\n\n    /// @dev Returns if the account has the authorization expiration extender\n    /// role or is the manager\n    /// @param account Account address\n    /// @return If the account has the authorization extender role or is the\n    /// manager\n    function hasAuthorizationExpirationExtenderRoleOrIsManager(\n        address account\n    ) private view returns (bool) {\n        return\n            manager == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                authorizationExpirationExtenderRole,\n                account\n            );\n    }\n\n    /// @dev Returns if the account has the authorization expiration setter\n    /// role or is the manager\n    /// @param account Account address\n    /// @return If the account has the authorization expiration setter role or\n    /// is the manager\n    function hasAuthorizationExpirationSetterRoleOrIsManager(\n        address account\n    ) private view returns (bool) {\n        return\n            manager == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                authorizationExpirationSetterRole,\n                account\n            );\n    }\n\n    /// @dev Returns if the account has the indefinite authorizer role or is\n    /// the manager\n    /// @param account Account address\n    /// @return If the account has the indefinite authorizer role or is the\n    /// manager\n    function hasIndefiniteAuthorizerRoleOrIsManager(\n        address account\n    ) private view returns (bool) {\n        return\n            manager == account ||\n            IAccessControlRegistry(accessControlRegistry).hasRole(\n                indefiniteAuthorizerRole,\n                account\n            );\n    }\n\n    /// @dev See Context.sol\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(RequesterAuthorizer, ERC2771Context)\n        returns (address)\n    {\n        return ERC2771Context._msgSender();\n    }\n}\n"
    },
    "contracts/protocol/AirnodeProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"../utils/ExtendedSelfMulticall.sol\";\nimport \"./StorageUtils.sol\";\nimport \"./SponsorshipUtils.sol\";\nimport \"./WithdrawalUtils.sol\";\nimport \"./interfaces/IAirnodeProtocol.sol\";\n\n/// @title Airnode request–response protocol (RRP) and its relayed version\n/// @notice Similar to HTTP, RRP allows the requester to specify a one-off\n/// request that the Airnode is expected to respond to as soon as possible.\n/// The relayed version allows the requester to specify an Airnode that will\n/// sign the fulfillment data and a relayer that will report the signed\n/// fulfillment.\n/// @dev StorageUtils, SponsorshipUtils and WithdrawalUtils also implement some\n/// auxiliary functionality for PSP\ncontract AirnodeProtocol is\n    ExtendedSelfMulticall,\n    StorageUtils,\n    SponsorshipUtils,\n    WithdrawalUtils,\n    IAirnodeProtocol\n{\n    using ECDSA for bytes32;\n\n    /// @notice Number of requests the requester has made\n    mapping(address => uint256) public override requesterToRequestCount;\n\n    mapping(bytes32 => bytes32) private requestIdToFulfillmentParameters;\n\n    /// @notice Called by the requester to make a request\n    /// @dev It is the responsibility of the respective Airnode to resolve if\n    /// `endpointOrTemplateId` is an endpoint ID or a template ID\n    /// @param endpointOrTemplateId Endpoint or template ID\n    /// @param parameters Parameters\n    /// @param sponsor Sponsor address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @return requestId Request ID\n    function makeRequest(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external override returns (bytes32 requestId) {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(\n            endpointOrTemplateId != bytes32(0),\n            \"Endpoint or template ID zero\"\n        );\n        require(\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\n            \"Parameters too long\"\n        );\n        require(sponsor != address(0), \"Sponsor address zero\");\n        require(fulfillFunctionId != bytes4(0), \"Fulfill function ID zero\");\n        uint256 requesterRequestCount = ++requesterToRequestCount[msg.sender];\n        requestId = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                msg.sender,\n                requesterRequestCount,\n                airnode,\n                endpointOrTemplateId,\n                parameters,\n                sponsor,\n                fulfillFunctionId\n            )\n        );\n        requestIdToFulfillmentParameters[requestId] = keccak256(\n            abi.encodePacked(airnode, msg.sender, fulfillFunctionId)\n        );\n        emit MadeRequest(\n            airnode,\n            requestId,\n            msg.sender,\n            requesterRequestCount,\n            endpointOrTemplateId,\n            parameters,\n            sponsor,\n            fulfillFunctionId\n        );\n    }\n\n    /// @notice Called by the Airnode using the sponsor wallet to fulfill the\n    /// request\n    /// @dev Airnodes attest to controlling their respective sponsor wallets by\n    /// signing a message with the address of the sponsor wallet. A timestamp\n    /// is added to this signature for it to act as an expiring token if the\n    /// requester contract checks for freshness.\n    /// This will not revert depending on the external call. However, it will\n    /// return `false` if the external call reverts or if there is no function\n    /// with a matching signature at `fulfillAddress`. On the other hand, it\n    /// will return `true` if the external call returns successfully or if\n    /// there is no contract deployed at `fulfillAddress`.\n    /// If `callSuccess` is `false`, `callData` can be decoded to retrieve the\n    /// revert string.\n    /// @param requestId Request ID\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @param timestamp Timestamp used in the signature\n    /// @param data Fulfillment data, encoded in contract ABI\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\n    /// signed by the Airnode wallet\n    /// @return callSuccess If the fulfillment call succeeded\n    /// @return callData Data returned by the fulfillment call (if there is\n    /// any)\n    function fulfillRequest(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external override returns (bool callSuccess, bytes memory callData) {\n        require(\n            keccak256(\n                abi.encodePacked(airnode, requester, fulfillFunctionId)\n            ) == requestIdToFulfillmentParameters[requestId],\n            \"Invalid request fulfillment\"\n        );\n        require(\n            (\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\n                    .toEthSignedMessageHash()\n            ).recover(signature) == airnode,\n            \"Signature mismatch\"\n        );\n        delete requestIdToFulfillmentParameters[requestId];\n        // solhint-disable-next-line avoid-low-level-calls\n        (callSuccess, callData) = requester.call(\n            abi.encodeWithSelector(\n                fulfillFunctionId,\n                requestId,\n                timestamp,\n                data\n            )\n        );\n        if (callSuccess) {\n            emit FulfilledRequest(airnode, requestId, timestamp, data);\n        } else {\n            // We do not bubble up the revert string from `callData`\n            emit FailedRequest(\n                airnode,\n                requestId,\n                timestamp,\n                \"Fulfillment failed unexpectedly\"\n            );\n        }\n    }\n\n    /// @notice Called by the Airnode using the sponsor wallet if the request\n    /// cannot be fulfilled\n    /// @dev The Airnode should fall back to this if a request cannot be\n    /// fulfilled because of an error, including the static call to `fulfill()`\n    /// returning `false` for `callSuccess`\n    /// @param requestId Request ID\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @param timestamp Timestamp used in the signature\n    /// @param errorMessage A message that explains why the request has failed\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\n    /// signed by the Airnode address\n    function failRequest(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        string calldata errorMessage,\n        bytes calldata signature\n    ) external override {\n        require(\n            keccak256(\n                abi.encodePacked(airnode, requester, fulfillFunctionId)\n            ) == requestIdToFulfillmentParameters[requestId],\n            \"Invalid request fulfillment\"\n        );\n        require(\n            (\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\n                    .toEthSignedMessageHash()\n            ).recover(signature) == airnode,\n            \"Signature mismatch\"\n        );\n        delete requestIdToFulfillmentParameters[requestId];\n        emit FailedRequest(airnode, requestId, timestamp, errorMessage);\n    }\n\n    /// @notice Called by the requester to make a request to be fulfilled by a\n    /// relayer\n    /// @dev The relayer address is indexed in the relayed protocol logs\n    /// because it will be the relayer that will be listening to these logs\n    /// @param endpointOrTemplateId Endpoint or template ID\n    /// @param parameters Parameters\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @return requestId Request ID\n    function makeRequestRelayed(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external override returns (bytes32 requestId) {\n        require(airnode != address(0), \"Airnode address zero\");\n        require(\n            endpointOrTemplateId != bytes32(0),\n            \"Endpoint or template ID zero\"\n        );\n        require(\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\n            \"Parameters too long\"\n        );\n        require(relayer != address(0), \"Relayer address zero\");\n        require(sponsor != address(0), \"Sponsor address zero\");\n        require(fulfillFunctionId != bytes4(0), \"Fulfill function ID zero\");\n        uint256 requesterRequestCount = ++requesterToRequestCount[msg.sender];\n        requestId = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                msg.sender,\n                requesterRequestCount,\n                airnode,\n                endpointOrTemplateId,\n                parameters,\n                relayer,\n                sponsor,\n                fulfillFunctionId\n            )\n        );\n        requestIdToFulfillmentParameters[requestId] = keccak256(\n            abi.encodePacked(airnode, msg.sender, relayer, fulfillFunctionId)\n        );\n        emit MadeRequestRelayed(\n            relayer,\n            requestId,\n            airnode,\n            msg.sender,\n            requesterRequestCount,\n            endpointOrTemplateId,\n            parameters,\n            sponsor,\n            fulfillFunctionId\n        );\n    }\n\n    /// @notice Called by the relayer using the sponsor wallet to fulfill the\n    /// request with the Airnode-signed response\n    /// @dev The Airnode must verify the integrity of the request details,\n    /// template details, sponsor address–sponsor wallet address consistency\n    /// before signing the response\n    /// @param requestId Request ID\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param relayer Relayer address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @param timestamp Timestamp used in the signature\n    /// @param data Fulfillment data\n    /// @param signature Request ID, a timestamp, the sponsor wallet address\n    /// and the fulfillment data signed by the Airnode address\n    /// @return callSuccess If the fulfillment call succeeded\n    /// @return callData Data returned by the fulfillment call (if there is\n    /// any)\n    function fulfillRequestRelayed(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        address relayer,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external override returns (bool callSuccess, bytes memory callData) {\n        require(\n            keccak256(\n                abi.encodePacked(airnode, requester, relayer, fulfillFunctionId)\n            ) == requestIdToFulfillmentParameters[requestId],\n            \"Invalid request fulfillment\"\n        );\n        require(\n            (\n                keccak256(\n                    abi.encodePacked(requestId, timestamp, msg.sender, data)\n                ).toEthSignedMessageHash()\n            ).recover(signature) == airnode,\n            \"Signature mismatch\"\n        );\n        delete requestIdToFulfillmentParameters[requestId];\n        // solhint-disable-next-line avoid-low-level-calls\n        (callSuccess, callData) = requester.call(\n            abi.encodeWithSelector(\n                fulfillFunctionId,\n                requestId,\n                timestamp,\n                data\n            )\n        );\n        if (callSuccess) {\n            emit FulfilledRequestRelayed(\n                relayer,\n                requestId,\n                airnode,\n                timestamp,\n                data\n            );\n        } else {\n            // We do not bubble up the revert string from `callData`\n            emit FailedRequestRelayed(\n                relayer,\n                requestId,\n                airnode,\n                timestamp,\n                \"Fulfillment failed unexpectedly\"\n            );\n        }\n    }\n\n    /// @notice Called by the relayer using the sponsor wallet if the request\n    /// cannot be fulfilled\n    /// @dev Since failure may also include problems at the Airnode-end (such\n    /// as it being unavailable), we are content with a signature from the\n    /// relayer to validate failures. This is acceptable because explicit\n    /// failures are mainly for easy debugging of issues, and the requester\n    /// should always consider denial of service from a relayer or an Airnode\n    /// to be a possibility.\n    /// @param requestId Request ID\n    /// @param airnode Airnode address\n    /// @param requester Requester address\n    /// @param relayer Relayer address\n    /// @param timestamp Timestamp used in the signature\n    /// @param errorMessage A message that explains why the request has failed\n    /// @param signature Request ID, a timestamp and the sponsor wallet address\n    /// signed by the relayer address\n    function failRequestRelayed(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        address relayer,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        string calldata errorMessage,\n        bytes calldata signature\n    ) external override {\n        require(\n            keccak256(\n                abi.encodePacked(airnode, requester, relayer, fulfillFunctionId)\n            ) == requestIdToFulfillmentParameters[requestId],\n            \"Invalid request fulfillment\"\n        );\n        require(\n            (\n                keccak256(abi.encodePacked(requestId, timestamp, msg.sender))\n                    .toEthSignedMessageHash()\n            ).recover(signature) == relayer,\n            \"Signature mismatch\"\n        );\n        delete requestIdToFulfillmentParameters[requestId];\n        emit FailedRequestRelayed(\n            relayer,\n            requestId,\n            airnode,\n            timestamp,\n            errorMessage\n        );\n    }\n\n    /// @notice Returns if the request with the ID is made but not\n    /// fulfilled/failed yet\n    /// @dev If a requester has made a request, received a request ID but did\n    /// not hear back, it can call this method to check if the Airnode/relayer\n    /// called back `failRequest()`/`failRequestRelayed()` instead.\n    /// @param requestId Request ID\n    /// @return If the request is awaiting fulfillment\n    function requestIsAwaitingFulfillment(\n        bytes32 requestId\n    ) external view override returns (bool) {\n        return requestIdToFulfillmentParameters[requestId] != bytes32(0);\n    }\n}\n"
    },
    "contracts/protocol/AirnodeRequester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IAirnodeProtocol.sol\";\nimport \"./interfaces/IAirnodeRequester.sol\";\n\n/// @title Contract to be inherited by contracts that will make Airnode\n/// requests and receive fulfillments\nabstract contract AirnodeRequester is IAirnodeRequester {\n    /// @notice AirnodeProtocol contract address\n    address public immutable override airnodeProtocol;\n\n    /// @dev Reverts if the sender is not the AirnodeProtocol contract. Use\n    /// this modifier with methods that are meant to receive RRP fulfillments.\n    modifier onlyAirnodeProtocol() {\n        require(\n            msg.sender == address(airnodeProtocol),\n            \"Sender not Airnode protocol\"\n        );\n        _;\n    }\n\n    /// @dev Reverts if the timestamp is not valid. Use this modifier with\n    /// methods that are meant to receive RRP and PSP fulfillments.\n    /// @param timestamp Timestamp used in the signature\n    modifier onlyValidTimestamp(uint256 timestamp) {\n        require(timestampIsValid(timestamp), \"Timestamp not valid\");\n        _;\n    }\n\n    /// @param _airnodeProtocol AirnodeProtocol contract address\n    constructor(address _airnodeProtocol) {\n        require(_airnodeProtocol != address(0), \"AirnodeProtocol address zero\");\n        airnodeProtocol = _airnodeProtocol;\n    }\n\n    /// @notice Overriden by the inheriting contract to return if the timestamp\n    /// used in the signature is valid\n    /// @dev If and how the timestamp should be validated depends on the nature\n    /// of the request. If the request is \"return me the price of this asset at\n    /// this specific time in history\", it can be assumed that the response\n    /// will not go out of date. If the request is \"return me the price of this\n    /// asset now\", the requester would rather not consider a response that is\n    /// not immediate.\n    /// In addition to the nature of the request, if and how the timestamp is\n    /// used in the contract logic determines how it should be validated.\n    /// In general, one should keep in mind that similar to the fulfillment\n    /// data, it is possible for the timestamp to be misreported.\n    /// @param timestamp Timestamp used in the signature\n    function timestampIsValid(\n        uint256 timestamp\n    ) internal view virtual returns (bool);\n}\n"
    },
    "contracts/protocol/interfaces/IAirnodeProtocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../utils/interfaces/IExtendedSelfMulticall.sol\";\nimport \"./IStorageUtils.sol\";\nimport \"./ISponsorshipUtils.sol\";\nimport \"./IWithdrawalUtils.sol\";\n\ninterface IAirnodeProtocol is\n    IExtendedSelfMulticall,\n    IStorageUtils,\n    ISponsorshipUtils,\n    IWithdrawalUtils\n{\n    event MadeRequest(\n        address indexed airnode,\n        bytes32 indexed requestId,\n        address requester,\n        uint256 requesterRequestCount,\n        bytes32 endpointOrTemplateId,\n        bytes parameters,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    );\n\n    event FulfilledRequest(\n        address indexed airnode,\n        bytes32 indexed requestId,\n        uint256 timestamp,\n        bytes data\n    );\n\n    event FailedRequest(\n        address indexed airnode,\n        bytes32 indexed requestId,\n        uint256 timestamp,\n        string errorMessage\n    );\n\n    event MadeRequestRelayed(\n        address indexed relayer,\n        bytes32 indexed requestId,\n        address indexed airnode,\n        address requester,\n        uint256 requesterRequestCount,\n        bytes32 endpointOrTemplateId,\n        bytes parameters,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    );\n\n    event FulfilledRequestRelayed(\n        address indexed relayer,\n        bytes32 indexed requestId,\n        address indexed airnode,\n        uint256 timestamp,\n        bytes data\n    );\n\n    event FailedRequestRelayed(\n        address indexed relayer,\n        bytes32 indexed requestId,\n        address indexed airnode,\n        uint256 timestamp,\n        string errorMessage\n    );\n\n    function makeRequest(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external returns (bytes32 requestId);\n\n    function fulfillRequest(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external returns (bool callSuccess, bytes memory callData);\n\n    function failRequest(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        string calldata errorMessage,\n        bytes calldata signature\n    ) external;\n\n    function makeRequestRelayed(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external returns (bytes32 requestId);\n\n    function fulfillRequestRelayed(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        address relayer,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        bytes calldata data,\n        bytes calldata signature\n    ) external returns (bool callSuccess, bytes memory callData);\n\n    function failRequestRelayed(\n        bytes32 requestId,\n        address airnode,\n        address requester,\n        address relayer,\n        bytes4 fulfillFunctionId,\n        uint256 timestamp,\n        string calldata errorMessage,\n        bytes calldata signature\n    ) external;\n\n    function requestIsAwaitingFulfillment(\n        bytes32 requestId\n    ) external view returns (bool);\n\n    function requesterToRequestCount(\n        address requester\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/protocol/interfaces/IAirnodeRequester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAirnodeRequester {\n    function airnodeProtocol() external view returns (address);\n}\n"
    },
    "contracts/protocol/interfaces/ISponsorshipUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISponsorshipUtils {\n    event SetRrpSponsorshipStatus(\n        address indexed sponsor,\n        address indexed requester,\n        bool status\n    );\n\n    event SetPspSponsorshipStatus(\n        address indexed sponsor,\n        bytes32 indexed subscriptionId,\n        bool status\n    );\n\n    function setRrpSponsorshipStatus(address requester, bool status) external;\n\n    function setPspSponsorshipStatus(\n        bytes32 subscriptionId,\n        bool status\n    ) external;\n\n    function sponsorToRequesterToRrpSponsorshipStatus(\n        address sponsor,\n        address requester\n    ) external view returns (bool status);\n\n    function sponsorToSubscriptionIdToPspSponsorshipStatus(\n        address sponsor,\n        bytes32 subscriptionId\n    ) external view returns (bool status);\n}\n"
    },
    "contracts/protocol/interfaces/IStorageUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IStorageUtils {\n    event StoredTemplate(\n        bytes32 indexed templateId,\n        bytes32 endpointId,\n        bytes parameters\n    );\n\n    event StoredSubscription(\n        bytes32 indexed subscriptionId,\n        uint256 chainId,\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes parameters,\n        bytes conditions,\n        address relayer,\n        address sponsor,\n        address requester,\n        bytes4 fulfillFunctionId\n    );\n\n    function storeTemplate(\n        bytes32 endpointId,\n        bytes calldata parameters\n    ) external returns (bytes32 templateId);\n\n    function storeSubscription(\n        uint256 chainId,\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        bytes calldata conditions,\n        address relayer,\n        address sponsor,\n        address requester,\n        bytes4 fulfillFunctionId\n    ) external returns (bytes32 subscriptionId);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function MAXIMUM_PARAMETER_LENGTH() external view returns (uint256);\n\n    function templates(\n        bytes32 templateId\n    ) external view returns (bytes32 endpointId, bytes memory parameters);\n\n    function subscriptions(\n        bytes32 subscriptionId\n    )\n        external\n        view\n        returns (\n            uint256 chainId,\n            address airnode,\n            bytes32 endpointOrTemplateId,\n            bytes memory parameters,\n            bytes memory conditions,\n            address relayer,\n            address sponsor,\n            address requester,\n            bytes4 fulfillFunctionId\n        );\n}\n"
    },
    "contracts/protocol/interfaces/IWithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWithdrawalUtils {\n    event RequestedWithdrawal(\n        address indexed airnodeOrRelayer,\n        address indexed sponsor,\n        bytes32 indexed withdrawalRequestId,\n        uint256 protocolId\n    );\n\n    event FulfilledWithdrawal(\n        address indexed airnodeOrRelayer,\n        address indexed sponsor,\n        bytes32 indexed withdrawalRequestId,\n        uint256 protocolId,\n        address sponsorWallet,\n        uint256 amount\n    );\n\n    event ClaimedBalance(address indexed sponsor, uint256 amount);\n\n    function requestWithdrawal(\n        address airnodeOrRelayer,\n        uint256 protocolId\n    ) external;\n\n    function fulfillWithdrawal(\n        bytes32 withdrawalRequestId,\n        address airnodeOrRelayer,\n        uint256 protocolId,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata signature\n    ) external payable;\n\n    function claimBalance() external;\n\n    function withdrawalRequestIsAwaitingFulfillment(\n        bytes32 withdrawalRequestId\n    ) external view returns (bool);\n\n    function sponsorToBalance(address sponsor) external view returns (uint256);\n\n    function sponsorToWithdrawalRequestCount(\n        address sponsor\n    ) external view returns (uint256);\n}\n"
    },
    "contracts/protocol/mock/MockAirnodeRequester.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../AirnodeRequester.sol\";\n\ncontract MockAirnodeRequester is AirnodeRequester {\n    mapping(bytes32 => bytes) public requestIdToData;\n\n    constructor(address _airnodeProtocol) AirnodeRequester(_airnodeProtocol) {}\n\n    function makeRequest(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external returns (bytes32 requestId) {\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequest(\n            airnode,\n            endpointOrTemplateId,\n            parameters,\n            sponsor,\n            fulfillFunctionId\n        );\n    }\n\n    function makeRequestRelayed(\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        address relayer,\n        address sponsor,\n        bytes4 fulfillFunctionId\n    ) external returns (bytes32 requestId) {\n        requestId = IAirnodeProtocol(airnodeProtocol).makeRequestRelayed(\n            airnode,\n            endpointOrTemplateId,\n            parameters,\n            relayer,\n            sponsor,\n            fulfillFunctionId\n        );\n    }\n\n    function fulfillRequest(\n        bytes32 requestId,\n        uint256 timestamp,\n        bytes calldata data\n    ) external onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\n        requestIdToData[requestId] = data;\n    }\n\n    /// @notice A method to be called back by the respective method at\n    /// AirnodeRrp.sol for testing fulfillment failure\n    /// @param // requestId Request ID\n    /// @param timestamp Timestamp used in the signature\n    /// @param // data Data returned by the Airnode\n    function fulfillRequestAlwaysReverts(\n        bytes32 /* requestId */,\n        uint256 timestamp,\n        bytes calldata /* data */\n    ) external view onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\n        revert(\"Always reverts\");\n    }\n\n    /// @notice A method to be called back by the respective method at\n    /// AirnodeRrp.sol for testing fulfillment failure\n    /// @param // requestId Request ID\n    /// @param timestamp Timestamp used in the signature\n    /// @param // data Data returned by the Airnode\n    function fulfillRequestAlwaysRevertsWithNoString(\n        bytes32 /* requestId */,\n        uint256 timestamp,\n        bytes calldata /* data */\n    ) external view onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\n        revert(); // solhint-disable-line reason-string\n    }\n\n    /// @notice A method to be called back by the respective method at\n    /// AirnodeRrp.sol for testing fulfillment running out of gas\n    /// @param // requestId Request ID\n    /// @param timestamp Timestamp used in the signature\n    /// @param // data Data returned by the Airnode\n    function fulfillRequestAlwaysRunsOutOfGas(\n        bytes32 /* requestId */,\n        uint256 timestamp,\n        bytes calldata /* data */\n    ) external view onlyAirnodeProtocol onlyValidTimestamp(timestamp) {\n        while (true) {}\n    }\n\n    /// @notice Overriden to reject signatures that have been signed 1 hour\n    /// before or after `block.timestamp`\n    /// @dev The validation scheme implemented here is an arbitrary example. Do\n    /// not treat it as a recommendation. Refer to AirnodeRequester for more\n    /// information.\n    /// @param timestamp Timestamp used in the signature\n    function timestampIsValid(\n        uint256 timestamp\n    ) internal view virtual override returns (bool) {\n        return\n            timestamp + 1 hours > block.timestamp &&\n            timestamp < block.timestamp + 1 hours;\n    }\n}\n"
    },
    "contracts/protocol/mock/MockSponsor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../AirnodeRequester.sol\";\n\ncontract MockSponsor is AirnodeRequester {\n    constructor(address _airnodeProtocol) AirnodeRequester(_airnodeProtocol) {}\n\n    function requestWithdrawal(\n        address airnodeOrRelayer,\n        uint256 protocolId\n    ) external {\n        IAirnodeProtocol(airnodeProtocol).requestWithdrawal(\n            airnodeOrRelayer,\n            protocolId\n        );\n    }\n\n    function claimBalance() external {\n        IAirnodeProtocol(airnodeProtocol).claimBalance();\n    }\n\n    function timestampIsValid(\n        uint256\n    ) internal view virtual override returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/protocol/SponsorshipUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/ISponsorshipUtils.sol\";\n\n/// @title Contract that sponsors can use to announce their willingness to\n/// sponsor a particular RRP requester or PSP subscription\n/// @notice The sponsorship status is not checked during requests or\n/// fulfillments, which means the respective Airnode is trusted to make this\n/// check through a static call to this contract. The Airnode may skip this\n/// check if it has received an off-chain assurance.\n/// @dev An Airnode (or relayer) has a \"sponsor wallet\" dedicated for each\n/// account through an HD wallet. When a requester makes a request specifying a\n/// sponsor, the Airnode verifies the sponsorship my making a static call to\n/// this contract, and uses the respective sponsor wallet to fulfill the\n/// request. This allows the sponsor to cover the gas costs of the\n/// fulfillments, as they know that funds they have deposited in the respective\n/// sponsor wallet will only be used for use-cases they have sponsored.\ncontract SponsorshipUtils is ISponsorshipUtils {\n    /// @notice Sponsorship status for a sponsor–RRP requester pair\n    mapping(address => mapping(address => bool))\n        public\n        override sponsorToRequesterToRrpSponsorshipStatus;\n\n    /// @notice Sponsorship status for a sponsor–PSP subscription pair\n    mapping(address => mapping(bytes32 => bool))\n        public\n        override sponsorToSubscriptionIdToPspSponsorshipStatus;\n\n    /// @notice Called by the sponsor to set the sponsorship status of an RRP\n    /// requester\n    /// @dev This applies to both regular and relayed RRP requests\n    /// @param requester RRP requester address\n    /// @param status Sponsorship status\n    function setRrpSponsorshipStatus(\n        address requester,\n        bool status\n    ) external override {\n        require(requester != address(0), \"Requester address zero\");\n        sponsorToRequesterToRrpSponsorshipStatus[msg.sender][\n            requester\n        ] = status;\n        emit SetRrpSponsorshipStatus(msg.sender, requester, status);\n    }\n\n    /// @notice Called by the sponsor to set the sponsorship status of a PSP\n    /// subscription\n    /// @param subscriptionId Subscription ID\n    /// @param status Sponsorship status\n    function setPspSponsorshipStatus(\n        bytes32 subscriptionId,\n        bool status\n    ) external override {\n        require(subscriptionId != bytes32(0), \"Subscription ID zero\");\n        sponsorToSubscriptionIdToPspSponsorshipStatus[msg.sender][\n            subscriptionId\n        ] = status;\n        emit SetPspSponsorshipStatus(msg.sender, subscriptionId, status);\n    }\n}\n"
    },
    "contracts/protocol/StorageUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/IStorageUtils.sol\";\n\n/// @title Contract that stores template and subscription details on chain\n/// @notice The Airnode protocol does not depend on the template or\n/// subscription details being stored on-chain. Airnode can be informed about\n/// these in other ways, e.g., the details are hardcoded in the Airnode\n/// configuration file.\ncontract StorageUtils is IStorageUtils {\n    struct Template {\n        bytes32 endpointId;\n        bytes parameters;\n    }\n\n    struct Subscription {\n        uint256 chainId;\n        address airnode;\n        bytes32 endpointOrTemplateId;\n        bytes parameters;\n        bytes conditions;\n        address relayer;\n        address sponsor;\n        address requester;\n        bytes4 fulfillFunctionId;\n    }\n\n    /// @notice Maximum parameter length for byte strings that Airnodes will\n    /// need to read from storage or logs\n    /// @dev A very generous limit is applied, under the assumption that\n    /// anything larger than this is a grief attempt. If the user needs to use\n    /// longer parameters, they will need to use off-chain channels to pass\n    /// the respective template/subscription details to the Airnode operator\n    /// for them to be specified in the configuration file.\n    uint256 public constant override MAXIMUM_PARAMETER_LENGTH = 4096;\n\n    /// @notice Template details with the ID\n    mapping(bytes32 => Template) public override templates;\n\n    /// @notice Subscription details with the ID\n    mapping(bytes32 => Subscription) public override subscriptions;\n\n    /// @notice Stores template details\n    /// @dev Templates fully or partially define requests. By referencing a\n    /// template, requesters can omit specifying the \"boilerplate\" sections of\n    /// requests.\n    /// In a subscription context, a zero endpoint ID means the Airnode does\n    /// not need to use one of its endpoints, and can move directly on to\n    /// fulfillment. This is particularly useful for defining traditional\n    /// keeper jobs that do not require off-chain data.\n    /// @param endpointId Endpoint ID (allowed to be `bytes32(0)`)\n    /// @param parameters Template parameters, encoded in Airnode ABI\n    /// @return templateId Template ID\n    function storeTemplate(\n        bytes32 endpointId,\n        bytes calldata parameters\n    ) external override returns (bytes32 templateId) {\n        require(\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\n            \"Parameters too long\"\n        );\n        templateId = keccak256(abi.encodePacked(endpointId, parameters));\n        templates[templateId] = Template({\n            endpointId: endpointId,\n            parameters: parameters\n        });\n        emit StoredTemplate(templateId, endpointId, parameters);\n    }\n\n    /// @notice Stores subscription details\n    /// @dev `airnode` should make the query specified by `templateId` and\n    /// `parameters`. If the returned data satisfies `conditions`, it should\n    /// call `requester`'s `fulfillFunctionId` on `chainId` with the returned\n    /// data, using the wallet dedicated to `sponsor`.\n    /// If `relayer` is not `airnode`, the relayer is responsible with checking\n    /// `condition` and using the wallet dedicated to `sponsor` to deliver the\n    /// data.\n    /// In most cases, `conditions` will specify a static call to a function on\n    /// `chainId` with the data. The extent of its flexibility depends on the\n    /// node implementation and is outside the scope of the on-chain protocol.\n    /// Similarly, `conditions` can specify with what frequency it should be\n    /// verified, and the details of this is outside the scope.\n    /// `templateId` being zero is similar to the endpoint ID being zero for\n    /// templates, means the endpoint query can be skipped. In this case,\n    /// `parameters` will be treated as the data that is returned by the\n    /// endpoint while verifying `conditions`.\n    /// @param chainId Chain ID\n    /// @param airnode Airnode address\n    /// @param endpointOrTemplateId Endpoint or template ID (allowed to be\n    /// `bytes32(0)`)\n    /// @param parameters Parameters provided by the subscription in addition\n    /// to the parameters in the template (if applicable), encoded in Airnode\n    /// ABI\n    /// @param conditions Conditions under which the subscription is requested\n    /// to be fulfilled, encoded in Airnode ABI\n    /// @param relayer Relayer address\n    /// @param sponsor Sponsor address\n    /// @param requester Requester address\n    /// @param fulfillFunctionId Selector of the function to be called for\n    /// fulfillment\n    /// @return subscriptionId Subscription ID\n    function storeSubscription(\n        uint256 chainId,\n        address airnode,\n        bytes32 endpointOrTemplateId,\n        bytes calldata parameters,\n        bytes calldata conditions,\n        address relayer,\n        address sponsor,\n        address requester,\n        bytes4 fulfillFunctionId\n    ) external override returns (bytes32 subscriptionId) {\n        require(chainId != 0, \"Chain ID zero\");\n        require(airnode != address(0), \"Airnode address zero\");\n        require(\n            parameters.length <= MAXIMUM_PARAMETER_LENGTH,\n            \"Parameters too long\"\n        );\n        require(\n            conditions.length <= MAXIMUM_PARAMETER_LENGTH,\n            \"Conditions too long\"\n        );\n        require(relayer != address(0), \"Relayer address zero\");\n        require(sponsor != address(0), \"Sponsor address zero\");\n        require(requester != address(0), \"Requester address zero\");\n        require(fulfillFunctionId != bytes4(0), \"Fulfill function ID zero\");\n        subscriptionId = keccak256(\n            abi.encode(\n                chainId,\n                airnode,\n                endpointOrTemplateId,\n                parameters,\n                conditions,\n                relayer,\n                sponsor,\n                requester,\n                fulfillFunctionId\n            )\n        );\n        subscriptions[subscriptionId] = Subscription({\n            chainId: chainId,\n            airnode: airnode,\n            endpointOrTemplateId: endpointOrTemplateId,\n            parameters: parameters,\n            conditions: conditions,\n            relayer: relayer,\n            sponsor: sponsor,\n            requester: requester,\n            fulfillFunctionId: fulfillFunctionId\n        });\n        emit StoredSubscription(\n            subscriptionId,\n            chainId,\n            airnode,\n            endpointOrTemplateId,\n            parameters,\n            conditions,\n            relayer,\n            sponsor,\n            requester,\n            fulfillFunctionId\n        );\n    }\n}\n"
    },
    "contracts/protocol/WithdrawalUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./interfaces/IWithdrawalUtils.sol\";\n\n/// @title Contract that can be used by sponsors to request withdrawals from\n/// sponsor wallets and Airnodes/relayers to fulfill these\n/// @notice The respective Airnode/relayer may not support withdrawals for the\n/// specified protocol, or at all. Similarly, an Airnode/relayer may deposit\n/// funds directly to the sponsor address without being prompted, e.g., because\n/// they are ceasing operations. In general, no guarantee is provided for the\n/// funds deposited to sponsor wallets at the protocol level. Therefore, the\n/// sponsors should limit their deposits to the minimum amount required for\n/// their operations, and assume they will not receive these funds back.\n/// @dev Withdrawals are implemented in the form of pull payments. The sponsor\n/// requests a withdrawal from a sponsor wallet, and the Airnode/relayer uses\n/// the specified sponsor wallet to deposit the entire balance at this\n/// contract. Then, the sponsor claims/pulls the payment from this contract.\n/// Different protocols (RRP, PSP, etc.) use different sponsor wallets for a\n/// particular Airnode/relayer–sponsor pair, which is why sponsor wallet\n/// derivation includes a protocol ID. Refer to the node documentation for what\n/// these protocol IDs are.\ncontract WithdrawalUtils is IWithdrawalUtils {\n    using ECDSA for bytes32;\n\n    /// @notice Sponsor balance that is withdrawn but not claimed\n    mapping(address => uint256) public override sponsorToBalance;\n\n    /// @notice Number of withdrawal requests the sponsor made\n    mapping(address => uint256) public override sponsorToWithdrawalRequestCount;\n\n    mapping(bytes32 => bytes32) private withdrawalRequestIdToParameters;\n\n    /// @notice Called by a sponsor to request a withdrawal. In response, the\n    /// Airnode/relayer is expected to deposit the funds at this contract by\n    /// calling `fulfillWithdrawal()`, and then the sponsor will have to call\n    /// `claimBalance()` to have the funds sent to itself. For sponsor to be\n    /// able to receive funds this way, it has to be an EOA or a contract that\n    /// has an appropriate payable fallback function.\n    /// @param airnodeOrRelayer Airnode/relayer address\n    /// @param protocolId Protocol ID\n    function requestWithdrawal(\n        address airnodeOrRelayer,\n        uint256 protocolId\n    ) external override {\n        require(airnodeOrRelayer != address(0), \"Airnode/relayer address zero\");\n        require(protocolId != 0, \"Protocol ID zero\");\n        bytes32 withdrawalRequestId = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                msg.sender,\n                ++sponsorToWithdrawalRequestCount[msg.sender]\n            )\n        );\n        withdrawalRequestIdToParameters[withdrawalRequestId] = keccak256(\n            abi.encodePacked(airnodeOrRelayer, protocolId, msg.sender)\n        );\n        emit RequestedWithdrawal(\n            airnodeOrRelayer,\n            msg.sender,\n            withdrawalRequestId,\n            protocolId\n        );\n    }\n\n    /// @notice Called by the Airnode/relayer using the sponsor wallet to\n    /// fulfill the withdrawal request made by the sponsor\n    /// @param withdrawalRequestId Withdrawal request ID\n    /// @param airnodeOrRelayer Airnode/relayer address\n    /// @param protocolId Protocol ID\n    /// @param sponsor Sponsor address\n    function fulfillWithdrawal(\n        bytes32 withdrawalRequestId,\n        address airnodeOrRelayer,\n        uint256 protocolId,\n        address sponsor,\n        uint256 timestamp,\n        bytes calldata signature\n    ) external payable override {\n        require(\n            withdrawalRequestIdToParameters[withdrawalRequestId] ==\n                keccak256(\n                    abi.encodePacked(airnodeOrRelayer, protocolId, sponsor)\n                ),\n            \"Invalid withdrawal fulfillment\"\n        );\n        unchecked {\n            require(\n                timestamp + 1 hours > block.timestamp &&\n                    timestamp < block.timestamp + 1 hours,\n                \"Timestamp not valid\"\n            );\n        }\n        require(\n            (\n                keccak256(\n                    abi.encodePacked(withdrawalRequestId, timestamp, msg.sender)\n                ).toEthSignedMessageHash()\n            ).recover(signature) == airnodeOrRelayer,\n            \"Signature mismatch\"\n        );\n        delete withdrawalRequestIdToParameters[withdrawalRequestId];\n        sponsorToBalance[sponsor] += msg.value;\n        emit FulfilledWithdrawal(\n            airnodeOrRelayer,\n            sponsor,\n            withdrawalRequestId,\n            protocolId,\n            msg.sender,\n            msg.value\n        );\n    }\n\n    /// @notice Called by the sponsor to claim the withdrawn funds\n    /// @dev The sponsor must be able to receive funds. For example, if the\n    /// sponsor is a contract without a default `payable` function, this will\n    /// revert.\n    function claimBalance() external override {\n        uint256 sponsorBalance = sponsorToBalance[msg.sender];\n        require(sponsorBalance != 0, \"Sender balance zero\");\n        sponsorToBalance[msg.sender] = 0;\n        emit ClaimedBalance(msg.sender, sponsorBalance);\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, ) = msg.sender.call{value: sponsorBalance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    /// @notice Returns if the withdrawal request with the ID is made but not\n    /// fulfilled yet\n    /// @param withdrawalRequestId Withdrawal request ID\n    /// @return isAwaitingFulfillment If the withdrawal request is awaiting\n    /// fulfillment\n    function withdrawalRequestIsAwaitingFulfillment(\n        bytes32 withdrawalRequestId\n    ) external view override returns (bool) {\n        return\n            withdrawalRequestIdToParameters[withdrawalRequestId] != bytes32(0);\n    }\n}\n"
    },
    "contracts/utils/ExpiringMetaTxForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IExpiringMetaTxForwarder.sol\";\n\n/// @title Contract that forwards expiring meta-txes to ERC2771 contracts that\n/// trust it\n/// @notice `msg.value` is not supported. Identical meta-txes are not\n/// supported. Target account must be a contract. Signer of the meta-tx is\n/// allowed to cancel it before execution, effectively rendering the signature\n/// useless.\n/// This implementation is not intended to be used with general-purpose relayer\n/// networks. Instead, it is meant for use-cases where the relayer wants the\n/// signer to send a tx, so they request a meta-tx and execute it themselves to\n/// cover the gas cost.\n/// @dev This implementation does not use signer-specific nonces for meta-txes\n/// to be executable in an arbitrary order. For example, one can sign two\n/// meta-txes that will whitelist an account each and deliver these to the\n/// respective owners of the accounts. This implementation allows the account\n/// owners to not care about if and when the other meta-tx is executed. The\n/// signer is responsible for not issuing signatures that may cause undesired\n/// race conditions.\ncontract ExpiringMetaTxForwarder is Context, EIP712, IExpiringMetaTxForwarder {\n    using ECDSA for bytes32;\n    using Address for address;\n\n    /// @notice If the meta-tx with hash is executed or canceled\n    /// @dev We track this on a meta-tx basis and not by using nonces to avoid\n    /// requiring users keep track of nonces\n    mapping(bytes32 => bool) public override metaTxWithHashIsExecutedOrCanceled;\n\n    bytes32 private constant _TYPEHASH =\n        keccak256(\n            \"ExpiringMetaTx(address from,address to,bytes data,uint256 expirationTimestamp)\"\n        );\n\n    constructor() EIP712(\"ExpiringMetaTxForwarder\", \"1.0.0\") {}\n\n    /// @notice Verifies the signature and executes the meta-tx\n    /// @param metaTx Meta-tx\n    /// @param signature Meta-tx hash signed by `from`\n    /// @return returndata Returndata\n    function execute(\n        ExpiringMetaTx calldata metaTx,\n        bytes calldata signature\n    ) external override returns (bytes memory returndata) {\n        bytes32 metaTxHash = processMetaTx(metaTx);\n        require(\n            metaTxHash.recover(signature) == metaTx.from,\n            \"Invalid signature\"\n        );\n        emit ExecutedMetaTx(metaTxHash);\n        returndata = metaTx.to.functionCall(\n            abi.encodePacked(metaTx.data, metaTx.from)\n        );\n    }\n\n    /// @notice Called by a meta-tx source to prevent it from being executed\n    /// @dev This can be used to cancel meta-txes that were issued\n    /// accidentally, e.g., with an unreasonably large expiration timestamp,\n    /// which may create a dangling liability\n    /// @param metaTx Meta-tx\n    function cancel(ExpiringMetaTx calldata metaTx) external override {\n        require(_msgSender() == metaTx.from, \"Sender not meta-tx source\");\n        emit CanceledMetaTx(processMetaTx(metaTx));\n    }\n\n    /// @notice Checks if the meta-tx is valid, invalidates it for future\n    /// execution or nullification, and returns the meta-tx hash\n    /// @param metaTx Meta-tx\n    /// @return metaTxHash Meta-tx hash\n    function processMetaTx(\n        ExpiringMetaTx calldata metaTx\n    ) private returns (bytes32 metaTxHash) {\n        metaTxHash = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    _TYPEHASH,\n                    metaTx.from,\n                    metaTx.to,\n                    keccak256(metaTx.data),\n                    metaTx.expirationTimestamp\n                )\n            )\n        );\n        require(\n            !metaTxWithHashIsExecutedOrCanceled[metaTxHash],\n            \"Meta-tx executed or canceled\"\n        );\n        require(\n            metaTx.expirationTimestamp > block.timestamp,\n            \"Meta-tx expired\"\n        );\n        metaTxWithHashIsExecutedOrCanceled[metaTxHash] = true;\n    }\n}\n"
    },
    "contracts/utils/ExtendedSelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./SelfMulticall.sol\";\nimport \"./interfaces/IExtendedSelfMulticall.sol\";\n\n/// @title Contract that extends SelfMulticall to fetch some of the global\n/// variables\n/// @notice Available global variables are limited to the ones that Airnode\n/// tends to need\ncontract ExtendedSelfMulticall is SelfMulticall, IExtendedSelfMulticall {\n    /// @notice Returns the chain ID\n    /// @return Chain ID\n    function getChainId() external view override returns (uint256) {\n        return block.chainid;\n    }\n\n    /// @notice Returns the account balance\n    /// @param account Account address\n    /// @return Account balance\n    function getBalance(\n        address account\n    ) external view override returns (uint256) {\n        return account.balance;\n    }\n\n    /// @notice Returns if the account contains bytecode\n    /// @dev An account not containing any bytecode does not indicate that it\n    /// is an EOA or it will not contain any bytecode in the future.\n    /// Contract construction and `SELFDESTRUCT` updates the bytecode at the\n    /// end of the transaction.\n    /// @return If the account contains bytecode\n    function containsBytecode(\n        address account\n    ) external view override returns (bool) {\n        return account.code.length > 0;\n    }\n\n    /// @notice Returns the current block number\n    /// @return Current block number\n    function getBlockNumber() external view override returns (uint256) {\n        return block.number;\n    }\n\n    /// @notice Returns the current block timestamp\n    /// @return Current block timestamp\n    function getBlockTimestamp() external view override returns (uint256) {\n        return block.timestamp;\n    }\n\n    /// @notice Returns the current block basefee\n    /// @return Current block basefee\n    function getBlockBasefee() external view override returns (uint256) {\n        return block.basefee;\n    }\n}\n"
    },
    "contracts/utils/ExternalMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IExternalMulticall.sol\";\n\n/// @title Contract that enables calls to external contracts to be batched\n/// @notice This contract can be used for two use-cases: (1) In its current\n/// state, it can be used to batch static calls to contracts that do not care\n/// about who the sender is, (2) after extending it, to interact with trusted\n/// contracts (see below for details). It implements two ways of batching, one\n/// requires none of the calls to revert and the other tolerates individual\n/// calls reverting.\n/// @dev As mentioned above, this contract can be used to interact with trusted\n/// contracts. Such interactions can leave this contract in a privileged\n/// position (e.g., ExternalMulticall may be left with a non-zero balance of an\n/// ERC20 token as a result of a transaction sent to it), which can be abused\n/// by an attacker afterwards. In addition, attackers can frontrun interactions\n/// to have the following interaction result in an unintended outcome. A\n/// general solution to these attacks is overriding both multicall functions\n/// behind an access control mechanism, such as an `onlyOwner` modifier.\n/// Refer to MakerDAO's Multicall.sol for a similar implementation.\nabstract contract ExternalMulticall is IExternalMulticall {\n    /// @notice Batches calls to external contracts and reverts as soon as one\n    /// of the batched calls reverts\n    /// @param targets Array of target addresses of batched calls\n    /// @param data Array of calldata of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function externalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    ) public virtual override returns (bytes[] memory returndata) {\n        uint256 callCount = targets.length;\n        require(callCount == data.length, \"Parameter length mismatch\");\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            require(\n                targets[ind].code.length > 0,\n                \"Multicall target not contract\"\n            );\n            bool success;\n            // solhint-disable-next-line avoid-low-level-calls\n            (success, returndata[ind]) = targets[ind].call(data[ind]);\n            if (!success) {\n                bytes memory returndataWithRevertData = returndata[ind];\n                // Adapted from OpenZeppelin's Address.sol\n                if (returndataWithRevertData.length > 0) {\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        let returndata_size := mload(returndataWithRevertData)\n                        revert(\n                            add(32, returndataWithRevertData),\n                            returndata_size\n                        )\n                    }\n                } else {\n                    revert(\"Multicall: No revert string\");\n                }\n            }\n            unchecked {\n                ind++;\n            }\n        }\n    }\n\n    /// @notice Batches calls to external contracts but does not revert if any\n    /// of the batched calls reverts\n    /// @param targets Array of target addresses of batched calls\n    /// @param data Array of calldata of batched calls\n    /// @return successes Array of success conditions of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function tryExternalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    )\n        public\n        virtual\n        override\n        returns (bool[] memory successes, bytes[] memory returndata)\n    {\n        uint256 callCount = targets.length;\n        require(callCount == data.length, \"Parameter length mismatch\");\n        successes = new bool[](callCount);\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            if (targets[ind].code.length > 0) {\n                // solhint-disable-next-line avoid-low-level-calls\n                (successes[ind], returndata[ind]) = targets[ind].call(\n                    data[ind]\n                );\n            } else {\n                returndata[ind] = abi.encodeWithSignature(\n                    \"Error(string)\",\n                    \"Multicall target not contract\"\n                );\n            }\n            unchecked {\n                ind++;\n            }\n        }\n    }\n}\n"
    },
    "contracts/utils/interfaces/IExpiringMetaTxForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExpiringMetaTxForwarder {\n    event ExecutedMetaTx(bytes32 indexed metaTxHash);\n\n    event CanceledMetaTx(bytes32 indexed metaTxHash);\n\n    struct ExpiringMetaTx {\n        address from;\n        address to;\n        bytes data;\n        uint256 expirationTimestamp;\n    }\n\n    function execute(\n        ExpiringMetaTx calldata metaTx,\n        bytes calldata signature\n    ) external returns (bytes memory returndata);\n\n    function cancel(ExpiringMetaTx calldata metaTx) external;\n\n    function metaTxWithHashIsExecutedOrCanceled(\n        bytes32 metaTxHash\n    ) external returns (bool);\n}\n"
    },
    "contracts/utils/interfaces/IExtendedSelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ISelfMulticall.sol\";\n\ninterface IExtendedSelfMulticall is ISelfMulticall {\n    function getChainId() external view returns (uint256);\n\n    function getBalance(address account) external view returns (uint256);\n\n    function containsBytecode(address account) external view returns (bool);\n\n    function getBlockNumber() external view returns (uint256);\n\n    function getBlockTimestamp() external view returns (uint256);\n\n    function getBlockBasefee() external view returns (uint256);\n}\n"
    },
    "contracts/utils/interfaces/IExternalMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExternalMulticall {\n    function externalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    ) external returns (bytes[] memory returndata);\n\n    function tryExternalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    ) external returns (bool[] memory success, bytes[] memory returndata);\n}\n"
    },
    "contracts/utils/interfaces/IOwnableCallForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnableCallForwarder {\n    function forwardCall(\n        address forwardTarget,\n        bytes calldata forwardedCalldata\n    ) external payable returns (bytes memory returnedData);\n}\n"
    },
    "contracts/utils/interfaces/IPrepaymentDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../access-control-registry/interfaces/IAccessControlRegistryAdminnedWithManager.sol\";\n\ninterface IPrepaymentDepository is IAccessControlRegistryAdminnedWithManager {\n    event SetWithdrawalDestination(\n        address indexed user,\n        address withdrawalDestination\n    );\n\n    event IncreasedUserWithdrawalLimit(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event DecreasedUserWithdrawalLimit(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event Claimed(address recipient, uint256 amount, address sender);\n\n    event Deposited(\n        address indexed user,\n        uint256 amount,\n        uint256 withdrawalLimit,\n        address sender\n    );\n\n    event Withdrew(\n        address indexed user,\n        bytes32 indexed withdrawalHash,\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        address withdrawalDestination,\n        uint256 withdrawalLimit\n    );\n\n    function setWithdrawalDestination(\n        address user,\n        address withdrawalDestination\n    ) external;\n\n    function increaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function decreaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function claim(address recipient, uint256 amount) external;\n\n    function deposit(\n        address user,\n        uint256 amount\n    ) external returns (uint256 withdrawalLimit);\n\n    function applyPermitAndDeposit(\n        address user,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 withdrawalLimit);\n\n    function withdraw(\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        bytes calldata signature\n    ) external returns (address withdrawalDestination, uint256 withdrawalLimit);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function WITHDRAWAL_SIGNER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION()\n        external\n        view\n        returns (string memory);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function CLAIMER_ROLE_DESCRIPTION() external view returns (string memory);\n\n    function withdrawalSignerRole() external view returns (bytes32);\n\n    function userWithdrawalLimitIncreaserRole() external view returns (bytes32);\n\n    function userWithdrawalLimitDecreaserRole() external view returns (bytes32);\n\n    function claimerRole() external view returns (bytes32);\n\n    function token() external view returns (address);\n}\n"
    },
    "contracts/utils/interfaces/ISelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISelfMulticall {\n    function multicall(\n        bytes[] calldata data\n    ) external returns (bytes[] memory returndata);\n\n    function tryMulticall(\n        bytes[] calldata data\n    ) external returns (bool[] memory successes, bytes[] memory returndata);\n}\n"
    },
    "contracts/utils/mock/MockCallForwarderTarget.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MockCallForwarderTarget {\n    string public storage1;\n    uint256 public storage2;\n\n    function payableTargetFunction(\n        string calldata input1,\n        uint256 input2,\n        uint256 msgValue\n    ) external payable returns (bytes memory output1, bool output2) {\n        require(\n            keccak256(abi.encodePacked(input1)) ==\n                keccak256(abi.encodePacked(\"input1\")),\n            \"Incorrect input\"\n        );\n        require(input2 == 123, \"Incorrect input\");\n        require(msg.value == msgValue, \"Incorrect value\");\n        storage1 = input1;\n        storage2 = input2;\n        output1 = hex\"12345678\";\n        output2 = true;\n    }\n\n    function nonpayableTargetFunction(\n        string calldata input1,\n        uint256 input2\n    ) external returns (bytes memory output1, bool output2) {\n        require(\n            keccak256(abi.encodePacked(input1)) ==\n                keccak256(abi.encodePacked(\"input1\")),\n            \"Incorrect input\"\n        );\n        require(input2 == 123, \"Incorrect input\");\n        storage1 = input1;\n        storage2 = input2;\n        output1 = hex\"12345678\";\n        output2 = true;\n    }\n}\n"
    },
    "contracts/utils/mock/MockErc20PermitToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract MockErc20PermitToken is ERC20Permit {\n    constructor() ERC20(\"Token\", \"TKN\") ERC20Permit(\"Token\") {\n        _mint(msg.sender, 1e6 * 10 ** decimals());\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/utils/mock/MockExpiringMetaTxForwarderTarget.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/metatx/ERC2771Context.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockExpiringMetaTxForwarderTarget is ERC2771Context, Ownable {\n    uint256 public counter = 0;\n\n    constructor(\n        address _trustedForwarder,\n        address _owner\n    ) ERC2771Context(_trustedForwarder) {\n        _transferOwnership(_owner);\n    }\n\n    function incrementCounter() external onlyOwner returns (uint256) {\n        return ++counter;\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, ERC2771Context)\n        returns (address sender)\n    {\n        return ERC2771Context._msgSender();\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(Context, ERC2771Context)\n        returns (bytes calldata)\n    {\n        return ERC2771Context._msgData();\n    }\n}\n"
    },
    "contracts/utils/mock/MockExternalMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../ExternalMulticall.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// This contract overrides the multicall functions to demonstrate how they can\n// be extended to only allow the owner to execute multicalls. However, we\n// only do that in comments because we want to test the vanilla contract.\ncontract MockExternalMulticall is ExternalMulticall, Ownable {\n    function externalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    ) public virtual override returns (bytes[] memory returndata) {\n        // _checkOwner();\n        return super.externalMulticall(targets, data);\n    }\n\n    function tryExternalMulticall(\n        address[] calldata targets,\n        bytes[] calldata data\n    )\n        public\n        virtual\n        override\n        returns (bool[] memory successes, bytes[] memory returndata)\n    {\n        // _checkOwner();\n        return super.tryExternalMulticall(targets, data);\n    }\n}\n"
    },
    "contracts/utils/mock/MockMulticallTarget.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract MockMulticallTarget {\n    error MyError(uint256 fieldAlways123, string fieldAlwaysFoo);\n\n    int256[] private _argumentHistory;\n\n    function alwaysRevertsWithString(\n        int256 argPositive,\n        int256 argNegative\n    ) external pure {\n        require(argPositive > 0 && argNegative < 0, \"Invalid argument\");\n        revert(\"Reverted with string\");\n    }\n\n    function alwaysRevertsWithCustomError(\n        int256 argPositive,\n        int256 argNegative\n    ) external pure {\n        require(argPositive > 0 && argNegative < 0, \"Invalid argument\");\n        revert MyError(123, \"Foo\");\n    }\n\n    function alwaysRevertsWithNoData(\n        int256 argPositive,\n        int256 argNegative\n    ) external pure {\n        require(argPositive > 0 && argNegative < 0, \"Invalid argument\");\n        revert(); // solhint-disable-line reason-string\n    }\n\n    function convertsPositiveArgumentToNegative(\n        int256 argPositive\n    ) external returns (int256) {\n        require(argPositive > 0, \"Argument not positive\");\n        _argumentHistory.push(argPositive);\n        return -argPositive;\n    }\n\n    function argumentHistory() external view returns (int256[] memory) {\n        int256[] memory argumentHistoryInMemory = new int256[](\n            _argumentHistory.length\n        );\n        for (uint256 ind = 0; ind < _argumentHistory.length; ind++) {\n            argumentHistoryInMemory[ind] = _argumentHistory[ind];\n        }\n        return argumentHistoryInMemory;\n    }\n}\n"
    },
    "contracts/utils/mock/MockSelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"../SelfMulticall.sol\";\nimport \"./MockMulticallTarget.sol\";\n\ncontract MockSelfMulticall is SelfMulticall, MockMulticallTarget {}\n"
    },
    "contracts/utils/OwnableCallForwarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"./interfaces/IOwnableCallForwarder.sol\";\n\n/// @title Contract that forwards the calls that its owner sends\n/// @notice AccessControlRegistry users that want their access control tables\n/// to be transferrable (e.g., a DAO) will use this forwarder instead of\n/// interacting with it directly. There are cases where this transferrability\n/// is not desired, e.g., if the user is an Airnode and is immutably associated\n/// with a single address, in which case the manager will interact with\n/// AccessControlRegistry directly.\ncontract OwnableCallForwarder is Ownable, IOwnableCallForwarder {\n    /// @param _owner Owner address\n    constructor(address _owner) {\n        transferOwnership(_owner);\n    }\n\n    /// @notice Forwards the calldata and the value to the target address if\n    /// the sender is the owner and returns the data\n    /// @param forwardTarget Target address that the calldata will be forwarded\n    /// to\n    /// @param forwardedCalldata Calldata to be forwarded to the target address\n    /// @return returnedData Data returned by the forwarded call\n    function forwardCall(\n        address forwardTarget,\n        bytes calldata forwardedCalldata\n    ) external payable override onlyOwner returns (bytes memory returnedData) {\n        returnedData = Address.functionCallWithValue(\n            forwardTarget,\n            forwardedCalldata,\n            msg.value\n        );\n    }\n}\n"
    },
    "contracts/utils/PrepaymentDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../access-control-registry/AccessControlRegistryAdminnedWithManager.sol\";\nimport \"./interfaces/IPrepaymentDepository.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n/// @title Contract that enables micropayments to be prepaid in batch\n/// @notice `manager` represents the payment recipient, and its various\n/// privileges can be delegated to other accounts through respective roles.\n/// `manager`, `userWithdrawalLimitIncreaser` and `claimer` roles should only\n/// be granted to a multisig or an equivalently decentralized account.\n/// `withdrawalSigner` issues ERC191 signatures, and thus has to be an EOA. It\n/// being compromised poses a risk in proportion to the redundancy in user\n/// withdrawal limits. Have a `userWithdrawalLimitDecreaser` decrease user\n/// withdrawal limits as necessary to mitigate this risk.\n/// The `userWithdrawalLimitDecreaser` role can be granted to an EOA, as it\n/// cannot cause irreversible harm.\n/// This contract accepts prepayments in an ERC20 token specified immutably\n/// during construction. Do not use tokens that are not fully ERC20-compliant.\n/// An optional `depositWithPermit()` function is added to provide ERC2612\n/// support.\ncontract PrepaymentDepository is\n    AccessControlRegistryAdminnedWithManager,\n    IPrepaymentDepository\n{\n    using ECDSA for bytes32;\n\n    /// @notice Withdrawal signer role description\n    string public constant override WITHDRAWAL_SIGNER_ROLE_DESCRIPTION =\n        \"Withdrawal signer\";\n    /// @notice User withdrawal limit increaser role description\n    string\n        public constant\n        override USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION =\n        \"User withdrawal limit increaser\";\n    /// @notice User withdrawal limit decreaser role description\n    string\n        public constant\n        override USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION =\n        \"User withdrawal limit decreaser\";\n    /// @notice Claimer role description\n    string public constant override CLAIMER_ROLE_DESCRIPTION = \"Claimer\";\n\n    // We prefer revert strings over custom errors because not all chains and\n    // block explorers support custom errors\n    string private constant AMOUNT_ZERO_REVERT_STRING = \"Amount zero\";\n    string private constant AMOUNT_EXCEEDS_LIMIT_REVERT_STRING =\n        \"Amount exceeds limit\";\n    string private constant TRANSFER_UNSUCCESSFUL_REVERT_STRING =\n        \"Transfer unsuccessful\";\n\n    /// @notice Withdrawal signer role\n    bytes32 public immutable override withdrawalSignerRole;\n    /// @notice User withdrawal limit increaser role\n    bytes32 public immutable override userWithdrawalLimitIncreaserRole;\n    /// @notice User withdrawal limit decreaser role\n    bytes32 public immutable override userWithdrawalLimitDecreaserRole;\n    /// @notice Claimer role\n    bytes32 public immutable override claimerRole;\n\n    /// @notice Contract address of the ERC20 token that prepayments can be\n    /// made in\n    address public immutable override token;\n\n    /// @notice Returns the withdrawal destination of the user\n    mapping(address => address) public userToWithdrawalDestination;\n\n    /// @notice Returns the withdrawal limit of the user\n    mapping(address => uint256) public userToWithdrawalLimit;\n\n    /// @notice Returns if the withdrawal with the hash is executed\n    mapping(bytes32 => bool) public withdrawalWithHashIsExecuted;\n\n    /// @param user User address\n    /// @param amount Amount\n    /// @dev Reverts if user address or amount is zero\n    modifier onlyNonZeroUserAddressAndAmount(address user, uint256 amount) {\n        require(user != address(0), \"User address zero\");\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        _;\n    }\n\n    /// @param _accessControlRegistry AccessControlRegistry contract address\n    /// @param _adminRoleDescription Admin role description\n    /// @param _manager Manager address\n    /// @param _token Contract address of the ERC20 token that prepayments are\n    /// made in\n    constructor(\n        address _accessControlRegistry,\n        string memory _adminRoleDescription,\n        address _manager,\n        address _token\n    )\n        AccessControlRegistryAdminnedWithManager(\n            _accessControlRegistry,\n            _adminRoleDescription,\n            _manager\n        )\n    {\n        require(_token != address(0), \"Token address zero\");\n        token = _token;\n        withdrawalSignerRole = _deriveRole(\n            _deriveAdminRole(manager),\n            WITHDRAWAL_SIGNER_ROLE_DESCRIPTION\n        );\n        userWithdrawalLimitIncreaserRole = _deriveRole(\n            _deriveAdminRole(manager),\n            USER_WITHDRAWAL_LIMIT_INCREASER_ROLE_DESCRIPTION\n        );\n        userWithdrawalLimitDecreaserRole = _deriveRole(\n            _deriveAdminRole(manager),\n            USER_WITHDRAWAL_LIMIT_DECREASER_ROLE_DESCRIPTION\n        );\n        claimerRole = _deriveRole(\n            _deriveAdminRole(manager),\n            CLAIMER_ROLE_DESCRIPTION\n        );\n    }\n\n    /// @notice Called by the user that has not set a withdrawal destination to\n    /// set a withdrawal destination, or called by the withdrawal destination\n    /// of a user to set a new withdrawal destination\n    /// @param user User address\n    /// @param withdrawalDestination Withdrawal destination\n    function setWithdrawalDestination(\n        address user,\n        address withdrawalDestination\n    ) external override {\n        require(user != withdrawalDestination, \"Same user and destination\");\n        require(\n            (msg.sender == user &&\n                userToWithdrawalDestination[user] == address(0)) ||\n                (msg.sender == userToWithdrawalDestination[user]),\n            \"Sender not destination\"\n        );\n        userToWithdrawalDestination[user] = withdrawalDestination;\n        emit SetWithdrawalDestination(user, withdrawalDestination);\n    }\n\n    /// @notice Called to increase the withdrawal limit of the user\n    /// @dev This function is intended to be used to revert faulty\n    /// `decreaseUserWithdrawalLimit()` calls\n    /// @param user User address\n    /// @param amount Amount to increase the withdrawal limit by\n    /// @return withdrawalLimit Increased withdrawal limit\n    function increaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    )\n        external\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    userWithdrawalLimitIncreaserRole,\n                    msg.sender\n                ),\n            \"Cannot increase withdrawal limit\"\n        );\n        withdrawalLimit = userToWithdrawalLimit[user] + amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit IncreasedUserWithdrawalLimit(\n            user,\n            amount,\n            withdrawalLimit,\n            msg.sender\n        );\n    }\n\n    /// @notice Called to decrease the withdrawal limit of the user\n    /// @param user User address\n    /// @param amount Amount to decrease the withdrawal limit by\n    /// @return withdrawalLimit Decreased withdrawal limit\n    function decreaseUserWithdrawalLimit(\n        address user,\n        uint256 amount\n    )\n        external\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    userWithdrawalLimitDecreaserRole,\n                    msg.sender\n                ),\n            \"Cannot decrease withdrawal limit\"\n        );\n        uint256 oldWithdrawalLimit = userToWithdrawalLimit[user];\n        require(\n            amount <= oldWithdrawalLimit,\n            AMOUNT_EXCEEDS_LIMIT_REVERT_STRING\n        );\n        withdrawalLimit = oldWithdrawalLimit - amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit DecreasedUserWithdrawalLimit(\n            user,\n            amount,\n            withdrawalLimit,\n            msg.sender\n        );\n    }\n\n    /// @notice Called to claim tokens\n    /// @param recipient Recipient address\n    /// @param amount Amount of tokens to claim\n    function claim(address recipient, uint256 amount) external override {\n        require(recipient != address(0), \"Recipient address zero\");\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        require(\n            msg.sender == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    claimerRole,\n                    msg.sender\n                ),\n            \"Cannot claim\"\n        );\n        emit Claimed(recipient, amount, msg.sender);\n        require(\n            IERC20(token).transfer(recipient, amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n\n    /// @notice Called to deposit tokens on behalf of a user\n    /// @param user User address\n    /// @param amount Amount of tokens to deposit\n    /// @return withdrawalLimit Increased withdrawal limit\n    function deposit(\n        address user,\n        uint256 amount\n    )\n        public\n        override\n        onlyNonZeroUserAddressAndAmount(user, amount)\n        returns (uint256 withdrawalLimit)\n    {\n        withdrawalLimit = userToWithdrawalLimit[user] + amount;\n        userToWithdrawalLimit[user] = withdrawalLimit;\n        emit Deposited(user, amount, withdrawalLimit, msg.sender);\n        require(\n            IERC20(token).transferFrom(msg.sender, address(this), amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n\n    /// @notice Called to apply a ERC2612 permit and deposit tokens on behalf\n    /// of a user\n    /// @param user User address\n    /// @param amount Amount of tokens to deposit\n    /// @param deadline Deadline of the permit\n    /// @param v v component of the signature\n    /// @param r r component of the signature\n    /// @param s s component of the signature\n    /// @return withdrawalLimit Increased withdrawal limit\n    function applyPermitAndDeposit(\n        address user,\n        uint256 amount,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external override returns (uint256 withdrawalLimit) {\n        IERC20Permit(token).permit(\n            msg.sender,\n            address(this),\n            amount,\n            deadline,\n            v,\n            r,\n            s\n        );\n        withdrawalLimit = deposit(user, amount);\n    }\n\n    /// @notice Called by a user to withdraw tokens\n    /// @param amount Amount of tokens to withdraw\n    /// @param expirationTimestamp Expiration timestamp of the signature\n    /// @param withdrawalSigner Address of the account that signed the\n    /// withdrawal\n    /// @param signature Withdrawal signature\n    /// @return withdrawalDestination Withdrawal destination\n    /// @return withdrawalLimit Decreased withdrawal limit\n    function withdraw(\n        uint256 amount,\n        uint256 expirationTimestamp,\n        address withdrawalSigner,\n        bytes calldata signature\n    )\n        external\n        override\n        returns (address withdrawalDestination, uint256 withdrawalLimit)\n    {\n        require(amount != 0, AMOUNT_ZERO_REVERT_STRING);\n        require(block.timestamp < expirationTimestamp, \"Signature expired\");\n        bytes32 withdrawalHash = keccak256(\n            abi.encodePacked(\n                block.chainid,\n                address(this),\n                msg.sender,\n                amount,\n                expirationTimestamp\n            )\n        );\n        require(\n            !withdrawalWithHashIsExecuted[withdrawalHash],\n            \"Withdrawal already executed\"\n        );\n        require(\n            withdrawalSigner == manager ||\n                IAccessControlRegistry(accessControlRegistry).hasRole(\n                    withdrawalSignerRole,\n                    withdrawalSigner\n                ),\n            \"Cannot sign withdrawal\"\n        );\n        require(\n            (withdrawalHash.toEthSignedMessageHash()).recover(signature) ==\n                withdrawalSigner,\n            \"Signature mismatch\"\n        );\n        withdrawalWithHashIsExecuted[withdrawalHash] = true;\n        uint256 oldWithdrawalLimit = userToWithdrawalLimit[msg.sender];\n        require(\n            amount <= oldWithdrawalLimit,\n            AMOUNT_EXCEEDS_LIMIT_REVERT_STRING\n        );\n        withdrawalLimit = oldWithdrawalLimit - amount;\n        userToWithdrawalLimit[msg.sender] = withdrawalLimit;\n        if (userToWithdrawalDestination[msg.sender] == address(0)) {\n            withdrawalDestination = msg.sender;\n        } else {\n            withdrawalDestination = userToWithdrawalDestination[msg.sender];\n        }\n        emit Withdrew(\n            msg.sender,\n            withdrawalHash,\n            amount,\n            expirationTimestamp,\n            withdrawalSigner,\n            withdrawalDestination,\n            withdrawalLimit\n        );\n        require(\n            IERC20(token).transfer(withdrawalDestination, amount),\n            TRANSFER_UNSUCCESSFUL_REVERT_STRING\n        );\n    }\n}\n"
    },
    "contracts/utils/SelfMulticall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/ISelfMulticall.sol\";\n\n/// @title Contract that enables calls to the inheriting contract to be batched\n/// @notice Implements two ways of batching, one requires none of the calls to\n/// revert and the other tolerates individual calls reverting\n/// @dev This implementation uses delegatecall for individual function calls.\n/// Since delegatecall is a message call, it can only be made to functions that\n/// are externally visible. This means that a contract cannot multicall its own\n/// functions that use internal/private visibility modifiers.\n/// Refer to OpenZeppelin's Multicall.sol for a similar implementation.\ncontract SelfMulticall is ISelfMulticall {\n    /// @notice Batches calls to the inheriting contract and reverts as soon as\n    /// one of the batched calls reverts\n    /// @param data Array of calldata of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function multicall(\n        bytes[] calldata data\n    ) external override returns (bytes[] memory returndata) {\n        uint256 callCount = data.length;\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            bool success;\n            // solhint-disable-next-line avoid-low-level-calls\n            (success, returndata[ind]) = address(this).delegatecall(data[ind]);\n            if (!success) {\n                bytes memory returndataWithRevertData = returndata[ind];\n                if (returndataWithRevertData.length > 0) {\n                    // Adapted from OpenZeppelin's Address.sol\n                    // solhint-disable-next-line no-inline-assembly\n                    assembly {\n                        let returndata_size := mload(returndataWithRevertData)\n                        revert(\n                            add(32, returndataWithRevertData),\n                            returndata_size\n                        )\n                    }\n                } else {\n                    revert(\"Multicall: No revert string\");\n                }\n            }\n            unchecked {\n                ind++;\n            }\n        }\n    }\n\n    /// @notice Batches calls to the inheriting contract but does not revert if\n    /// any of the batched calls reverts\n    /// @param data Array of calldata of batched calls\n    /// @return successes Array of success conditions of batched calls\n    /// @return returndata Array of returndata of batched calls\n    function tryMulticall(\n        bytes[] calldata data\n    )\n        external\n        override\n        returns (bool[] memory successes, bytes[] memory returndata)\n    {\n        uint256 callCount = data.length;\n        successes = new bool[](callCount);\n        returndata = new bytes[](callCount);\n        for (uint256 ind = 0; ind < callCount; ) {\n            // solhint-disable-next-line avoid-low-level-calls\n            (successes[ind], returndata[ind]) = address(this).delegatecall(\n                data[ind]\n            );\n            unchecked {\n                ind++;\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
